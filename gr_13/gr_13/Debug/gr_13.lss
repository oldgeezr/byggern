
gr_13.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000f0  00800100  0000137c  00001410  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000137c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  008001f0  008001f0  00001500  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001500  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000118  00000000  00000000  0000155c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000bf6  00000000  00000000  00001674  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000623  00000000  00000000  0000226a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007fe  00000000  00000000  0000288d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000298  00000000  00000000  0000308c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000365  00000000  00000000  00003324  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000476  00000000  00000000  00003689  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000e8  00000000  00000000  00003aff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
 */ 

#include "adc.h"

uint8_t ADC_read(ADC_channel ch)
{
       0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
       4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
       8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
       c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
	volatile char *adc = (char *) 0x1400;
      18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
	adc[1] = ch;
      20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
      3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
	__tmp2 = ((F_CPU) / 4e6) * __us;
      5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
      70:	11 24       	eor	r1, r1
      72:	1f be       	out	0x3f, r1	; 63
      74:	cf ef       	ldi	r28, 0xFF	; 255
      76:	d4 e0       	ldi	r29, 0x04	; 4
      78:	de bf       	out	0x3e, r29	; 62
	if (__tmp < 1.0)
      7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
      7c:	11 e0       	ldi	r17, 0x01	; 1
      7e:	a0 e0       	ldi	r26, 0x00	; 0
      80:	b1 e0       	ldi	r27, 0x01	; 1
      82:	ec e7       	ldi	r30, 0x7C	; 124
      84:	f3 e1       	ldi	r31, 0x13	; 19
      86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
      88:	05 90       	lpm	r0, Z+
      8a:	0d 92       	st	X+, r0
      8c:	a0 3f       	cpi	r26, 0xF0	; 240
      8e:	b1 07       	cpc	r27, r17
      90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
		__ticks = 1;
      92:	21 e0       	ldi	r18, 0x01	; 1
      94:	a0 ef       	ldi	r26, 0xF0	; 240
      96:	b1 e0       	ldi	r27, 0x01	; 1
	else if (__tmp2 > 65535)
      98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
      9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
      9c:	ac 3f       	cpi	r26, 0xFC	; 252
      9e:	b2 07       	cpc	r27, r18
      a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
      a2:	0e 94 57 00 	call	0xae	; 0xae <main>
      a6:	0c 94 bc 09 	jmp	0x1378	; 0x1378 <_exit>

000000aa <__bad_interrupt>:
      aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <main>:
      ae:	cf 93       	push	r28
      b0:	df 93       	push	r29
	{
		_delay_ms(__us / 1000.0);
      b2:	cd b7       	in	r28, 0x3d	; 61
      b4:	de b7       	in	r29, 0x3e	; 62
      b6:	6d 97       	sbiw	r28, 0x1d	; 29
      b8:	0f b6       	in	r0, 0x3f	; 63
      ba:	f8 94       	cli
      bc:	de bf       	out	0x3e, r29	; 62
      be:	0f be       	out	0x3f, r0	; 63
      c0:	cd bf       	out	0x3d, r28	; 61
      c2:	0e 94 c5 03 	call	0x78a	; 0x78a <usart_setup>
      c6:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <SRAM_init>
      ca:	0e 94 63 01 	call	0x2c6	; 0x2c6 <JOYSTICK_init>
      ce:	0e 94 73 01 	call	0x2e6	; 0x2e6 <OLED_init>

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
      d2:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <SRAM_test>
      d6:	0e 94 13 02 	call	0x426	; 0x426 <OLED_start>
      da:	0e 94 50 02 	call	0x4a0	; 0x4a0 <OLED_clear>
      de:	19 82       	std	Y+1, r1	; 0x01
      e0:	7b c0       	rjmp	.+246    	; 0x1d8 <main+0x12a>
      e2:	89 81       	ldd	r24, Y+1	; 0x01
      e4:	8e 5c       	subi	r24, 0xCE	; 206
      e6:	68 2f       	mov	r22, r24
      e8:	84 e6       	ldi	r24, 0x64	; 100
      ea:	0e 94 85 02 	call	0x50a	; 0x50a <OLED_set_pixel>
      ee:	80 e0       	ldi	r24, 0x00	; 0
      f0:	90 e0       	ldi	r25, 0x00	; 0
	if (__tmp < 1.0)
      f2:	aa ef       	ldi	r26, 0xFA	; 250
      f4:	b3 e4       	ldi	r27, 0x43	; 67
      f6:	8a 83       	std	Y+2, r24	; 0x02
      f8:	9b 83       	std	Y+3, r25	; 0x03
      fa:	ac 83       	std	Y+4, r26	; 0x04
      fc:	bd 83       	std	Y+5, r27	; 0x05
      fe:	2a e9       	ldi	r18, 0x9A	; 154
     100:	39 e9       	ldi	r19, 0x99	; 153
     102:	49 e9       	ldi	r20, 0x99	; 153
     104:	54 e4       	ldi	r21, 0x44	; 68
     106:	6a 81       	ldd	r22, Y+2	; 0x02
     108:	7b 81       	ldd	r23, Y+3	; 0x03
		__ticks = 1;
     10a:	8c 81       	ldd	r24, Y+4	; 0x04
     10c:	9d 81       	ldd	r25, Y+5	; 0x05
     10e:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__mulsf3>
     112:	dc 01       	movw	r26, r24
	else if (__tmp > 65535)
     114:	cb 01       	movw	r24, r22
     116:	8e 83       	std	Y+6, r24	; 0x06
     118:	9f 83       	std	Y+7, r25	; 0x07
     11a:	a8 87       	std	Y+8, r26	; 0x08
     11c:	b9 87       	std	Y+9, r27	; 0x09
     11e:	20 e0       	ldi	r18, 0x00	; 0
     120:	30 e0       	ldi	r19, 0x00	; 0
     122:	40 e8       	ldi	r20, 0x80	; 128
     124:	5f e3       	ldi	r21, 0x3F	; 63
     126:	6e 81       	ldd	r22, Y+6	; 0x06
     128:	7f 81       	ldd	r23, Y+7	; 0x07
     12a:	88 85       	ldd	r24, Y+8	; 0x08
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     12c:	99 85       	ldd	r25, Y+9	; 0x09
     12e:	0e 94 2b 04 	call	0x856	; 0x856 <__cmpsf2>
     132:	88 23       	and	r24, r24
     134:	2c f4       	brge	.+10     	; 0x140 <main+0x92>
     136:	81 e0       	ldi	r24, 0x01	; 1
     138:	90 e0       	ldi	r25, 0x00	; 0
     13a:	9b 87       	std	Y+11, r25	; 0x0b
     13c:	8a 87       	std	Y+10, r24	; 0x0a
     13e:	3f c0       	rjmp	.+126    	; 0x1be <main+0x110>
     140:	20 e0       	ldi	r18, 0x00	; 0
     142:	3f ef       	ldi	r19, 0xFF	; 255
     144:	4f e7       	ldi	r20, 0x7F	; 127
     146:	57 e4       	ldi	r21, 0x47	; 71
     148:	6e 81       	ldd	r22, Y+6	; 0x06
     14a:	7f 81       	ldd	r23, Y+7	; 0x07
     14c:	88 85       	ldd	r24, Y+8	; 0x08
     14e:	99 85       	ldd	r25, Y+9	; 0x09
     150:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <__gesf2>
     154:	18 16       	cp	r1, r24
     156:	4c f5       	brge	.+82     	; 0x1aa <main+0xfc>
     158:	20 e0       	ldi	r18, 0x00	; 0
     15a:	30 e0       	ldi	r19, 0x00	; 0
     15c:	40 e2       	ldi	r20, 0x20	; 32
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     15e:	51 e4       	ldi	r21, 0x41	; 65
     160:	6a 81       	ldd	r22, Y+2	; 0x02
     162:	7b 81       	ldd	r23, Y+3	; 0x03
     164:	8c 81       	ldd	r24, Y+4	; 0x04
     166:	9d 81       	ldd	r25, Y+5	; 0x05
     168:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__mulsf3>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     16c:	dc 01       	movw	r26, r24
     16e:	cb 01       	movw	r24, r22
     170:	bc 01       	movw	r22, r24
     172:	cd 01       	movw	r24, r26
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     174:	0e 94 2f 04 	call	0x85e	; 0x85e <__fixunssfsi>
     178:	dc 01       	movw	r26, r24
     17a:	cb 01       	movw	r24, r22
     17c:	9b 87       	std	Y+11, r25	; 0x0b
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     17e:	8a 87       	std	Y+10, r24	; 0x0a
     180:	0f c0       	rjmp	.+30     	; 0x1a0 <main+0xf2>
     182:	8a e7       	ldi	r24, 0x7A	; 122
     184:	90 e0       	ldi	r25, 0x00	; 0
     186:	9d 87       	std	Y+13, r25	; 0x0d
     188:	8c 87       	std	Y+12, r24	; 0x0c
     18a:	8c 85       	ldd	r24, Y+12	; 0x0c
     18c:	9d 85       	ldd	r25, Y+13	; 0x0d
     18e:	01 97       	sbiw	r24, 0x01	; 1
     190:	f1 f7       	brne	.-4      	; 0x18e <main+0xe0>
     192:	9d 87       	std	Y+13, r25	; 0x0d
     194:	8c 87       	std	Y+12, r24	; 0x0c
     196:	8a 85       	ldd	r24, Y+10	; 0x0a
     198:	9b 85       	ldd	r25, Y+11	; 0x0b
     19a:	01 97       	sbiw	r24, 0x01	; 1
     19c:	9b 87       	std	Y+11, r25	; 0x0b
     19e:	8a 87       	std	Y+10, r24	; 0x0a
     1a0:	8a 85       	ldd	r24, Y+10	; 0x0a
     1a2:	9b 85       	ldd	r25, Y+11	; 0x0b
     1a4:	00 97       	sbiw	r24, 0x00	; 0
     1a6:	69 f7       	brne	.-38     	; 0x182 <main+0xd4>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     1a8:	14 c0       	rjmp	.+40     	; 0x1d2 <main+0x124>
     1aa:	6e 81       	ldd	r22, Y+6	; 0x06
     1ac:	7f 81       	ldd	r23, Y+7	; 0x07
     1ae:	88 85       	ldd	r24, Y+8	; 0x08
     1b0:	99 85       	ldd	r25, Y+9	; 0x09
     1b2:	0e 94 2f 04 	call	0x85e	; 0x85e <__fixunssfsi>
     1b6:	dc 01       	movw	r26, r24
     1b8:	cb 01       	movw	r24, r22
     1ba:	9b 87       	std	Y+11, r25	; 0x0b
     1bc:	8a 87       	std	Y+10, r24	; 0x0a
     1be:	8a 85       	ldd	r24, Y+10	; 0x0a
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     1c0:	9b 85       	ldd	r25, Y+11	; 0x0b
     1c2:	9f 87       	std	Y+15, r25	; 0x0f
     1c4:	8e 87       	std	Y+14, r24	; 0x0e
     1c6:	8e 85       	ldd	r24, Y+14	; 0x0e
     1c8:	9f 85       	ldd	r25, Y+15	; 0x0f
     1ca:	01 97       	sbiw	r24, 0x01	; 1
     1cc:	f1 f7       	brne	.-4      	; 0x1ca <main+0x11c>
     1ce:	9f 87       	std	Y+15, r25	; 0x0f
     1d0:	8e 87       	std	Y+14, r24	; 0x0e
     1d2:	89 81       	ldd	r24, Y+1	; 0x01
     1d4:	8f 5f       	subi	r24, 0xFF	; 255
     1d6:	89 83       	std	Y+1, r24	; 0x01
     1d8:	89 81       	ldd	r24, Y+1	; 0x01
     1da:	88 30       	cpi	r24, 0x08	; 8
     1dc:	08 f4       	brcc	.+2      	; 0x1e0 <main+0x132>
     1de:	81 cf       	rjmp	.-254    	; 0xe2 <main+0x34>
     1e0:	80 e0       	ldi	r24, 0x00	; 0
     1e2:	90 e0       	ldi	r25, 0x00	; 0
     1e4:	a0 e2       	ldi	r26, 0x20	; 32
     1e6:	b1 e4       	ldi	r27, 0x41	; 65
     1e8:	88 8b       	std	Y+16, r24	; 0x10
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     1ea:	99 8b       	std	Y+17, r25	; 0x11
     1ec:	aa 8b       	std	Y+18, r26	; 0x12
     1ee:	bb 8b       	std	Y+19, r27	; 0x13
     1f0:	2a e9       	ldi	r18, 0x9A	; 154
     1f2:	39 e9       	ldi	r19, 0x99	; 153
     1f4:	49 e9       	ldi	r20, 0x99	; 153
     1f6:	54 e4       	ldi	r21, 0x44	; 68
     1f8:	68 89       	ldd	r22, Y+16	; 0x10
     1fa:	79 89       	ldd	r23, Y+17	; 0x11
     1fc:	8a 89       	ldd	r24, Y+18	; 0x12
     1fe:	9b 89       	ldd	r25, Y+19	; 0x13
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     200:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__mulsf3>
     204:	dc 01       	movw	r26, r24
     206:	cb 01       	movw	r24, r22
	_delay_us(40);
	
	return adc[0];
     208:	8c 8b       	std	Y+20, r24	; 0x14
     20a:	9d 8b       	std	Y+21, r25	; 0x15
     20c:	ae 8b       	std	Y+22, r26	; 0x16
     20e:	bf 8b       	std	Y+23, r27	; 0x17
     210:	20 e0       	ldi	r18, 0x00	; 0
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e8       	ldi	r20, 0x80	; 128
     216:	5f e3       	ldi	r21, 0x3F	; 63
     218:	6c 89       	ldd	r22, Y+20	; 0x14
     21a:	7d 89       	ldd	r23, Y+21	; 0x15
     21c:	8e 89       	ldd	r24, Y+22	; 0x16
     21e:	9f 89       	ldd	r25, Y+23	; 0x17
     220:	0e 94 2b 04 	call	0x856	; 0x856 <__cmpsf2>
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
     224:	88 23       	and	r24, r24
     226:	2c f4       	brge	.+10     	; 0x232 <main+0x184>
		__ticks = 1;
     228:	81 e0       	ldi	r24, 0x01	; 1
     22a:	90 e0       	ldi	r25, 0x00	; 0
     22c:	99 8f       	std	Y+25, r25	; 0x19
     22e:	88 8f       	std	Y+24, r24	; 0x18
     230:	3f c0       	rjmp	.+126    	; 0x2b0 <main+0x202>
	else if (__tmp > 65535)
     232:	20 e0       	ldi	r18, 0x00	; 0
     234:	3f ef       	ldi	r19, 0xFF	; 255
     236:	4f e7       	ldi	r20, 0x7F	; 127
     238:	57 e4       	ldi	r21, 0x47	; 71
     23a:	6c 89       	ldd	r22, Y+20	; 0x14
     23c:	7d 89       	ldd	r23, Y+21	; 0x15
     23e:	8e 89       	ldd	r24, Y+22	; 0x16
     240:	9f 89       	ldd	r25, Y+23	; 0x17
     242:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <__gesf2>
     246:	18 16       	cp	r1, r24
     248:	4c f5       	brge	.+82     	; 0x29c <main+0x1ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     24a:	20 e0       	ldi	r18, 0x00	; 0
     24c:	30 e0       	ldi	r19, 0x00	; 0
     24e:	40 e2       	ldi	r20, 0x20	; 32
     250:	51 e4       	ldi	r21, 0x41	; 65
     252:	68 89       	ldd	r22, Y+16	; 0x10
     254:	79 89       	ldd	r23, Y+17	; 0x11
     256:	8a 89       	ldd	r24, Y+18	; 0x12
     258:	9b 89       	ldd	r25, Y+19	; 0x13
     25a:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__mulsf3>
     25e:	dc 01       	movw	r26, r24
     260:	cb 01       	movw	r24, r22
     262:	bc 01       	movw	r22, r24
     264:	cd 01       	movw	r24, r26
     266:	0e 94 2f 04 	call	0x85e	; 0x85e <__fixunssfsi>
     26a:	dc 01       	movw	r26, r24
     26c:	cb 01       	movw	r24, r22
     26e:	99 8f       	std	Y+25, r25	; 0x19
     270:	88 8f       	std	Y+24, r24	; 0x18
     272:	0f c0       	rjmp	.+30     	; 0x292 <main+0x1e4>
     274:	8a e7       	ldi	r24, 0x7A	; 122
     276:	90 e0       	ldi	r25, 0x00	; 0
     278:	9b 8f       	std	Y+27, r25	; 0x1b
     27a:	8a 8f       	std	Y+26, r24	; 0x1a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     27c:	8a 8d       	ldd	r24, Y+26	; 0x1a
     27e:	9b 8d       	ldd	r25, Y+27	; 0x1b
     280:	01 97       	sbiw	r24, 0x01	; 1
     282:	f1 f7       	brne	.-4      	; 0x280 <main+0x1d2>
     284:	9b 8f       	std	Y+27, r25	; 0x1b
     286:	8a 8f       	std	Y+26, r24	; 0x1a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     288:	88 8d       	ldd	r24, Y+24	; 0x18
     28a:	99 8d       	ldd	r25, Y+25	; 0x19
     28c:	01 97       	sbiw	r24, 0x01	; 1
     28e:	99 8f       	std	Y+25, r25	; 0x19
     290:	88 8f       	std	Y+24, r24	; 0x18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     292:	88 8d       	ldd	r24, Y+24	; 0x18
     294:	99 8d       	ldd	r25, Y+25	; 0x19
     296:	00 97       	sbiw	r24, 0x00	; 0
     298:	69 f7       	brne	.-38     	; 0x274 <main+0x1c6>
		//result = ADC_read(JOY_X);
		//printf(" , POS: %d \n", result);
		
		_delay_ms(10);
		
    }
     29a:	1d cf       	rjmp	.-454    	; 0xd6 <main+0x28>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     29c:	6c 89       	ldd	r22, Y+20	; 0x14
     29e:	7d 89       	ldd	r23, Y+21	; 0x15
     2a0:	8e 89       	ldd	r24, Y+22	; 0x16
     2a2:	9f 89       	ldd	r25, Y+23	; 0x17
     2a4:	0e 94 2f 04 	call	0x85e	; 0x85e <__fixunssfsi>
     2a8:	dc 01       	movw	r26, r24
     2aa:	cb 01       	movw	r24, r22
     2ac:	99 8f       	std	Y+25, r25	; 0x19
     2ae:	88 8f       	std	Y+24, r24	; 0x18
     2b0:	88 8d       	ldd	r24, Y+24	; 0x18
     2b2:	99 8d       	ldd	r25, Y+25	; 0x19
     2b4:	9d 8f       	std	Y+29, r25	; 0x1d
     2b6:	8c 8f       	std	Y+28, r24	; 0x1c
     2b8:	8c 8d       	ldd	r24, Y+28	; 0x1c
     2ba:	9d 8d       	ldd	r25, Y+29	; 0x1d
     2bc:	01 97       	sbiw	r24, 0x01	; 1
     2be:	f1 f7       	brne	.-4      	; 0x2bc <main+0x20e>
     2c0:	9d 8f       	std	Y+29, r25	; 0x1d
     2c2:	8c 8f       	std	Y+28, r24	; 0x1c
     2c4:	08 cf       	rjmp	.-496    	; 0xd6 <main+0x28>

000002c6 <JOYSTICK_init>:
 */ 

#include "joystick.h"
#include "adc.h"

void JOYSTICK_init() {
     2c6:	cf 93       	push	r28
     2c8:	df 93       	push	r29
     2ca:	cd b7       	in	r28, 0x3d	; 61
     2cc:	de b7       	in	r29, 0x3e	; 62
	PORTE |= (1 << PE0); //Enable pullup
     2ce:	87 e2       	ldi	r24, 0x27	; 39
     2d0:	90 e0       	ldi	r25, 0x00	; 0
     2d2:	27 e2       	ldi	r18, 0x27	; 39
     2d4:	30 e0       	ldi	r19, 0x00	; 0
     2d6:	f9 01       	movw	r30, r18
     2d8:	20 81       	ld	r18, Z
     2da:	21 60       	ori	r18, 0x01	; 1
     2dc:	fc 01       	movw	r30, r24
     2de:	20 83       	st	Z, r18
	//GICR |= (1 << INTF2);
	//sei();
}
     2e0:	df 91       	pop	r29
     2e2:	cf 91       	pop	r28
     2e4:	08 95       	ret

000002e6 <OLED_init>:
#include "oled.h"

volatile char *command = (char *) 0x1000;
volatile char *data = (char *) 0x1200;

void OLED_init() {
     2e6:	cf 93       	push	r28
     2e8:	df 93       	push	r29
     2ea:	cd b7       	in	r28, 0x3d	; 61
     2ec:	de b7       	in	r29, 0x3e	; 62
	*command = 0xae; // display off
     2ee:	80 91 06 01 	lds	r24, 0x0106
     2f2:	90 91 07 01 	lds	r25, 0x0107
     2f6:	2e ea       	ldi	r18, 0xAE	; 174
     2f8:	fc 01       	movw	r30, r24
     2fa:	20 83       	st	Z, r18
	*command = 0xa1; //segment remap
     2fc:	80 91 06 01 	lds	r24, 0x0106
     300:	90 91 07 01 	lds	r25, 0x0107
     304:	21 ea       	ldi	r18, 0xA1	; 161
     306:	fc 01       	movw	r30, r24
     308:	20 83       	st	Z, r18
	*command = 0xda; //common pads hardware: alternative
     30a:	80 91 06 01 	lds	r24, 0x0106
     30e:	90 91 07 01 	lds	r25, 0x0107
     312:	2a ed       	ldi	r18, 0xDA	; 218
     314:	fc 01       	movw	r30, r24
     316:	20 83       	st	Z, r18
	*command = 0x12;
     318:	80 91 06 01 	lds	r24, 0x0106
     31c:	90 91 07 01 	lds	r25, 0x0107
     320:	22 e1       	ldi	r18, 0x12	; 18
     322:	fc 01       	movw	r30, r24
     324:	20 83       	st	Z, r18
	*command = 0xc8; //commonoutput scan direction:com63~com0
     326:	80 91 06 01 	lds	r24, 0x0106
     32a:	90 91 07 01 	lds	r25, 0x0107
     32e:	28 ec       	ldi	r18, 0xC8	; 200
     330:	fc 01       	movw	r30, r24
     332:	20 83       	st	Z, r18
	*command = 0xa8; //multiplex ration mode:63
     334:	80 91 06 01 	lds	r24, 0x0106
     338:	90 91 07 01 	lds	r25, 0x0107
     33c:	28 ea       	ldi	r18, 0xA8	; 168
     33e:	fc 01       	movw	r30, r24
     340:	20 83       	st	Z, r18
	*command = 0x3f;
     342:	80 91 06 01 	lds	r24, 0x0106
     346:	90 91 07 01 	lds	r25, 0x0107
     34a:	2f e3       	ldi	r18, 0x3F	; 63
     34c:	fc 01       	movw	r30, r24
     34e:	20 83       	st	Z, r18
	*command = 0xd5; //display divide ratio/osc. freq. mode
     350:	80 91 06 01 	lds	r24, 0x0106
     354:	90 91 07 01 	lds	r25, 0x0107
     358:	25 ed       	ldi	r18, 0xD5	; 213
     35a:	fc 01       	movw	r30, r24
     35c:	20 83       	st	Z, r18
	*command = 0x80;
     35e:	80 91 06 01 	lds	r24, 0x0106
     362:	90 91 07 01 	lds	r25, 0x0107
     366:	20 e8       	ldi	r18, 0x80	; 128
     368:	fc 01       	movw	r30, r24
     36a:	20 83       	st	Z, r18
	*command = 0x81; //contrast control
     36c:	80 91 06 01 	lds	r24, 0x0106
     370:	90 91 07 01 	lds	r25, 0x0107
     374:	21 e8       	ldi	r18, 0x81	; 129
     376:	fc 01       	movw	r30, r24
     378:	20 83       	st	Z, r18
	*command = 0x50;
     37a:	80 91 06 01 	lds	r24, 0x0106
     37e:	90 91 07 01 	lds	r25, 0x0107
     382:	20 e5       	ldi	r18, 0x50	; 80
     384:	fc 01       	movw	r30, r24
     386:	20 83       	st	Z, r18
	*command = 0xd9; //set pre-charge period
     388:	80 91 06 01 	lds	r24, 0x0106
     38c:	90 91 07 01 	lds	r25, 0x0107
     390:	29 ed       	ldi	r18, 0xD9	; 217
     392:	fc 01       	movw	r30, r24
     394:	20 83       	st	Z, r18
	*command = 0x21;
     396:	80 91 06 01 	lds	r24, 0x0106
     39a:	90 91 07 01 	lds	r25, 0x0107
     39e:	21 e2       	ldi	r18, 0x21	; 33
     3a0:	fc 01       	movw	r30, r24
     3a2:	20 83       	st	Z, r18
	*command = 0x20; //Set Memory Addressing Mode
     3a4:	80 91 06 01 	lds	r24, 0x0106
     3a8:	90 91 07 01 	lds	r25, 0x0107
     3ac:	20 e2       	ldi	r18, 0x20	; 32
     3ae:	fc 01       	movw	r30, r24
     3b0:	20 83       	st	Z, r18
	*command = 0x02;
     3b2:	80 91 06 01 	lds	r24, 0x0106
     3b6:	90 91 07 01 	lds	r25, 0x0107
     3ba:	22 e0       	ldi	r18, 0x02	; 2
     3bc:	fc 01       	movw	r30, r24
     3be:	20 83       	st	Z, r18
	*command = 0xdb; //VCOM deselect level mode
     3c0:	80 91 06 01 	lds	r24, 0x0106
     3c4:	90 91 07 01 	lds	r25, 0x0107
     3c8:	2b ed       	ldi	r18, 0xDB	; 219
     3ca:	fc 01       	movw	r30, r24
     3cc:	20 83       	st	Z, r18
	*command = 0x30;
     3ce:	80 91 06 01 	lds	r24, 0x0106
     3d2:	90 91 07 01 	lds	r25, 0x0107
     3d6:	20 e3       	ldi	r18, 0x30	; 48
     3d8:	fc 01       	movw	r30, r24
     3da:	20 83       	st	Z, r18
	*command = 0xad; //master configuration
     3dc:	80 91 06 01 	lds	r24, 0x0106
     3e0:	90 91 07 01 	lds	r25, 0x0107
     3e4:	2d ea       	ldi	r18, 0xAD	; 173
     3e6:	fc 01       	movw	r30, r24
     3e8:	20 83       	st	Z, r18
	*command = 0x00;
     3ea:	80 91 06 01 	lds	r24, 0x0106
     3ee:	90 91 07 01 	lds	r25, 0x0107
     3f2:	fc 01       	movw	r30, r24
     3f4:	10 82       	st	Z, r1
	*command = 0xa4; //out follows RAM content
     3f6:	80 91 06 01 	lds	r24, 0x0106
     3fa:	90 91 07 01 	lds	r25, 0x0107
     3fe:	24 ea       	ldi	r18, 0xA4	; 164
     400:	fc 01       	movw	r30, r24
     402:	20 83       	st	Z, r18
	*command = 0xa6; //set normal display
     404:	80 91 06 01 	lds	r24, 0x0106
     408:	90 91 07 01 	lds	r25, 0x0107
     40c:	26 ea       	ldi	r18, 0xA6	; 166
     40e:	fc 01       	movw	r30, r24
     410:	20 83       	st	Z, r18
	*command = 0xaf; // display on
     412:	80 91 06 01 	lds	r24, 0x0106
     416:	90 91 07 01 	lds	r25, 0x0107
     41a:	2f ea       	ldi	r18, 0xAF	; 175
     41c:	fc 01       	movw	r30, r24
     41e:	20 83       	st	Z, r18

	// *command = 0x40; // Set display start line 0 (to 63)
}
     420:	df 91       	pop	r29
     422:	cf 91       	pop	r28
     424:	08 95       	ret

00000426 <OLED_start>:

void OLED_start() {
     426:	cf 93       	push	r28
     428:	df 93       	push	r29
     42a:	cd b7       	in	r28, 0x3d	; 61
     42c:	de b7       	in	r29, 0x3e	; 62
	
	//Set memory addressing mode (page)
	*command = 0x20;
     42e:	80 91 06 01 	lds	r24, 0x0106
     432:	90 91 07 01 	lds	r25, 0x0107
     436:	20 e2       	ldi	r18, 0x20	; 32
     438:	fc 01       	movw	r30, r24
     43a:	20 83       	st	Z, r18
	*command = 0x10;
     43c:	80 91 06 01 	lds	r24, 0x0106
     440:	90 91 07 01 	lds	r25, 0x0107
     444:	20 e1       	ldi	r18, 0x10	; 16
     446:	fc 01       	movw	r30, r24
     448:	20 83       	st	Z, r18
	//*command = 0x0b);
	
	//Set column address
	*command = 0x21;
     44a:	80 91 06 01 	lds	r24, 0x0106
     44e:	90 91 07 01 	lds	r25, 0x0107
     452:	21 e2       	ldi	r18, 0x21	; 33
     454:	fc 01       	movw	r30, r24
     456:	20 83       	st	Z, r18
	*command = 0x00;
     458:	80 91 06 01 	lds	r24, 0x0106
     45c:	90 91 07 01 	lds	r25, 0x0107
     460:	fc 01       	movw	r30, r24
     462:	10 82       	st	Z, r1
	*command = 0x7f;
     464:	80 91 06 01 	lds	r24, 0x0106
     468:	90 91 07 01 	lds	r25, 0x0107
     46c:	2f e7       	ldi	r18, 0x7F	; 127
     46e:	fc 01       	movw	r30, r24
     470:	20 83       	st	Z, r18
	
	//Set page address
	*command = 0x22;
     472:	80 91 06 01 	lds	r24, 0x0106
     476:	90 91 07 01 	lds	r25, 0x0107
     47a:	22 e2       	ldi	r18, 0x22	; 34
     47c:	fc 01       	movw	r30, r24
     47e:	20 83       	st	Z, r18
	*command = 0x00;
     480:	80 91 06 01 	lds	r24, 0x0106
     484:	90 91 07 01 	lds	r25, 0x0107
     488:	fc 01       	movw	r30, r24
     48a:	10 82       	st	Z, r1
	*command = 0x07;
     48c:	80 91 06 01 	lds	r24, 0x0106
     490:	90 91 07 01 	lds	r25, 0x0107
     494:	27 e0       	ldi	r18, 0x07	; 7
     496:	fc 01       	movw	r30, r24
     498:	20 83       	st	Z, r18
	
}
     49a:	df 91       	pop	r29
     49c:	cf 91       	pop	r28
     49e:	08 95       	ret

000004a0 <OLED_clear>:

void OLED_clear() {
     4a0:	cf 93       	push	r28
     4a2:	df 93       	push	r29
     4a4:	00 d0       	rcall	.+0      	; 0x4a6 <OLED_clear+0x6>
     4a6:	1f 92       	push	r1
     4a8:	cd b7       	in	r28, 0x3d	; 61
     4aa:	de b7       	in	r29, 0x3e	; 62
	
	*command = 0x40; // Set display start line 0 (to 63)
     4ac:	80 91 06 01 	lds	r24, 0x0106
     4b0:	90 91 07 01 	lds	r25, 0x0107
     4b4:	20 e4       	ldi	r18, 0x40	; 64
     4b6:	fc 01       	movw	r30, r24
     4b8:	20 83       	st	Z, r18
	
	char start; // Set page start address of target display location
	
	for (uint8_t i = 0; i < 8; i++) {
     4ba:	19 82       	std	Y+1, r1	; 0x01
     4bc:	1d c0       	rjmp	.+58     	; 0x4f8 <OLED_clear+0x58>
		OLED_start();
     4be:	0e 94 13 02 	call	0x426	; 0x426 <OLED_start>
		start = 0xB0 | i;
     4c2:	89 81       	ldd	r24, Y+1	; 0x01
     4c4:	80 6b       	ori	r24, 0xB0	; 176
     4c6:	8b 83       	std	Y+3, r24	; 0x03
		*command = start;
     4c8:	80 91 06 01 	lds	r24, 0x0106
     4cc:	90 91 07 01 	lds	r25, 0x0107
     4d0:	2b 81       	ldd	r18, Y+3	; 0x03
     4d2:	fc 01       	movw	r30, r24
     4d4:	20 83       	st	Z, r18
		for (uint8_t j = 0; j < 128; j++) {
     4d6:	1a 82       	std	Y+2, r1	; 0x02
     4d8:	09 c0       	rjmp	.+18     	; 0x4ec <OLED_clear+0x4c>
			*data = 0x00;
     4da:	80 91 08 01 	lds	r24, 0x0108
     4de:	90 91 09 01 	lds	r25, 0x0109
     4e2:	fc 01       	movw	r30, r24
     4e4:	10 82       	st	Z, r1
	
	for (uint8_t i = 0; i < 8; i++) {
		OLED_start();
		start = 0xB0 | i;
		*command = start;
		for (uint8_t j = 0; j < 128; j++) {
     4e6:	8a 81       	ldd	r24, Y+2	; 0x02
     4e8:	8f 5f       	subi	r24, 0xFF	; 255
     4ea:	8a 83       	std	Y+2, r24	; 0x02
     4ec:	8a 81       	ldd	r24, Y+2	; 0x02
     4ee:	88 23       	and	r24, r24
     4f0:	a4 f7       	brge	.-24     	; 0x4da <OLED_clear+0x3a>
	
	*command = 0x40; // Set display start line 0 (to 63)
	
	char start; // Set page start address of target display location
	
	for (uint8_t i = 0; i < 8; i++) {
     4f2:	89 81       	ldd	r24, Y+1	; 0x01
     4f4:	8f 5f       	subi	r24, 0xFF	; 255
     4f6:	89 83       	std	Y+1, r24	; 0x01
     4f8:	89 81       	ldd	r24, Y+1	; 0x01
     4fa:	88 30       	cpi	r24, 0x08	; 8
     4fc:	00 f3       	brcs	.-64     	; 0x4be <OLED_clear+0x1e>
		*command = start;
		for (uint8_t j = 0; j < 128; j++) {
			*data = 0x00;
		}
	}
}
     4fe:	0f 90       	pop	r0
     500:	0f 90       	pop	r0
     502:	0f 90       	pop	r0
     504:	df 91       	pop	r29
     506:	cf 91       	pop	r28
     508:	08 95       	ret

0000050a <OLED_set_pixel>:

void OLED_set_pixel(uint8_t x, uint8_t y) {
     50a:	cf 93       	push	r28
     50c:	df 93       	push	r29
     50e:	00 d0       	rcall	.+0      	; 0x510 <OLED_set_pixel+0x6>
     510:	00 d0       	rcall	.+0      	; 0x512 <OLED_set_pixel+0x8>
     512:	cd b7       	in	r28, 0x3d	; 61
     514:	de b7       	in	r29, 0x3e	; 62
     516:	8b 83       	std	Y+3, r24	; 0x03
     518:	6c 83       	std	Y+4, r22	; 0x04
	/* 128*64*/
	
	//Set column address
	*command = 0x21;
     51a:	80 91 06 01 	lds	r24, 0x0106
     51e:	90 91 07 01 	lds	r25, 0x0107
     522:	21 e2       	ldi	r18, 0x21	; 33
     524:	fc 01       	movw	r30, r24
     526:	20 83       	st	Z, r18
	*command = 0x00 | x;
     528:	80 91 06 01 	lds	r24, 0x0106
     52c:	90 91 07 01 	lds	r25, 0x0107
     530:	2b 81       	ldd	r18, Y+3	; 0x03
     532:	fc 01       	movw	r30, r24
     534:	20 83       	st	Z, r18
	*command = 0x00 | (x + 1);
     536:	80 91 06 01 	lds	r24, 0x0106
     53a:	90 91 07 01 	lds	r25, 0x0107
     53e:	2b 81       	ldd	r18, Y+3	; 0x03
     540:	2f 5f       	subi	r18, 0xFF	; 255
     542:	fc 01       	movw	r30, r24
     544:	20 83       	st	Z, r18
	
	uint8_t rest = y % 8;
     546:	8c 81       	ldd	r24, Y+4	; 0x04
     548:	87 70       	andi	r24, 0x07	; 7
     54a:	89 83       	std	Y+1, r24	; 0x01
	uint8_t page = (y - rest)/8;
     54c:	8c 81       	ldd	r24, Y+4	; 0x04
     54e:	28 2f       	mov	r18, r24
     550:	30 e0       	ldi	r19, 0x00	; 0
     552:	89 81       	ldd	r24, Y+1	; 0x01
     554:	88 2f       	mov	r24, r24
     556:	90 e0       	ldi	r25, 0x00	; 0
     558:	a9 01       	movw	r20, r18
     55a:	48 1b       	sub	r20, r24
     55c:	59 0b       	sbc	r21, r25
     55e:	ca 01       	movw	r24, r20
     560:	99 23       	and	r25, r25
     562:	0c f4       	brge	.+2      	; 0x566 <OLED_set_pixel+0x5c>
     564:	07 96       	adiw	r24, 0x07	; 7
     566:	95 95       	asr	r25
     568:	87 95       	ror	r24
     56a:	95 95       	asr	r25
     56c:	87 95       	ror	r24
     56e:	95 95       	asr	r25
     570:	87 95       	ror	r24
     572:	8a 83       	std	Y+2, r24	; 0x02
	*command = (0xB0 | page);
     574:	80 91 06 01 	lds	r24, 0x0106
     578:	90 91 07 01 	lds	r25, 0x0107
     57c:	2a 81       	ldd	r18, Y+2	; 0x02
     57e:	20 6b       	ori	r18, 0xB0	; 176
     580:	fc 01       	movw	r30, r24
     582:	20 83       	st	Z, r18
	*data |= (1 << rest);
     584:	80 91 08 01 	lds	r24, 0x0108
     588:	90 91 09 01 	lds	r25, 0x0109
     58c:	20 91 08 01 	lds	r18, 0x0108
     590:	30 91 09 01 	lds	r19, 0x0109
     594:	f9 01       	movw	r30, r18
     596:	20 81       	ld	r18, Z
     598:	62 2f       	mov	r22, r18
     59a:	29 81       	ldd	r18, Y+1	; 0x01
     59c:	42 2f       	mov	r20, r18
     59e:	50 e0       	ldi	r21, 0x00	; 0
     5a0:	21 e0       	ldi	r18, 0x01	; 1
     5a2:	30 e0       	ldi	r19, 0x00	; 0
     5a4:	04 2e       	mov	r0, r20
     5a6:	02 c0       	rjmp	.+4      	; 0x5ac <OLED_set_pixel+0xa2>
     5a8:	22 0f       	add	r18, r18
     5aa:	33 1f       	adc	r19, r19
     5ac:	0a 94       	dec	r0
     5ae:	e2 f7       	brpl	.-8      	; 0x5a8 <OLED_set_pixel+0x9e>
     5b0:	26 2b       	or	r18, r22
     5b2:	fc 01       	movw	r30, r24
     5b4:	20 83       	st	Z, r18
}
     5b6:	0f 90       	pop	r0
     5b8:	0f 90       	pop	r0
     5ba:	0f 90       	pop	r0
     5bc:	0f 90       	pop	r0
     5be:	df 91       	pop	r29
     5c0:	cf 91       	pop	r28
     5c2:	08 95       	ret

000005c4 <SRAM_init>:
 */ 

#include "sram.h"

void SRAM_init()
{
     5c4:	cf 93       	push	r28
     5c6:	df 93       	push	r29
     5c8:	cd b7       	in	r28, 0x3d	; 61
     5ca:	de b7       	in	r29, 0x3e	; 62
	MCUCR |= (1<<SRE);
     5cc:	85 e5       	ldi	r24, 0x55	; 85
     5ce:	90 e0       	ldi	r25, 0x00	; 0
     5d0:	25 e5       	ldi	r18, 0x55	; 85
     5d2:	30 e0       	ldi	r19, 0x00	; 0
     5d4:	f9 01       	movw	r30, r18
     5d6:	20 81       	ld	r18, Z
     5d8:	20 68       	ori	r18, 0x80	; 128
     5da:	fc 01       	movw	r30, r24
     5dc:	20 83       	st	Z, r18
}
     5de:	df 91       	pop	r29
     5e0:	cf 91       	pop	r28
     5e2:	08 95       	ret

000005e4 <SRAM_test>:
	volatile char *ext_ram = (char *) 0x1400;
	ext_ram[0] = 100;
}

void SRAM_test(void)
{
     5e4:	cf 93       	push	r28
     5e6:	df 93       	push	r29
     5e8:	cd b7       	in	r28, 0x3d	; 61
     5ea:	de b7       	in	r29, 0x3e	; 62
     5ec:	29 97       	sbiw	r28, 0x09	; 9
     5ee:	0f b6       	in	r0, 0x3f	; 63
     5f0:	f8 94       	cli
     5f2:	de bf       	out	0x3e, r29	; 62
     5f4:	0f be       	out	0x3f, r0	; 63
     5f6:	cd bf       	out	0x3d, r28	; 61
	// Start address for the SRAM
	volatile char *ext_ram = (char *) 0x1800;
     5f8:	80 e0       	ldi	r24, 0x00	; 0
     5fa:	98 e1       	ldi	r25, 0x18	; 24
     5fc:	98 87       	std	Y+8, r25	; 0x08
     5fe:	8f 83       	std	Y+7, r24	; 0x07

	uint16_t i, werrors, rerrors;
	werrors = 0;
     600:	1c 82       	std	Y+4, r1	; 0x04
     602:	1b 82       	std	Y+3, r1	; 0x03
	rerrors = 0;
     604:	1e 82       	std	Y+6, r1	; 0x06
     606:	1d 82       	std	Y+5, r1	; 0x05
	unsigned char testvalue;

	printf("Starting SRAM test...\r\n");
     608:	8a e0       	ldi	r24, 0x0A	; 10
     60a:	91 e0       	ldi	r25, 0x01	; 1
     60c:	0e 94 96 05 	call	0xb2c	; 0xb2c <puts>

	for (i = 0; i < 0x800; i++) {
     610:	1a 82       	std	Y+2, r1	; 0x02
     612:	19 82       	std	Y+1, r1	; 0x01
     614:	49 c0       	rjmp	.+146    	; 0x6a8 <SRAM_test+0xc4>
		testvalue = ~(i % 256);
     616:	89 81       	ldd	r24, Y+1	; 0x01
     618:	80 95       	com	r24
     61a:	89 87       	std	Y+9, r24	; 0x09
		ext_ram[i] = testvalue;
     61c:	2f 81       	ldd	r18, Y+7	; 0x07
     61e:	38 85       	ldd	r19, Y+8	; 0x08
     620:	89 81       	ldd	r24, Y+1	; 0x01
     622:	9a 81       	ldd	r25, Y+2	; 0x02
     624:	82 0f       	add	r24, r18
     626:	93 1f       	adc	r25, r19
     628:	29 85       	ldd	r18, Y+9	; 0x09
     62a:	fc 01       	movw	r30, r24
     62c:	20 83       	st	Z, r18
		if (ext_ram[i] != testvalue) {
     62e:	2f 81       	ldd	r18, Y+7	; 0x07
     630:	38 85       	ldd	r19, Y+8	; 0x08
     632:	89 81       	ldd	r24, Y+1	; 0x01
     634:	9a 81       	ldd	r25, Y+2	; 0x02
     636:	82 0f       	add	r24, r18
     638:	93 1f       	adc	r25, r19
     63a:	fc 01       	movw	r30, r24
     63c:	90 81       	ld	r25, Z
     63e:	89 85       	ldd	r24, Y+9	; 0x09
     640:	98 17       	cp	r25, r24
     642:	69 f1       	breq	.+90     	; 0x69e <SRAM_test+0xba>
			printf("SRAM error (write phase): ext_ram[%d] = %02X (should be %02X)\r\n", i, ext_ram[i], testvalue);
     644:	89 85       	ldd	r24, Y+9	; 0x09
     646:	28 2f       	mov	r18, r24
     648:	30 e0       	ldi	r19, 0x00	; 0
     64a:	4f 81       	ldd	r20, Y+7	; 0x07
     64c:	58 85       	ldd	r21, Y+8	; 0x08
     64e:	89 81       	ldd	r24, Y+1	; 0x01
     650:	9a 81       	ldd	r25, Y+2	; 0x02
     652:	84 0f       	add	r24, r20
     654:	95 1f       	adc	r25, r21
     656:	fc 01       	movw	r30, r24
     658:	80 81       	ld	r24, Z
     65a:	88 2f       	mov	r24, r24
     65c:	90 e0       	ldi	r25, 0x00	; 0
     65e:	43 2f       	mov	r20, r19
     660:	4f 93       	push	r20
     662:	2f 93       	push	r18
     664:	29 2f       	mov	r18, r25
     666:	2f 93       	push	r18
     668:	8f 93       	push	r24
     66a:	8a 81       	ldd	r24, Y+2	; 0x02
     66c:	8f 93       	push	r24
     66e:	89 81       	ldd	r24, Y+1	; 0x01
     670:	8f 93       	push	r24
     672:	81 e2       	ldi	r24, 0x21	; 33
     674:	91 e0       	ldi	r25, 0x01	; 1
     676:	89 2f       	mov	r24, r25
     678:	8f 93       	push	r24
     67a:	81 e2       	ldi	r24, 0x21	; 33
     67c:	91 e0       	ldi	r25, 0x01	; 1
     67e:	8f 93       	push	r24
     680:	0e 94 82 05 	call	0xb04	; 0xb04 <printf>
     684:	8d b7       	in	r24, 0x3d	; 61
     686:	9e b7       	in	r25, 0x3e	; 62
     688:	08 96       	adiw	r24, 0x08	; 8
     68a:	0f b6       	in	r0, 0x3f	; 63
     68c:	f8 94       	cli
     68e:	de bf       	out	0x3e, r29	; 62
     690:	0f be       	out	0x3f, r0	; 63
     692:	cd bf       	out	0x3d, r28	; 61
			werrors++;
     694:	8b 81       	ldd	r24, Y+3	; 0x03
     696:	9c 81       	ldd	r25, Y+4	; 0x04
     698:	01 96       	adiw	r24, 0x01	; 1
     69a:	9c 83       	std	Y+4, r25	; 0x04
     69c:	8b 83       	std	Y+3, r24	; 0x03
	rerrors = 0;
	unsigned char testvalue;

	printf("Starting SRAM test...\r\n");

	for (i = 0; i < 0x800; i++) {
     69e:	89 81       	ldd	r24, Y+1	; 0x01
     6a0:	9a 81       	ldd	r25, Y+2	; 0x02
     6a2:	01 96       	adiw	r24, 0x01	; 1
     6a4:	9a 83       	std	Y+2, r25	; 0x02
     6a6:	89 83       	std	Y+1, r24	; 0x01
     6a8:	89 81       	ldd	r24, Y+1	; 0x01
     6aa:	9a 81       	ldd	r25, Y+2	; 0x02
     6ac:	81 15       	cp	r24, r1
     6ae:	e8 e0       	ldi	r30, 0x08	; 8
     6b0:	9e 07       	cpc	r25, r30
     6b2:	08 f4       	brcc	.+2      	; 0x6b6 <SRAM_test+0xd2>
     6b4:	b0 cf       	rjmp	.-160    	; 0x616 <SRAM_test+0x32>
			printf("SRAM error (write phase): ext_ram[%d] = %02X (should be %02X)\r\n", i, ext_ram[i], testvalue);
			werrors++;
		}
	}

	for (i = 0; i < 0x800; i++) {
     6b6:	1a 82       	std	Y+2, r1	; 0x02
     6b8:	19 82       	std	Y+1, r1	; 0x01
     6ba:	40 c0       	rjmp	.+128    	; 0x73c <SRAM_test+0x158>
		testvalue = ~(i % 256);
     6bc:	89 81       	ldd	r24, Y+1	; 0x01
     6be:	80 95       	com	r24
     6c0:	89 87       	std	Y+9, r24	; 0x09
		if (ext_ram[i] != testvalue) {
     6c2:	2f 81       	ldd	r18, Y+7	; 0x07
     6c4:	38 85       	ldd	r19, Y+8	; 0x08
     6c6:	89 81       	ldd	r24, Y+1	; 0x01
     6c8:	9a 81       	ldd	r25, Y+2	; 0x02
     6ca:	82 0f       	add	r24, r18
     6cc:	93 1f       	adc	r25, r19
     6ce:	fc 01       	movw	r30, r24
     6d0:	90 81       	ld	r25, Z
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	98 17       	cp	r25, r24
     6d6:	69 f1       	breq	.+90     	; 0x732 <SRAM_test+0x14e>
			printf("SRAM error (read phase): ext_ram[%d] = %02X (should be %02X)\r\n", i, ext_ram[i], testvalue);
     6d8:	89 85       	ldd	r24, Y+9	; 0x09
     6da:	28 2f       	mov	r18, r24
     6dc:	30 e0       	ldi	r19, 0x00	; 0
     6de:	4f 81       	ldd	r20, Y+7	; 0x07
     6e0:	58 85       	ldd	r21, Y+8	; 0x08
     6e2:	89 81       	ldd	r24, Y+1	; 0x01
     6e4:	9a 81       	ldd	r25, Y+2	; 0x02
     6e6:	84 0f       	add	r24, r20
     6e8:	95 1f       	adc	r25, r21
     6ea:	fc 01       	movw	r30, r24
     6ec:	80 81       	ld	r24, Z
     6ee:	88 2f       	mov	r24, r24
     6f0:	90 e0       	ldi	r25, 0x00	; 0
     6f2:	43 2f       	mov	r20, r19
     6f4:	4f 93       	push	r20
     6f6:	2f 93       	push	r18
     6f8:	29 2f       	mov	r18, r25
     6fa:	2f 93       	push	r18
     6fc:	8f 93       	push	r24
     6fe:	8a 81       	ldd	r24, Y+2	; 0x02
     700:	8f 93       	push	r24
     702:	89 81       	ldd	r24, Y+1	; 0x01
     704:	8f 93       	push	r24
     706:	81 e6       	ldi	r24, 0x61	; 97
     708:	91 e0       	ldi	r25, 0x01	; 1
     70a:	89 2f       	mov	r24, r25
     70c:	8f 93       	push	r24
     70e:	81 e6       	ldi	r24, 0x61	; 97
     710:	91 e0       	ldi	r25, 0x01	; 1
     712:	8f 93       	push	r24
     714:	0e 94 82 05 	call	0xb04	; 0xb04 <printf>
     718:	8d b7       	in	r24, 0x3d	; 61
     71a:	9e b7       	in	r25, 0x3e	; 62
     71c:	08 96       	adiw	r24, 0x08	; 8
     71e:	0f b6       	in	r0, 0x3f	; 63
     720:	f8 94       	cli
     722:	de bf       	out	0x3e, r29	; 62
     724:	0f be       	out	0x3f, r0	; 63
     726:	cd bf       	out	0x3d, r28	; 61
			rerrors++;
     728:	8d 81       	ldd	r24, Y+5	; 0x05
     72a:	9e 81       	ldd	r25, Y+6	; 0x06
     72c:	01 96       	adiw	r24, 0x01	; 1
     72e:	9e 83       	std	Y+6, r25	; 0x06
     730:	8d 83       	std	Y+5, r24	; 0x05
			printf("SRAM error (write phase): ext_ram[%d] = %02X (should be %02X)\r\n", i, ext_ram[i], testvalue);
			werrors++;
		}
	}

	for (i = 0; i < 0x800; i++) {
     732:	89 81       	ldd	r24, Y+1	; 0x01
     734:	9a 81       	ldd	r25, Y+2	; 0x02
     736:	01 96       	adiw	r24, 0x01	; 1
     738:	9a 83       	std	Y+2, r25	; 0x02
     73a:	89 83       	std	Y+1, r24	; 0x01
     73c:	89 81       	ldd	r24, Y+1	; 0x01
     73e:	9a 81       	ldd	r25, Y+2	; 0x02
     740:	81 15       	cp	r24, r1
     742:	e8 e0       	ldi	r30, 0x08	; 8
     744:	9e 07       	cpc	r25, r30
     746:	08 f4       	brcc	.+2      	; 0x74a <SRAM_test+0x166>
     748:	b9 cf       	rjmp	.-142    	; 0x6bc <SRAM_test+0xd8>
			printf("SRAM error (read phase): ext_ram[%d] = %02X (should be %02X)\r\n", i, ext_ram[i], testvalue);
			rerrors++;
		}
	}

	printf("SRAM test completed with %d errors in write phase and %d errors in read phase\r\n", werrors, rerrors);
     74a:	8e 81       	ldd	r24, Y+6	; 0x06
     74c:	8f 93       	push	r24
     74e:	8d 81       	ldd	r24, Y+5	; 0x05
     750:	8f 93       	push	r24
     752:	8c 81       	ldd	r24, Y+4	; 0x04
     754:	8f 93       	push	r24
     756:	8b 81       	ldd	r24, Y+3	; 0x03
     758:	8f 93       	push	r24
     75a:	80 ea       	ldi	r24, 0xA0	; 160
     75c:	91 e0       	ldi	r25, 0x01	; 1
     75e:	89 2f       	mov	r24, r25
     760:	8f 93       	push	r24
     762:	80 ea       	ldi	r24, 0xA0	; 160
     764:	91 e0       	ldi	r25, 0x01	; 1
     766:	8f 93       	push	r24
     768:	0e 94 82 05 	call	0xb04	; 0xb04 <printf>
     76c:	0f 90       	pop	r0
     76e:	0f 90       	pop	r0
     770:	0f 90       	pop	r0
     772:	0f 90       	pop	r0
     774:	0f 90       	pop	r0
     776:	0f 90       	pop	r0
}
     778:	29 96       	adiw	r28, 0x09	; 9
     77a:	0f b6       	in	r0, 0x3f	; 63
     77c:	f8 94       	cli
     77e:	de bf       	out	0x3e, r29	; 62
     780:	0f be       	out	0x3f, r0	; 63
     782:	cd bf       	out	0x3d, r28	; 61
     784:	df 91       	pop	r29
     786:	cf 91       	pop	r28
     788:	08 95       	ret

0000078a <usart_setup>:
 */ 

#include "uart.h"

void usart_setup() 
{
     78a:	cf 93       	push	r28
     78c:	df 93       	push	r29
     78e:	cd b7       	in	r28, 0x3d	; 61
     790:	de b7       	in	r29, 0x3e	; 62
	//Enable receive and transmit
	UCSR0B |= (1 << RXEN0) | (1 << TXEN0);
     792:	8a e2       	ldi	r24, 0x2A	; 42
     794:	90 e0       	ldi	r25, 0x00	; 0
     796:	2a e2       	ldi	r18, 0x2A	; 42
     798:	30 e0       	ldi	r19, 0x00	; 0
     79a:	f9 01       	movw	r30, r18
     79c:	20 81       	ld	r18, Z
     79e:	28 61       	ori	r18, 0x18	; 24
     7a0:	fc 01       	movw	r30, r24
     7a2:	20 83       	st	Z, r18
	UCSR0C |= (1 << UCSZ01) | (1 << UCSZ00); //8bit. no-parity, 1 stop bit
     7a4:	80 e4       	ldi	r24, 0x40	; 64
     7a6:	90 e0       	ldi	r25, 0x00	; 0
     7a8:	20 e4       	ldi	r18, 0x40	; 64
     7aa:	30 e0       	ldi	r19, 0x00	; 0
     7ac:	f9 01       	movw	r30, r18
     7ae:	20 81       	ld	r18, Z
     7b0:	26 60       	ori	r18, 0x06	; 6
     7b2:	fc 01       	movw	r30, r24
     7b4:	20 83       	st	Z, r18
	
	UBRR0H = 0;
     7b6:	80 e4       	ldi	r24, 0x40	; 64
     7b8:	90 e0       	ldi	r25, 0x00	; 0
     7ba:	fc 01       	movw	r30, r24
     7bc:	10 82       	st	Z, r1
	UBRR0L = 31;
     7be:	89 e2       	ldi	r24, 0x29	; 41
     7c0:	90 e0       	ldi	r25, 0x00	; 0
     7c2:	2f e1       	ldi	r18, 0x1F	; 31
     7c4:	fc 01       	movw	r30, r24
     7c6:	20 83       	st	Z, r18
	
	uart = fdevopen(&usart_putchar, &usart_getchar);
     7c8:	62 e1       	ldi	r22, 0x12	; 18
     7ca:	74 e0       	ldi	r23, 0x04	; 4
     7cc:	81 ef       	ldi	r24, 0xF1	; 241
     7ce:	93 e0       	ldi	r25, 0x03	; 3
     7d0:	0e 94 37 05 	call	0xa6e	; 0xa6e <fdevopen>
     7d4:	90 93 f1 01 	sts	0x01F1, r25
     7d8:	80 93 f0 01 	sts	0x01F0, r24
}
     7dc:	df 91       	pop	r29
     7de:	cf 91       	pop	r28
     7e0:	08 95       	ret

000007e2 <usart_putchar>:

int usart_putchar(char c, FILE *f) 
{
     7e2:	cf 93       	push	r28
     7e4:	df 93       	push	r29
     7e6:	00 d0       	rcall	.+0      	; 0x7e8 <usart_putchar+0x6>
     7e8:	1f 92       	push	r1
     7ea:	cd b7       	in	r28, 0x3d	; 61
     7ec:	de b7       	in	r29, 0x3e	; 62
     7ee:	89 83       	std	Y+1, r24	; 0x01
     7f0:	7b 83       	std	Y+3, r23	; 0x03
     7f2:	6a 83       	std	Y+2, r22	; 0x02
	while (!(UCSR0A & (1 << UDRE0)));
     7f4:	00 00       	nop
     7f6:	8b e2       	ldi	r24, 0x2B	; 43
     7f8:	90 e0       	ldi	r25, 0x00	; 0
     7fa:	fc 01       	movw	r30, r24
     7fc:	80 81       	ld	r24, Z
     7fe:	88 2f       	mov	r24, r24
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	80 72       	andi	r24, 0x20	; 32
     804:	99 27       	eor	r25, r25
     806:	00 97       	sbiw	r24, 0x00	; 0
     808:	b1 f3       	breq	.-20     	; 0x7f6 <usart_putchar+0x14>
	UDR0 = c;
     80a:	8c e2       	ldi	r24, 0x2C	; 44
     80c:	90 e0       	ldi	r25, 0x00	; 0
     80e:	29 81       	ldd	r18, Y+1	; 0x01
     810:	fc 01       	movw	r30, r24
     812:	20 83       	st	Z, r18
	return 0;
     814:	80 e0       	ldi	r24, 0x00	; 0
     816:	90 e0       	ldi	r25, 0x00	; 0
}
     818:	0f 90       	pop	r0
     81a:	0f 90       	pop	r0
     81c:	0f 90       	pop	r0
     81e:	df 91       	pop	r29
     820:	cf 91       	pop	r28
     822:	08 95       	ret

00000824 <usart_getchar>:

int usart_getchar(FILE *f) 
{
     824:	cf 93       	push	r28
     826:	df 93       	push	r29
     828:	00 d0       	rcall	.+0      	; 0x82a <usart_getchar+0x6>
     82a:	cd b7       	in	r28, 0x3d	; 61
     82c:	de b7       	in	r29, 0x3e	; 62
     82e:	9a 83       	std	Y+2, r25	; 0x02
     830:	89 83       	std	Y+1, r24	; 0x01
	while (!(UCSR0A & (1 << RXC0)));
     832:	00 00       	nop
     834:	8b e2       	ldi	r24, 0x2B	; 43
     836:	90 e0       	ldi	r25, 0x00	; 0
     838:	fc 01       	movw	r30, r24
     83a:	80 81       	ld	r24, Z
     83c:	88 23       	and	r24, r24
     83e:	d4 f7       	brge	.-12     	; 0x834 <usart_getchar+0x10>
	return UDR0;
     840:	8c e2       	ldi	r24, 0x2C	; 44
     842:	90 e0       	ldi	r25, 0x00	; 0
     844:	fc 01       	movw	r30, r24
     846:	80 81       	ld	r24, Z
     848:	88 2f       	mov	r24, r24
     84a:	90 e0       	ldi	r25, 0x00	; 0
}
     84c:	0f 90       	pop	r0
     84e:	0f 90       	pop	r0
     850:	df 91       	pop	r29
     852:	cf 91       	pop	r28
     854:	08 95       	ret

00000856 <__cmpsf2>:
     856:	2f d0       	rcall	.+94     	; 0x8b6 <__fp_cmp>
     858:	08 f4       	brcc	.+2      	; 0x85c <__cmpsf2+0x6>
     85a:	81 e0       	ldi	r24, 0x01	; 1
     85c:	08 95       	ret

0000085e <__fixunssfsi>:
     85e:	7f d0       	rcall	.+254    	; 0x95e <__fp_splitA>
     860:	88 f0       	brcs	.+34     	; 0x884 <__fixunssfsi+0x26>
     862:	9f 57       	subi	r25, 0x7F	; 127
     864:	90 f0       	brcs	.+36     	; 0x88a <__fixunssfsi+0x2c>
     866:	b9 2f       	mov	r27, r25
     868:	99 27       	eor	r25, r25
     86a:	b7 51       	subi	r27, 0x17	; 23
     86c:	a0 f0       	brcs	.+40     	; 0x896 <__fixunssfsi+0x38>
     86e:	d1 f0       	breq	.+52     	; 0x8a4 <__fixunssfsi+0x46>
     870:	66 0f       	add	r22, r22
     872:	77 1f       	adc	r23, r23
     874:	88 1f       	adc	r24, r24
     876:	99 1f       	adc	r25, r25
     878:	1a f0       	brmi	.+6      	; 0x880 <__fixunssfsi+0x22>
     87a:	ba 95       	dec	r27
     87c:	c9 f7       	brne	.-14     	; 0x870 <__fixunssfsi+0x12>
     87e:	12 c0       	rjmp	.+36     	; 0x8a4 <__fixunssfsi+0x46>
     880:	b1 30       	cpi	r27, 0x01	; 1
     882:	81 f0       	breq	.+32     	; 0x8a4 <__fixunssfsi+0x46>
     884:	86 d0       	rcall	.+268    	; 0x992 <__fp_zero>
     886:	b1 e0       	ldi	r27, 0x01	; 1
     888:	08 95       	ret
     88a:	83 c0       	rjmp	.+262    	; 0x992 <__fp_zero>
     88c:	67 2f       	mov	r22, r23
     88e:	78 2f       	mov	r23, r24
     890:	88 27       	eor	r24, r24
     892:	b8 5f       	subi	r27, 0xF8	; 248
     894:	39 f0       	breq	.+14     	; 0x8a4 <__fixunssfsi+0x46>
     896:	b9 3f       	cpi	r27, 0xF9	; 249
     898:	cc f3       	brlt	.-14     	; 0x88c <__fixunssfsi+0x2e>
     89a:	86 95       	lsr	r24
     89c:	77 95       	ror	r23
     89e:	67 95       	ror	r22
     8a0:	b3 95       	inc	r27
     8a2:	d9 f7       	brne	.-10     	; 0x89a <__fixunssfsi+0x3c>
     8a4:	3e f4       	brtc	.+14     	; 0x8b4 <__fixunssfsi+0x56>
     8a6:	90 95       	com	r25
     8a8:	80 95       	com	r24
     8aa:	70 95       	com	r23
     8ac:	61 95       	neg	r22
     8ae:	7f 4f       	sbci	r23, 0xFF	; 255
     8b0:	8f 4f       	sbci	r24, 0xFF	; 255
     8b2:	9f 4f       	sbci	r25, 0xFF	; 255
     8b4:	08 95       	ret

000008b6 <__fp_cmp>:
     8b6:	99 0f       	add	r25, r25
     8b8:	00 08       	sbc	r0, r0
     8ba:	55 0f       	add	r21, r21
     8bc:	aa 0b       	sbc	r26, r26
     8be:	e0 e8       	ldi	r30, 0x80	; 128
     8c0:	fe ef       	ldi	r31, 0xFE	; 254
     8c2:	16 16       	cp	r1, r22
     8c4:	17 06       	cpc	r1, r23
     8c6:	e8 07       	cpc	r30, r24
     8c8:	f9 07       	cpc	r31, r25
     8ca:	c0 f0       	brcs	.+48     	; 0x8fc <__fp_cmp+0x46>
     8cc:	12 16       	cp	r1, r18
     8ce:	13 06       	cpc	r1, r19
     8d0:	e4 07       	cpc	r30, r20
     8d2:	f5 07       	cpc	r31, r21
     8d4:	98 f0       	brcs	.+38     	; 0x8fc <__fp_cmp+0x46>
     8d6:	62 1b       	sub	r22, r18
     8d8:	73 0b       	sbc	r23, r19
     8da:	84 0b       	sbc	r24, r20
     8dc:	95 0b       	sbc	r25, r21
     8de:	39 f4       	brne	.+14     	; 0x8ee <__fp_cmp+0x38>
     8e0:	0a 26       	eor	r0, r26
     8e2:	61 f0       	breq	.+24     	; 0x8fc <__fp_cmp+0x46>
     8e4:	23 2b       	or	r18, r19
     8e6:	24 2b       	or	r18, r20
     8e8:	25 2b       	or	r18, r21
     8ea:	21 f4       	brne	.+8      	; 0x8f4 <__fp_cmp+0x3e>
     8ec:	08 95       	ret
     8ee:	0a 26       	eor	r0, r26
     8f0:	09 f4       	brne	.+2      	; 0x8f4 <__fp_cmp+0x3e>
     8f2:	a1 40       	sbci	r26, 0x01	; 1
     8f4:	a6 95       	lsr	r26
     8f6:	8f ef       	ldi	r24, 0xFF	; 255
     8f8:	81 1d       	adc	r24, r1
     8fa:	81 1d       	adc	r24, r1
     8fc:	08 95       	ret

000008fe <__fp_inf>:
     8fe:	97 f9       	bld	r25, 7
     900:	9f 67       	ori	r25, 0x7F	; 127
     902:	80 e8       	ldi	r24, 0x80	; 128
     904:	70 e0       	ldi	r23, 0x00	; 0
     906:	60 e0       	ldi	r22, 0x00	; 0
     908:	08 95       	ret

0000090a <__fp_nan>:
     90a:	9f ef       	ldi	r25, 0xFF	; 255
     90c:	80 ec       	ldi	r24, 0xC0	; 192
     90e:	08 95       	ret

00000910 <__fp_pscA>:
     910:	00 24       	eor	r0, r0
     912:	0a 94       	dec	r0
     914:	16 16       	cp	r1, r22
     916:	17 06       	cpc	r1, r23
     918:	18 06       	cpc	r1, r24
     91a:	09 06       	cpc	r0, r25
     91c:	08 95       	ret

0000091e <__fp_pscB>:
     91e:	00 24       	eor	r0, r0
     920:	0a 94       	dec	r0
     922:	12 16       	cp	r1, r18
     924:	13 06       	cpc	r1, r19
     926:	14 06       	cpc	r1, r20
     928:	05 06       	cpc	r0, r21
     92a:	08 95       	ret

0000092c <__fp_round>:
     92c:	09 2e       	mov	r0, r25
     92e:	03 94       	inc	r0
     930:	00 0c       	add	r0, r0
     932:	11 f4       	brne	.+4      	; 0x938 <__fp_round+0xc>
     934:	88 23       	and	r24, r24
     936:	52 f0       	brmi	.+20     	; 0x94c <__fp_round+0x20>
     938:	bb 0f       	add	r27, r27
     93a:	40 f4       	brcc	.+16     	; 0x94c <__fp_round+0x20>
     93c:	bf 2b       	or	r27, r31
     93e:	11 f4       	brne	.+4      	; 0x944 <__fp_round+0x18>
     940:	60 ff       	sbrs	r22, 0
     942:	04 c0       	rjmp	.+8      	; 0x94c <__fp_round+0x20>
     944:	6f 5f       	subi	r22, 0xFF	; 255
     946:	7f 4f       	sbci	r23, 0xFF	; 255
     948:	8f 4f       	sbci	r24, 0xFF	; 255
     94a:	9f 4f       	sbci	r25, 0xFF	; 255
     94c:	08 95       	ret

0000094e <__fp_split3>:
     94e:	57 fd       	sbrc	r21, 7
     950:	90 58       	subi	r25, 0x80	; 128
     952:	44 0f       	add	r20, r20
     954:	55 1f       	adc	r21, r21
     956:	59 f0       	breq	.+22     	; 0x96e <__fp_splitA+0x10>
     958:	5f 3f       	cpi	r21, 0xFF	; 255
     95a:	71 f0       	breq	.+28     	; 0x978 <__fp_splitA+0x1a>
     95c:	47 95       	ror	r20

0000095e <__fp_splitA>:
     95e:	88 0f       	add	r24, r24
     960:	97 fb       	bst	r25, 7
     962:	99 1f       	adc	r25, r25
     964:	61 f0       	breq	.+24     	; 0x97e <__fp_splitA+0x20>
     966:	9f 3f       	cpi	r25, 0xFF	; 255
     968:	79 f0       	breq	.+30     	; 0x988 <__fp_splitA+0x2a>
     96a:	87 95       	ror	r24
     96c:	08 95       	ret
     96e:	12 16       	cp	r1, r18
     970:	13 06       	cpc	r1, r19
     972:	14 06       	cpc	r1, r20
     974:	55 1f       	adc	r21, r21
     976:	f2 cf       	rjmp	.-28     	; 0x95c <__fp_split3+0xe>
     978:	46 95       	lsr	r20
     97a:	f1 df       	rcall	.-30     	; 0x95e <__fp_splitA>
     97c:	08 c0       	rjmp	.+16     	; 0x98e <__fp_splitA+0x30>
     97e:	16 16       	cp	r1, r22
     980:	17 06       	cpc	r1, r23
     982:	18 06       	cpc	r1, r24
     984:	99 1f       	adc	r25, r25
     986:	f1 cf       	rjmp	.-30     	; 0x96a <__fp_splitA+0xc>
     988:	86 95       	lsr	r24
     98a:	71 05       	cpc	r23, r1
     98c:	61 05       	cpc	r22, r1
     98e:	08 94       	sec
     990:	08 95       	ret

00000992 <__fp_zero>:
     992:	e8 94       	clt

00000994 <__fp_szero>:
     994:	bb 27       	eor	r27, r27
     996:	66 27       	eor	r22, r22
     998:	77 27       	eor	r23, r23
     99a:	cb 01       	movw	r24, r22
     99c:	97 f9       	bld	r25, 7
     99e:	08 95       	ret

000009a0 <__gesf2>:
     9a0:	8a df       	rcall	.-236    	; 0x8b6 <__fp_cmp>
     9a2:	08 f4       	brcc	.+2      	; 0x9a6 <__gesf2+0x6>
     9a4:	8f ef       	ldi	r24, 0xFF	; 255
     9a6:	08 95       	ret

000009a8 <__mulsf3>:
     9a8:	0b d0       	rcall	.+22     	; 0x9c0 <__mulsf3x>
     9aa:	c0 cf       	rjmp	.-128    	; 0x92c <__fp_round>
     9ac:	b1 df       	rcall	.-158    	; 0x910 <__fp_pscA>
     9ae:	28 f0       	brcs	.+10     	; 0x9ba <__mulsf3+0x12>
     9b0:	b6 df       	rcall	.-148    	; 0x91e <__fp_pscB>
     9b2:	18 f0       	brcs	.+6      	; 0x9ba <__mulsf3+0x12>
     9b4:	95 23       	and	r25, r21
     9b6:	09 f0       	breq	.+2      	; 0x9ba <__mulsf3+0x12>
     9b8:	a2 cf       	rjmp	.-188    	; 0x8fe <__fp_inf>
     9ba:	a7 cf       	rjmp	.-178    	; 0x90a <__fp_nan>
     9bc:	11 24       	eor	r1, r1
     9be:	ea cf       	rjmp	.-44     	; 0x994 <__fp_szero>

000009c0 <__mulsf3x>:
     9c0:	c6 df       	rcall	.-116    	; 0x94e <__fp_split3>
     9c2:	a0 f3       	brcs	.-24     	; 0x9ac <__mulsf3+0x4>

000009c4 <__mulsf3_pse>:
     9c4:	95 9f       	mul	r25, r21
     9c6:	d1 f3       	breq	.-12     	; 0x9bc <__mulsf3+0x14>
     9c8:	95 0f       	add	r25, r21
     9ca:	50 e0       	ldi	r21, 0x00	; 0
     9cc:	55 1f       	adc	r21, r21
     9ce:	62 9f       	mul	r22, r18
     9d0:	f0 01       	movw	r30, r0
     9d2:	72 9f       	mul	r23, r18
     9d4:	bb 27       	eor	r27, r27
     9d6:	f0 0d       	add	r31, r0
     9d8:	b1 1d       	adc	r27, r1
     9da:	63 9f       	mul	r22, r19
     9dc:	aa 27       	eor	r26, r26
     9de:	f0 0d       	add	r31, r0
     9e0:	b1 1d       	adc	r27, r1
     9e2:	aa 1f       	adc	r26, r26
     9e4:	64 9f       	mul	r22, r20
     9e6:	66 27       	eor	r22, r22
     9e8:	b0 0d       	add	r27, r0
     9ea:	a1 1d       	adc	r26, r1
     9ec:	66 1f       	adc	r22, r22
     9ee:	82 9f       	mul	r24, r18
     9f0:	22 27       	eor	r18, r18
     9f2:	b0 0d       	add	r27, r0
     9f4:	a1 1d       	adc	r26, r1
     9f6:	62 1f       	adc	r22, r18
     9f8:	73 9f       	mul	r23, r19
     9fa:	b0 0d       	add	r27, r0
     9fc:	a1 1d       	adc	r26, r1
     9fe:	62 1f       	adc	r22, r18
     a00:	83 9f       	mul	r24, r19
     a02:	a0 0d       	add	r26, r0
     a04:	61 1d       	adc	r22, r1
     a06:	22 1f       	adc	r18, r18
     a08:	74 9f       	mul	r23, r20
     a0a:	33 27       	eor	r19, r19
     a0c:	a0 0d       	add	r26, r0
     a0e:	61 1d       	adc	r22, r1
     a10:	23 1f       	adc	r18, r19
     a12:	84 9f       	mul	r24, r20
     a14:	60 0d       	add	r22, r0
     a16:	21 1d       	adc	r18, r1
     a18:	82 2f       	mov	r24, r18
     a1a:	76 2f       	mov	r23, r22
     a1c:	6a 2f       	mov	r22, r26
     a1e:	11 24       	eor	r1, r1
     a20:	9f 57       	subi	r25, 0x7F	; 127
     a22:	50 40       	sbci	r21, 0x00	; 0
     a24:	8a f0       	brmi	.+34     	; 0xa48 <__mulsf3_pse+0x84>
     a26:	e1 f0       	breq	.+56     	; 0xa60 <__mulsf3_pse+0x9c>
     a28:	88 23       	and	r24, r24
     a2a:	4a f0       	brmi	.+18     	; 0xa3e <__mulsf3_pse+0x7a>
     a2c:	ee 0f       	add	r30, r30
     a2e:	ff 1f       	adc	r31, r31
     a30:	bb 1f       	adc	r27, r27
     a32:	66 1f       	adc	r22, r22
     a34:	77 1f       	adc	r23, r23
     a36:	88 1f       	adc	r24, r24
     a38:	91 50       	subi	r25, 0x01	; 1
     a3a:	50 40       	sbci	r21, 0x00	; 0
     a3c:	a9 f7       	brne	.-22     	; 0xa28 <__mulsf3_pse+0x64>
     a3e:	9e 3f       	cpi	r25, 0xFE	; 254
     a40:	51 05       	cpc	r21, r1
     a42:	70 f0       	brcs	.+28     	; 0xa60 <__mulsf3_pse+0x9c>
     a44:	5c cf       	rjmp	.-328    	; 0x8fe <__fp_inf>
     a46:	a6 cf       	rjmp	.-180    	; 0x994 <__fp_szero>
     a48:	5f 3f       	cpi	r21, 0xFF	; 255
     a4a:	ec f3       	brlt	.-6      	; 0xa46 <__mulsf3_pse+0x82>
     a4c:	98 3e       	cpi	r25, 0xE8	; 232
     a4e:	dc f3       	brlt	.-10     	; 0xa46 <__mulsf3_pse+0x82>
     a50:	86 95       	lsr	r24
     a52:	77 95       	ror	r23
     a54:	67 95       	ror	r22
     a56:	b7 95       	ror	r27
     a58:	f7 95       	ror	r31
     a5a:	e7 95       	ror	r30
     a5c:	9f 5f       	subi	r25, 0xFF	; 255
     a5e:	c1 f7       	brne	.-16     	; 0xa50 <__mulsf3_pse+0x8c>
     a60:	fe 2b       	or	r31, r30
     a62:	88 0f       	add	r24, r24
     a64:	91 1d       	adc	r25, r1
     a66:	96 95       	lsr	r25
     a68:	87 95       	ror	r24
     a6a:	97 f9       	bld	r25, 7
     a6c:	08 95       	ret

00000a6e <fdevopen>:
     a6e:	0f 93       	push	r16
     a70:	1f 93       	push	r17
     a72:	cf 93       	push	r28
     a74:	df 93       	push	r29
     a76:	ec 01       	movw	r28, r24
     a78:	8b 01       	movw	r16, r22
     a7a:	00 97       	sbiw	r24, 0x00	; 0
     a7c:	31 f4       	brne	.+12     	; 0xa8a <fdevopen+0x1c>
     a7e:	61 15       	cp	r22, r1
     a80:	71 05       	cpc	r23, r1
     a82:	19 f4       	brne	.+6      	; 0xa8a <fdevopen+0x1c>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	90 e0       	ldi	r25, 0x00	; 0
     a88:	38 c0       	rjmp	.+112    	; 0xafa <fdevopen+0x8c>
     a8a:	6e e0       	ldi	r22, 0x0E	; 14
     a8c:	70 e0       	ldi	r23, 0x00	; 0
     a8e:	81 e0       	ldi	r24, 0x01	; 1
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	0e 94 95 07 	call	0xf2a	; 0xf2a <calloc>
     a96:	fc 01       	movw	r30, r24
     a98:	00 97       	sbiw	r24, 0x00	; 0
     a9a:	a1 f3       	breq	.-24     	; 0xa84 <fdevopen+0x16>
     a9c:	80 e8       	ldi	r24, 0x80	; 128
     a9e:	83 83       	std	Z+3, r24	; 0x03
     aa0:	01 15       	cp	r16, r1
     aa2:	11 05       	cpc	r17, r1
     aa4:	71 f0       	breq	.+28     	; 0xac2 <fdevopen+0x54>
     aa6:	13 87       	std	Z+11, r17	; 0x0b
     aa8:	02 87       	std	Z+10, r16	; 0x0a
     aaa:	81 e8       	ldi	r24, 0x81	; 129
     aac:	83 83       	std	Z+3, r24	; 0x03
     aae:	80 91 f2 01 	lds	r24, 0x01F2
     ab2:	90 91 f3 01 	lds	r25, 0x01F3
     ab6:	89 2b       	or	r24, r25
     ab8:	21 f4       	brne	.+8      	; 0xac2 <fdevopen+0x54>
     aba:	f0 93 f3 01 	sts	0x01F3, r31
     abe:	e0 93 f2 01 	sts	0x01F2, r30
     ac2:	20 97       	sbiw	r28, 0x00	; 0
     ac4:	c9 f0       	breq	.+50     	; 0xaf8 <fdevopen+0x8a>
     ac6:	d1 87       	std	Z+9, r29	; 0x09
     ac8:	c0 87       	std	Z+8, r28	; 0x08
     aca:	83 81       	ldd	r24, Z+3	; 0x03
     acc:	82 60       	ori	r24, 0x02	; 2
     ace:	83 83       	std	Z+3, r24	; 0x03
     ad0:	80 91 f4 01 	lds	r24, 0x01F4
     ad4:	90 91 f5 01 	lds	r25, 0x01F5
     ad8:	89 2b       	or	r24, r25
     ada:	71 f4       	brne	.+28     	; 0xaf8 <fdevopen+0x8a>
     adc:	f0 93 f5 01 	sts	0x01F5, r31
     ae0:	e0 93 f4 01 	sts	0x01F4, r30
     ae4:	80 91 f6 01 	lds	r24, 0x01F6
     ae8:	90 91 f7 01 	lds	r25, 0x01F7
     aec:	89 2b       	or	r24, r25
     aee:	21 f4       	brne	.+8      	; 0xaf8 <fdevopen+0x8a>
     af0:	f0 93 f7 01 	sts	0x01F7, r31
     af4:	e0 93 f6 01 	sts	0x01F6, r30
     af8:	cf 01       	movw	r24, r30
     afa:	df 91       	pop	r29
     afc:	cf 91       	pop	r28
     afe:	1f 91       	pop	r17
     b00:	0f 91       	pop	r16
     b02:	08 95       	ret

00000b04 <printf>:
     b04:	a0 e0       	ldi	r26, 0x00	; 0
     b06:	b0 e0       	ldi	r27, 0x00	; 0
     b08:	e8 e8       	ldi	r30, 0x88	; 136
     b0a:	f5 e0       	ldi	r31, 0x05	; 5
     b0c:	0c 94 95 09 	jmp	0x132a	; 0x132a <__prologue_saves__+0x20>
     b10:	fe 01       	movw	r30, r28
     b12:	35 96       	adiw	r30, 0x05	; 5
     b14:	61 91       	ld	r22, Z+
     b16:	71 91       	ld	r23, Z+
     b18:	af 01       	movw	r20, r30
     b1a:	80 91 f4 01 	lds	r24, 0x01F4
     b1e:	90 91 f5 01 	lds	r25, 0x01F5
     b22:	0e 94 c3 05 	call	0xb86	; 0xb86 <vfprintf>
     b26:	e2 e0       	ldi	r30, 0x02	; 2
     b28:	0c 94 b1 09 	jmp	0x1362	; 0x1362 <__epilogue_restores__+0x20>

00000b2c <puts>:
     b2c:	0f 93       	push	r16
     b2e:	1f 93       	push	r17
     b30:	cf 93       	push	r28
     b32:	df 93       	push	r29
     b34:	e0 91 f4 01 	lds	r30, 0x01F4
     b38:	f0 91 f5 01 	lds	r31, 0x01F5
     b3c:	23 81       	ldd	r18, Z+3	; 0x03
     b3e:	21 ff       	sbrs	r18, 1
     b40:	1b c0       	rjmp	.+54     	; 0xb78 <puts+0x4c>
     b42:	ec 01       	movw	r28, r24
     b44:	00 e0       	ldi	r16, 0x00	; 0
     b46:	10 e0       	ldi	r17, 0x00	; 0
     b48:	89 91       	ld	r24, Y+
     b4a:	60 91 f4 01 	lds	r22, 0x01F4
     b4e:	70 91 f5 01 	lds	r23, 0x01F5
     b52:	db 01       	movw	r26, r22
     b54:	18 96       	adiw	r26, 0x08	; 8
     b56:	ed 91       	ld	r30, X+
     b58:	fc 91       	ld	r31, X
     b5a:	19 97       	sbiw	r26, 0x09	; 9
     b5c:	88 23       	and	r24, r24
     b5e:	31 f0       	breq	.+12     	; 0xb6c <puts+0x40>
     b60:	09 95       	icall
     b62:	89 2b       	or	r24, r25
     b64:	89 f3       	breq	.-30     	; 0xb48 <puts+0x1c>
     b66:	0f ef       	ldi	r16, 0xFF	; 255
     b68:	1f ef       	ldi	r17, 0xFF	; 255
     b6a:	ee cf       	rjmp	.-36     	; 0xb48 <puts+0x1c>
     b6c:	8a e0       	ldi	r24, 0x0A	; 10
     b6e:	09 95       	icall
     b70:	89 2b       	or	r24, r25
     b72:	11 f4       	brne	.+4      	; 0xb78 <puts+0x4c>
     b74:	c8 01       	movw	r24, r16
     b76:	02 c0       	rjmp	.+4      	; 0xb7c <puts+0x50>
     b78:	8f ef       	ldi	r24, 0xFF	; 255
     b7a:	9f ef       	ldi	r25, 0xFF	; 255
     b7c:	df 91       	pop	r29
     b7e:	cf 91       	pop	r28
     b80:	1f 91       	pop	r17
     b82:	0f 91       	pop	r16
     b84:	08 95       	ret

00000b86 <vfprintf>:
     b86:	ac e0       	ldi	r26, 0x0C	; 12
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	e9 ec       	ldi	r30, 0xC9	; 201
     b8c:	f5 e0       	ldi	r31, 0x05	; 5
     b8e:	0c 94 85 09 	jmp	0x130a	; 0x130a <__prologue_saves__>
     b92:	7c 01       	movw	r14, r24
     b94:	6b 01       	movw	r12, r22
     b96:	8a 01       	movw	r16, r20
     b98:	fc 01       	movw	r30, r24
     b9a:	17 82       	std	Z+7, r1	; 0x07
     b9c:	16 82       	std	Z+6, r1	; 0x06
     b9e:	83 81       	ldd	r24, Z+3	; 0x03
     ba0:	81 ff       	sbrs	r24, 1
     ba2:	bd c1       	rjmp	.+890    	; 0xf1e <vfprintf+0x398>
     ba4:	ce 01       	movw	r24, r28
     ba6:	01 96       	adiw	r24, 0x01	; 1
     ba8:	4c 01       	movw	r8, r24
     baa:	f7 01       	movw	r30, r14
     bac:	93 81       	ldd	r25, Z+3	; 0x03
     bae:	f6 01       	movw	r30, r12
     bb0:	93 fd       	sbrc	r25, 3
     bb2:	85 91       	lpm	r24, Z+
     bb4:	93 ff       	sbrs	r25, 3
     bb6:	81 91       	ld	r24, Z+
     bb8:	6f 01       	movw	r12, r30
     bba:	88 23       	and	r24, r24
     bbc:	09 f4       	brne	.+2      	; 0xbc0 <vfprintf+0x3a>
     bbe:	ab c1       	rjmp	.+854    	; 0xf16 <vfprintf+0x390>
     bc0:	85 32       	cpi	r24, 0x25	; 37
     bc2:	39 f4       	brne	.+14     	; 0xbd2 <vfprintf+0x4c>
     bc4:	93 fd       	sbrc	r25, 3
     bc6:	85 91       	lpm	r24, Z+
     bc8:	93 ff       	sbrs	r25, 3
     bca:	81 91       	ld	r24, Z+
     bcc:	6f 01       	movw	r12, r30
     bce:	85 32       	cpi	r24, 0x25	; 37
     bd0:	29 f4       	brne	.+10     	; 0xbdc <vfprintf+0x56>
     bd2:	b7 01       	movw	r22, r14
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	0e 94 f5 08 	call	0x11ea	; 0x11ea <fputc>
     bda:	e7 cf       	rjmp	.-50     	; 0xbaa <vfprintf+0x24>
     bdc:	51 2c       	mov	r5, r1
     bde:	31 2c       	mov	r3, r1
     be0:	20 e0       	ldi	r18, 0x00	; 0
     be2:	20 32       	cpi	r18, 0x20	; 32
     be4:	a0 f4       	brcc	.+40     	; 0xc0e <vfprintf+0x88>
     be6:	8b 32       	cpi	r24, 0x2B	; 43
     be8:	69 f0       	breq	.+26     	; 0xc04 <vfprintf+0x7e>
     bea:	30 f4       	brcc	.+12     	; 0xbf8 <vfprintf+0x72>
     bec:	80 32       	cpi	r24, 0x20	; 32
     bee:	59 f0       	breq	.+22     	; 0xc06 <vfprintf+0x80>
     bf0:	83 32       	cpi	r24, 0x23	; 35
     bf2:	69 f4       	brne	.+26     	; 0xc0e <vfprintf+0x88>
     bf4:	20 61       	ori	r18, 0x10	; 16
     bf6:	2c c0       	rjmp	.+88     	; 0xc50 <vfprintf+0xca>
     bf8:	8d 32       	cpi	r24, 0x2D	; 45
     bfa:	39 f0       	breq	.+14     	; 0xc0a <vfprintf+0x84>
     bfc:	80 33       	cpi	r24, 0x30	; 48
     bfe:	39 f4       	brne	.+14     	; 0xc0e <vfprintf+0x88>
     c00:	21 60       	ori	r18, 0x01	; 1
     c02:	26 c0       	rjmp	.+76     	; 0xc50 <vfprintf+0xca>
     c04:	22 60       	ori	r18, 0x02	; 2
     c06:	24 60       	ori	r18, 0x04	; 4
     c08:	23 c0       	rjmp	.+70     	; 0xc50 <vfprintf+0xca>
     c0a:	28 60       	ori	r18, 0x08	; 8
     c0c:	21 c0       	rjmp	.+66     	; 0xc50 <vfprintf+0xca>
     c0e:	27 fd       	sbrc	r18, 7
     c10:	27 c0       	rjmp	.+78     	; 0xc60 <vfprintf+0xda>
     c12:	30 ed       	ldi	r19, 0xD0	; 208
     c14:	38 0f       	add	r19, r24
     c16:	3a 30       	cpi	r19, 0x0A	; 10
     c18:	78 f4       	brcc	.+30     	; 0xc38 <vfprintf+0xb2>
     c1a:	26 ff       	sbrs	r18, 6
     c1c:	06 c0       	rjmp	.+12     	; 0xc2a <vfprintf+0xa4>
     c1e:	fa e0       	ldi	r31, 0x0A	; 10
     c20:	5f 9e       	mul	r5, r31
     c22:	30 0d       	add	r19, r0
     c24:	11 24       	eor	r1, r1
     c26:	53 2e       	mov	r5, r19
     c28:	13 c0       	rjmp	.+38     	; 0xc50 <vfprintf+0xca>
     c2a:	8a e0       	ldi	r24, 0x0A	; 10
     c2c:	38 9e       	mul	r3, r24
     c2e:	30 0d       	add	r19, r0
     c30:	11 24       	eor	r1, r1
     c32:	33 2e       	mov	r3, r19
     c34:	20 62       	ori	r18, 0x20	; 32
     c36:	0c c0       	rjmp	.+24     	; 0xc50 <vfprintf+0xca>
     c38:	8e 32       	cpi	r24, 0x2E	; 46
     c3a:	21 f4       	brne	.+8      	; 0xc44 <vfprintf+0xbe>
     c3c:	26 fd       	sbrc	r18, 6
     c3e:	6b c1       	rjmp	.+726    	; 0xf16 <vfprintf+0x390>
     c40:	20 64       	ori	r18, 0x40	; 64
     c42:	06 c0       	rjmp	.+12     	; 0xc50 <vfprintf+0xca>
     c44:	8c 36       	cpi	r24, 0x6C	; 108
     c46:	11 f4       	brne	.+4      	; 0xc4c <vfprintf+0xc6>
     c48:	20 68       	ori	r18, 0x80	; 128
     c4a:	02 c0       	rjmp	.+4      	; 0xc50 <vfprintf+0xca>
     c4c:	88 36       	cpi	r24, 0x68	; 104
     c4e:	41 f4       	brne	.+16     	; 0xc60 <vfprintf+0xda>
     c50:	f6 01       	movw	r30, r12
     c52:	93 fd       	sbrc	r25, 3
     c54:	85 91       	lpm	r24, Z+
     c56:	93 ff       	sbrs	r25, 3
     c58:	81 91       	ld	r24, Z+
     c5a:	6f 01       	movw	r12, r30
     c5c:	81 11       	cpse	r24, r1
     c5e:	c1 cf       	rjmp	.-126    	; 0xbe2 <vfprintf+0x5c>
     c60:	98 2f       	mov	r25, r24
     c62:	9f 7d       	andi	r25, 0xDF	; 223
     c64:	95 54       	subi	r25, 0x45	; 69
     c66:	93 30       	cpi	r25, 0x03	; 3
     c68:	28 f4       	brcc	.+10     	; 0xc74 <vfprintf+0xee>
     c6a:	0c 5f       	subi	r16, 0xFC	; 252
     c6c:	1f 4f       	sbci	r17, 0xFF	; 255
     c6e:	ff e3       	ldi	r31, 0x3F	; 63
     c70:	f9 83       	std	Y+1, r31	; 0x01
     c72:	0d c0       	rjmp	.+26     	; 0xc8e <vfprintf+0x108>
     c74:	83 36       	cpi	r24, 0x63	; 99
     c76:	31 f0       	breq	.+12     	; 0xc84 <vfprintf+0xfe>
     c78:	83 37       	cpi	r24, 0x73	; 115
     c7a:	71 f0       	breq	.+28     	; 0xc98 <vfprintf+0x112>
     c7c:	83 35       	cpi	r24, 0x53	; 83
     c7e:	09 f0       	breq	.+2      	; 0xc82 <vfprintf+0xfc>
     c80:	5b c0       	rjmp	.+182    	; 0xd38 <vfprintf+0x1b2>
     c82:	22 c0       	rjmp	.+68     	; 0xcc8 <vfprintf+0x142>
     c84:	f8 01       	movw	r30, r16
     c86:	80 81       	ld	r24, Z
     c88:	89 83       	std	Y+1, r24	; 0x01
     c8a:	0e 5f       	subi	r16, 0xFE	; 254
     c8c:	1f 4f       	sbci	r17, 0xFF	; 255
     c8e:	44 24       	eor	r4, r4
     c90:	43 94       	inc	r4
     c92:	51 2c       	mov	r5, r1
     c94:	54 01       	movw	r10, r8
     c96:	15 c0       	rjmp	.+42     	; 0xcc2 <vfprintf+0x13c>
     c98:	38 01       	movw	r6, r16
     c9a:	f2 e0       	ldi	r31, 0x02	; 2
     c9c:	6f 0e       	add	r6, r31
     c9e:	71 1c       	adc	r7, r1
     ca0:	f8 01       	movw	r30, r16
     ca2:	a0 80       	ld	r10, Z
     ca4:	b1 80       	ldd	r11, Z+1	; 0x01
     ca6:	26 ff       	sbrs	r18, 6
     ca8:	03 c0       	rjmp	.+6      	; 0xcb0 <vfprintf+0x12a>
     caa:	65 2d       	mov	r22, r5
     cac:	70 e0       	ldi	r23, 0x00	; 0
     cae:	02 c0       	rjmp	.+4      	; 0xcb4 <vfprintf+0x12e>
     cb0:	6f ef       	ldi	r22, 0xFF	; 255
     cb2:	7f ef       	ldi	r23, 0xFF	; 255
     cb4:	c5 01       	movw	r24, r10
     cb6:	2c 87       	std	Y+12, r18	; 0x0c
     cb8:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <strnlen>
     cbc:	2c 01       	movw	r4, r24
     cbe:	83 01       	movw	r16, r6
     cc0:	2c 85       	ldd	r18, Y+12	; 0x0c
     cc2:	2f 77       	andi	r18, 0x7F	; 127
     cc4:	22 2e       	mov	r2, r18
     cc6:	17 c0       	rjmp	.+46     	; 0xcf6 <vfprintf+0x170>
     cc8:	38 01       	movw	r6, r16
     cca:	f2 e0       	ldi	r31, 0x02	; 2
     ccc:	6f 0e       	add	r6, r31
     cce:	71 1c       	adc	r7, r1
     cd0:	f8 01       	movw	r30, r16
     cd2:	a0 80       	ld	r10, Z
     cd4:	b1 80       	ldd	r11, Z+1	; 0x01
     cd6:	26 ff       	sbrs	r18, 6
     cd8:	03 c0       	rjmp	.+6      	; 0xce0 <vfprintf+0x15a>
     cda:	65 2d       	mov	r22, r5
     cdc:	70 e0       	ldi	r23, 0x00	; 0
     cde:	02 c0       	rjmp	.+4      	; 0xce4 <vfprintf+0x15e>
     ce0:	6f ef       	ldi	r22, 0xFF	; 255
     ce2:	7f ef       	ldi	r23, 0xFF	; 255
     ce4:	c5 01       	movw	r24, r10
     ce6:	2c 87       	std	Y+12, r18	; 0x0c
     ce8:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <strnlen_P>
     cec:	2c 01       	movw	r4, r24
     cee:	2c 85       	ldd	r18, Y+12	; 0x0c
     cf0:	20 68       	ori	r18, 0x80	; 128
     cf2:	22 2e       	mov	r2, r18
     cf4:	83 01       	movw	r16, r6
     cf6:	23 fc       	sbrc	r2, 3
     cf8:	1b c0       	rjmp	.+54     	; 0xd30 <vfprintf+0x1aa>
     cfa:	83 2d       	mov	r24, r3
     cfc:	90 e0       	ldi	r25, 0x00	; 0
     cfe:	48 16       	cp	r4, r24
     d00:	59 06       	cpc	r5, r25
     d02:	b0 f4       	brcc	.+44     	; 0xd30 <vfprintf+0x1aa>
     d04:	b7 01       	movw	r22, r14
     d06:	80 e2       	ldi	r24, 0x20	; 32
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	0e 94 f5 08 	call	0x11ea	; 0x11ea <fputc>
     d0e:	3a 94       	dec	r3
     d10:	f4 cf       	rjmp	.-24     	; 0xcfa <vfprintf+0x174>
     d12:	f5 01       	movw	r30, r10
     d14:	27 fc       	sbrc	r2, 7
     d16:	85 91       	lpm	r24, Z+
     d18:	27 fe       	sbrs	r2, 7
     d1a:	81 91       	ld	r24, Z+
     d1c:	5f 01       	movw	r10, r30
     d1e:	b7 01       	movw	r22, r14
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	0e 94 f5 08 	call	0x11ea	; 0x11ea <fputc>
     d26:	31 10       	cpse	r3, r1
     d28:	3a 94       	dec	r3
     d2a:	f1 e0       	ldi	r31, 0x01	; 1
     d2c:	4f 1a       	sub	r4, r31
     d2e:	51 08       	sbc	r5, r1
     d30:	41 14       	cp	r4, r1
     d32:	51 04       	cpc	r5, r1
     d34:	71 f7       	brne	.-36     	; 0xd12 <vfprintf+0x18c>
     d36:	e5 c0       	rjmp	.+458    	; 0xf02 <vfprintf+0x37c>
     d38:	84 36       	cpi	r24, 0x64	; 100
     d3a:	11 f0       	breq	.+4      	; 0xd40 <vfprintf+0x1ba>
     d3c:	89 36       	cpi	r24, 0x69	; 105
     d3e:	39 f5       	brne	.+78     	; 0xd8e <vfprintf+0x208>
     d40:	f8 01       	movw	r30, r16
     d42:	27 ff       	sbrs	r18, 7
     d44:	07 c0       	rjmp	.+14     	; 0xd54 <vfprintf+0x1ce>
     d46:	60 81       	ld	r22, Z
     d48:	71 81       	ldd	r23, Z+1	; 0x01
     d4a:	82 81       	ldd	r24, Z+2	; 0x02
     d4c:	93 81       	ldd	r25, Z+3	; 0x03
     d4e:	0c 5f       	subi	r16, 0xFC	; 252
     d50:	1f 4f       	sbci	r17, 0xFF	; 255
     d52:	08 c0       	rjmp	.+16     	; 0xd64 <vfprintf+0x1de>
     d54:	60 81       	ld	r22, Z
     d56:	71 81       	ldd	r23, Z+1	; 0x01
     d58:	88 27       	eor	r24, r24
     d5a:	77 fd       	sbrc	r23, 7
     d5c:	80 95       	com	r24
     d5e:	98 2f       	mov	r25, r24
     d60:	0e 5f       	subi	r16, 0xFE	; 254
     d62:	1f 4f       	sbci	r17, 0xFF	; 255
     d64:	2f 76       	andi	r18, 0x6F	; 111
     d66:	b2 2e       	mov	r11, r18
     d68:	97 ff       	sbrs	r25, 7
     d6a:	09 c0       	rjmp	.+18     	; 0xd7e <vfprintf+0x1f8>
     d6c:	90 95       	com	r25
     d6e:	80 95       	com	r24
     d70:	70 95       	com	r23
     d72:	61 95       	neg	r22
     d74:	7f 4f       	sbci	r23, 0xFF	; 255
     d76:	8f 4f       	sbci	r24, 0xFF	; 255
     d78:	9f 4f       	sbci	r25, 0xFF	; 255
     d7a:	20 68       	ori	r18, 0x80	; 128
     d7c:	b2 2e       	mov	r11, r18
     d7e:	2a e0       	ldi	r18, 0x0A	; 10
     d80:	30 e0       	ldi	r19, 0x00	; 0
     d82:	a4 01       	movw	r20, r8
     d84:	0e 94 27 09 	call	0x124e	; 0x124e <__ultoa_invert>
     d88:	a8 2e       	mov	r10, r24
     d8a:	a8 18       	sub	r10, r8
     d8c:	44 c0       	rjmp	.+136    	; 0xe16 <vfprintf+0x290>
     d8e:	85 37       	cpi	r24, 0x75	; 117
     d90:	29 f4       	brne	.+10     	; 0xd9c <vfprintf+0x216>
     d92:	2f 7e       	andi	r18, 0xEF	; 239
     d94:	b2 2e       	mov	r11, r18
     d96:	2a e0       	ldi	r18, 0x0A	; 10
     d98:	30 e0       	ldi	r19, 0x00	; 0
     d9a:	25 c0       	rjmp	.+74     	; 0xde6 <vfprintf+0x260>
     d9c:	f2 2f       	mov	r31, r18
     d9e:	f9 7f       	andi	r31, 0xF9	; 249
     da0:	bf 2e       	mov	r11, r31
     da2:	8f 36       	cpi	r24, 0x6F	; 111
     da4:	c1 f0       	breq	.+48     	; 0xdd6 <vfprintf+0x250>
     da6:	18 f4       	brcc	.+6      	; 0xdae <vfprintf+0x228>
     da8:	88 35       	cpi	r24, 0x58	; 88
     daa:	79 f0       	breq	.+30     	; 0xdca <vfprintf+0x244>
     dac:	b4 c0       	rjmp	.+360    	; 0xf16 <vfprintf+0x390>
     dae:	80 37       	cpi	r24, 0x70	; 112
     db0:	19 f0       	breq	.+6      	; 0xdb8 <vfprintf+0x232>
     db2:	88 37       	cpi	r24, 0x78	; 120
     db4:	21 f0       	breq	.+8      	; 0xdbe <vfprintf+0x238>
     db6:	af c0       	rjmp	.+350    	; 0xf16 <vfprintf+0x390>
     db8:	2f 2f       	mov	r18, r31
     dba:	20 61       	ori	r18, 0x10	; 16
     dbc:	b2 2e       	mov	r11, r18
     dbe:	b4 fe       	sbrs	r11, 4
     dc0:	0d c0       	rjmp	.+26     	; 0xddc <vfprintf+0x256>
     dc2:	8b 2d       	mov	r24, r11
     dc4:	84 60       	ori	r24, 0x04	; 4
     dc6:	b8 2e       	mov	r11, r24
     dc8:	09 c0       	rjmp	.+18     	; 0xddc <vfprintf+0x256>
     dca:	24 ff       	sbrs	r18, 4
     dcc:	0a c0       	rjmp	.+20     	; 0xde2 <vfprintf+0x25c>
     dce:	9f 2f       	mov	r25, r31
     dd0:	96 60       	ori	r25, 0x06	; 6
     dd2:	b9 2e       	mov	r11, r25
     dd4:	06 c0       	rjmp	.+12     	; 0xde2 <vfprintf+0x25c>
     dd6:	28 e0       	ldi	r18, 0x08	; 8
     dd8:	30 e0       	ldi	r19, 0x00	; 0
     dda:	05 c0       	rjmp	.+10     	; 0xde6 <vfprintf+0x260>
     ddc:	20 e1       	ldi	r18, 0x10	; 16
     dde:	30 e0       	ldi	r19, 0x00	; 0
     de0:	02 c0       	rjmp	.+4      	; 0xde6 <vfprintf+0x260>
     de2:	20 e1       	ldi	r18, 0x10	; 16
     de4:	32 e0       	ldi	r19, 0x02	; 2
     de6:	f8 01       	movw	r30, r16
     de8:	b7 fe       	sbrs	r11, 7
     dea:	07 c0       	rjmp	.+14     	; 0xdfa <vfprintf+0x274>
     dec:	60 81       	ld	r22, Z
     dee:	71 81       	ldd	r23, Z+1	; 0x01
     df0:	82 81       	ldd	r24, Z+2	; 0x02
     df2:	93 81       	ldd	r25, Z+3	; 0x03
     df4:	0c 5f       	subi	r16, 0xFC	; 252
     df6:	1f 4f       	sbci	r17, 0xFF	; 255
     df8:	06 c0       	rjmp	.+12     	; 0xe06 <vfprintf+0x280>
     dfa:	60 81       	ld	r22, Z
     dfc:	71 81       	ldd	r23, Z+1	; 0x01
     dfe:	80 e0       	ldi	r24, 0x00	; 0
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	0e 5f       	subi	r16, 0xFE	; 254
     e04:	1f 4f       	sbci	r17, 0xFF	; 255
     e06:	a4 01       	movw	r20, r8
     e08:	0e 94 27 09 	call	0x124e	; 0x124e <__ultoa_invert>
     e0c:	a8 2e       	mov	r10, r24
     e0e:	a8 18       	sub	r10, r8
     e10:	fb 2d       	mov	r31, r11
     e12:	ff 77       	andi	r31, 0x7F	; 127
     e14:	bf 2e       	mov	r11, r31
     e16:	b6 fe       	sbrs	r11, 6
     e18:	0b c0       	rjmp	.+22     	; 0xe30 <vfprintf+0x2aa>
     e1a:	2b 2d       	mov	r18, r11
     e1c:	2e 7f       	andi	r18, 0xFE	; 254
     e1e:	a5 14       	cp	r10, r5
     e20:	50 f4       	brcc	.+20     	; 0xe36 <vfprintf+0x2b0>
     e22:	b4 fe       	sbrs	r11, 4
     e24:	0a c0       	rjmp	.+20     	; 0xe3a <vfprintf+0x2b4>
     e26:	b2 fc       	sbrc	r11, 2
     e28:	08 c0       	rjmp	.+16     	; 0xe3a <vfprintf+0x2b4>
     e2a:	2b 2d       	mov	r18, r11
     e2c:	2e 7e       	andi	r18, 0xEE	; 238
     e2e:	05 c0       	rjmp	.+10     	; 0xe3a <vfprintf+0x2b4>
     e30:	7a 2c       	mov	r7, r10
     e32:	2b 2d       	mov	r18, r11
     e34:	03 c0       	rjmp	.+6      	; 0xe3c <vfprintf+0x2b6>
     e36:	7a 2c       	mov	r7, r10
     e38:	01 c0       	rjmp	.+2      	; 0xe3c <vfprintf+0x2b6>
     e3a:	75 2c       	mov	r7, r5
     e3c:	24 ff       	sbrs	r18, 4
     e3e:	0d c0       	rjmp	.+26     	; 0xe5a <vfprintf+0x2d4>
     e40:	fe 01       	movw	r30, r28
     e42:	ea 0d       	add	r30, r10
     e44:	f1 1d       	adc	r31, r1
     e46:	80 81       	ld	r24, Z
     e48:	80 33       	cpi	r24, 0x30	; 48
     e4a:	11 f4       	brne	.+4      	; 0xe50 <vfprintf+0x2ca>
     e4c:	29 7e       	andi	r18, 0xE9	; 233
     e4e:	09 c0       	rjmp	.+18     	; 0xe62 <vfprintf+0x2dc>
     e50:	22 ff       	sbrs	r18, 2
     e52:	06 c0       	rjmp	.+12     	; 0xe60 <vfprintf+0x2da>
     e54:	73 94       	inc	r7
     e56:	73 94       	inc	r7
     e58:	04 c0       	rjmp	.+8      	; 0xe62 <vfprintf+0x2dc>
     e5a:	82 2f       	mov	r24, r18
     e5c:	86 78       	andi	r24, 0x86	; 134
     e5e:	09 f0       	breq	.+2      	; 0xe62 <vfprintf+0x2dc>
     e60:	73 94       	inc	r7
     e62:	23 fd       	sbrc	r18, 3
     e64:	13 c0       	rjmp	.+38     	; 0xe8c <vfprintf+0x306>
     e66:	20 ff       	sbrs	r18, 0
     e68:	06 c0       	rjmp	.+12     	; 0xe76 <vfprintf+0x2f0>
     e6a:	5a 2c       	mov	r5, r10
     e6c:	73 14       	cp	r7, r3
     e6e:	18 f4       	brcc	.+6      	; 0xe76 <vfprintf+0x2f0>
     e70:	53 0c       	add	r5, r3
     e72:	57 18       	sub	r5, r7
     e74:	73 2c       	mov	r7, r3
     e76:	73 14       	cp	r7, r3
     e78:	68 f4       	brcc	.+26     	; 0xe94 <vfprintf+0x30e>
     e7a:	b7 01       	movw	r22, r14
     e7c:	80 e2       	ldi	r24, 0x20	; 32
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	2c 87       	std	Y+12, r18	; 0x0c
     e82:	0e 94 f5 08 	call	0x11ea	; 0x11ea <fputc>
     e86:	73 94       	inc	r7
     e88:	2c 85       	ldd	r18, Y+12	; 0x0c
     e8a:	f5 cf       	rjmp	.-22     	; 0xe76 <vfprintf+0x2f0>
     e8c:	73 14       	cp	r7, r3
     e8e:	10 f4       	brcc	.+4      	; 0xe94 <vfprintf+0x30e>
     e90:	37 18       	sub	r3, r7
     e92:	01 c0       	rjmp	.+2      	; 0xe96 <vfprintf+0x310>
     e94:	31 2c       	mov	r3, r1
     e96:	24 ff       	sbrs	r18, 4
     e98:	12 c0       	rjmp	.+36     	; 0xebe <vfprintf+0x338>
     e9a:	b7 01       	movw	r22, r14
     e9c:	80 e3       	ldi	r24, 0x30	; 48
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	2c 87       	std	Y+12, r18	; 0x0c
     ea2:	0e 94 f5 08 	call	0x11ea	; 0x11ea <fputc>
     ea6:	2c 85       	ldd	r18, Y+12	; 0x0c
     ea8:	22 ff       	sbrs	r18, 2
     eaa:	17 c0       	rjmp	.+46     	; 0xeda <vfprintf+0x354>
     eac:	21 ff       	sbrs	r18, 1
     eae:	03 c0       	rjmp	.+6      	; 0xeb6 <vfprintf+0x330>
     eb0:	88 e5       	ldi	r24, 0x58	; 88
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	02 c0       	rjmp	.+4      	; 0xeba <vfprintf+0x334>
     eb6:	88 e7       	ldi	r24, 0x78	; 120
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	b7 01       	movw	r22, r14
     ebc:	0c c0       	rjmp	.+24     	; 0xed6 <vfprintf+0x350>
     ebe:	82 2f       	mov	r24, r18
     ec0:	86 78       	andi	r24, 0x86	; 134
     ec2:	59 f0       	breq	.+22     	; 0xeda <vfprintf+0x354>
     ec4:	21 fd       	sbrc	r18, 1
     ec6:	02 c0       	rjmp	.+4      	; 0xecc <vfprintf+0x346>
     ec8:	80 e2       	ldi	r24, 0x20	; 32
     eca:	01 c0       	rjmp	.+2      	; 0xece <vfprintf+0x348>
     ecc:	8b e2       	ldi	r24, 0x2B	; 43
     ece:	27 fd       	sbrc	r18, 7
     ed0:	8d e2       	ldi	r24, 0x2D	; 45
     ed2:	b7 01       	movw	r22, r14
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	0e 94 f5 08 	call	0x11ea	; 0x11ea <fputc>
     eda:	a5 14       	cp	r10, r5
     edc:	38 f4       	brcc	.+14     	; 0xeec <vfprintf+0x366>
     ede:	b7 01       	movw	r22, r14
     ee0:	80 e3       	ldi	r24, 0x30	; 48
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	0e 94 f5 08 	call	0x11ea	; 0x11ea <fputc>
     ee8:	5a 94       	dec	r5
     eea:	f7 cf       	rjmp	.-18     	; 0xeda <vfprintf+0x354>
     eec:	aa 94       	dec	r10
     eee:	f4 01       	movw	r30, r8
     ef0:	ea 0d       	add	r30, r10
     ef2:	f1 1d       	adc	r31, r1
     ef4:	80 81       	ld	r24, Z
     ef6:	b7 01       	movw	r22, r14
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	0e 94 f5 08 	call	0x11ea	; 0x11ea <fputc>
     efe:	a1 10       	cpse	r10, r1
     f00:	f5 cf       	rjmp	.-22     	; 0xeec <vfprintf+0x366>
     f02:	33 20       	and	r3, r3
     f04:	09 f4       	brne	.+2      	; 0xf08 <vfprintf+0x382>
     f06:	51 ce       	rjmp	.-862    	; 0xbaa <vfprintf+0x24>
     f08:	b7 01       	movw	r22, r14
     f0a:	80 e2       	ldi	r24, 0x20	; 32
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	0e 94 f5 08 	call	0x11ea	; 0x11ea <fputc>
     f12:	3a 94       	dec	r3
     f14:	f6 cf       	rjmp	.-20     	; 0xf02 <vfprintf+0x37c>
     f16:	f7 01       	movw	r30, r14
     f18:	86 81       	ldd	r24, Z+6	; 0x06
     f1a:	97 81       	ldd	r25, Z+7	; 0x07
     f1c:	02 c0       	rjmp	.+4      	; 0xf22 <vfprintf+0x39c>
     f1e:	8f ef       	ldi	r24, 0xFF	; 255
     f20:	9f ef       	ldi	r25, 0xFF	; 255
     f22:	2c 96       	adiw	r28, 0x0c	; 12
     f24:	e2 e1       	ldi	r30, 0x12	; 18
     f26:	0c 94 a1 09 	jmp	0x1342	; 0x1342 <__epilogue_restores__>

00000f2a <calloc>:
     f2a:	0f 93       	push	r16
     f2c:	1f 93       	push	r17
     f2e:	cf 93       	push	r28
     f30:	df 93       	push	r29
     f32:	86 9f       	mul	r24, r22
     f34:	80 01       	movw	r16, r0
     f36:	87 9f       	mul	r24, r23
     f38:	10 0d       	add	r17, r0
     f3a:	96 9f       	mul	r25, r22
     f3c:	10 0d       	add	r17, r0
     f3e:	11 24       	eor	r1, r1
     f40:	c8 01       	movw	r24, r16
     f42:	0e 94 b1 07 	call	0xf62	; 0xf62 <malloc>
     f46:	ec 01       	movw	r28, r24
     f48:	00 97       	sbiw	r24, 0x00	; 0
     f4a:	29 f0       	breq	.+10     	; 0xf56 <calloc+0x2c>
     f4c:	a8 01       	movw	r20, r16
     f4e:	60 e0       	ldi	r22, 0x00	; 0
     f50:	70 e0       	ldi	r23, 0x00	; 0
     f52:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <memset>
     f56:	ce 01       	movw	r24, r28
     f58:	df 91       	pop	r29
     f5a:	cf 91       	pop	r28
     f5c:	1f 91       	pop	r17
     f5e:	0f 91       	pop	r16
     f60:	08 95       	ret

00000f62 <malloc>:
     f62:	cf 93       	push	r28
     f64:	df 93       	push	r29
     f66:	82 30       	cpi	r24, 0x02	; 2
     f68:	91 05       	cpc	r25, r1
     f6a:	10 f4       	brcc	.+4      	; 0xf70 <malloc+0xe>
     f6c:	82 e0       	ldi	r24, 0x02	; 2
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	e0 91 fa 01 	lds	r30, 0x01FA
     f74:	f0 91 fb 01 	lds	r31, 0x01FB
     f78:	20 e0       	ldi	r18, 0x00	; 0
     f7a:	30 e0       	ldi	r19, 0x00	; 0
     f7c:	a0 e0       	ldi	r26, 0x00	; 0
     f7e:	b0 e0       	ldi	r27, 0x00	; 0
     f80:	30 97       	sbiw	r30, 0x00	; 0
     f82:	39 f1       	breq	.+78     	; 0xfd2 <malloc+0x70>
     f84:	40 81       	ld	r20, Z
     f86:	51 81       	ldd	r21, Z+1	; 0x01
     f88:	48 17       	cp	r20, r24
     f8a:	59 07       	cpc	r21, r25
     f8c:	b8 f0       	brcs	.+46     	; 0xfbc <malloc+0x5a>
     f8e:	48 17       	cp	r20, r24
     f90:	59 07       	cpc	r21, r25
     f92:	71 f4       	brne	.+28     	; 0xfb0 <malloc+0x4e>
     f94:	82 81       	ldd	r24, Z+2	; 0x02
     f96:	93 81       	ldd	r25, Z+3	; 0x03
     f98:	10 97       	sbiw	r26, 0x00	; 0
     f9a:	29 f0       	breq	.+10     	; 0xfa6 <malloc+0x44>
     f9c:	13 96       	adiw	r26, 0x03	; 3
     f9e:	9c 93       	st	X, r25
     fa0:	8e 93       	st	-X, r24
     fa2:	12 97       	sbiw	r26, 0x02	; 2
     fa4:	2c c0       	rjmp	.+88     	; 0xffe <malloc+0x9c>
     fa6:	90 93 fb 01 	sts	0x01FB, r25
     faa:	80 93 fa 01 	sts	0x01FA, r24
     fae:	27 c0       	rjmp	.+78     	; 0xffe <malloc+0x9c>
     fb0:	21 15       	cp	r18, r1
     fb2:	31 05       	cpc	r19, r1
     fb4:	31 f0       	breq	.+12     	; 0xfc2 <malloc+0x60>
     fb6:	42 17       	cp	r20, r18
     fb8:	53 07       	cpc	r21, r19
     fba:	18 f0       	brcs	.+6      	; 0xfc2 <malloc+0x60>
     fbc:	a9 01       	movw	r20, r18
     fbe:	db 01       	movw	r26, r22
     fc0:	01 c0       	rjmp	.+2      	; 0xfc4 <malloc+0x62>
     fc2:	ef 01       	movw	r28, r30
     fc4:	9a 01       	movw	r18, r20
     fc6:	bd 01       	movw	r22, r26
     fc8:	df 01       	movw	r26, r30
     fca:	02 80       	ldd	r0, Z+2	; 0x02
     fcc:	f3 81       	ldd	r31, Z+3	; 0x03
     fce:	e0 2d       	mov	r30, r0
     fd0:	d7 cf       	rjmp	.-82     	; 0xf80 <malloc+0x1e>
     fd2:	21 15       	cp	r18, r1
     fd4:	31 05       	cpc	r19, r1
     fd6:	f9 f0       	breq	.+62     	; 0x1016 <malloc+0xb4>
     fd8:	28 1b       	sub	r18, r24
     fda:	39 0b       	sbc	r19, r25
     fdc:	24 30       	cpi	r18, 0x04	; 4
     fde:	31 05       	cpc	r19, r1
     fe0:	80 f4       	brcc	.+32     	; 0x1002 <malloc+0xa0>
     fe2:	8a 81       	ldd	r24, Y+2	; 0x02
     fe4:	9b 81       	ldd	r25, Y+3	; 0x03
     fe6:	61 15       	cp	r22, r1
     fe8:	71 05       	cpc	r23, r1
     fea:	21 f0       	breq	.+8      	; 0xff4 <malloc+0x92>
     fec:	fb 01       	movw	r30, r22
     fee:	93 83       	std	Z+3, r25	; 0x03
     ff0:	82 83       	std	Z+2, r24	; 0x02
     ff2:	04 c0       	rjmp	.+8      	; 0xffc <malloc+0x9a>
     ff4:	90 93 fb 01 	sts	0x01FB, r25
     ff8:	80 93 fa 01 	sts	0x01FA, r24
     ffc:	fe 01       	movw	r30, r28
     ffe:	32 96       	adiw	r30, 0x02	; 2
    1000:	44 c0       	rjmp	.+136    	; 0x108a <malloc+0x128>
    1002:	fe 01       	movw	r30, r28
    1004:	e2 0f       	add	r30, r18
    1006:	f3 1f       	adc	r31, r19
    1008:	81 93       	st	Z+, r24
    100a:	91 93       	st	Z+, r25
    100c:	22 50       	subi	r18, 0x02	; 2
    100e:	31 09       	sbc	r19, r1
    1010:	39 83       	std	Y+1, r19	; 0x01
    1012:	28 83       	st	Y, r18
    1014:	3a c0       	rjmp	.+116    	; 0x108a <malloc+0x128>
    1016:	20 91 f8 01 	lds	r18, 0x01F8
    101a:	30 91 f9 01 	lds	r19, 0x01F9
    101e:	23 2b       	or	r18, r19
    1020:	41 f4       	brne	.+16     	; 0x1032 <malloc+0xd0>
    1022:	20 91 02 01 	lds	r18, 0x0102
    1026:	30 91 03 01 	lds	r19, 0x0103
    102a:	30 93 f9 01 	sts	0x01F9, r19
    102e:	20 93 f8 01 	sts	0x01F8, r18
    1032:	20 91 00 01 	lds	r18, 0x0100
    1036:	30 91 01 01 	lds	r19, 0x0101
    103a:	21 15       	cp	r18, r1
    103c:	31 05       	cpc	r19, r1
    103e:	41 f4       	brne	.+16     	; 0x1050 <malloc+0xee>
    1040:	2d b7       	in	r18, 0x3d	; 61
    1042:	3e b7       	in	r19, 0x3e	; 62
    1044:	40 91 04 01 	lds	r20, 0x0104
    1048:	50 91 05 01 	lds	r21, 0x0105
    104c:	24 1b       	sub	r18, r20
    104e:	35 0b       	sbc	r19, r21
    1050:	e0 91 f8 01 	lds	r30, 0x01F8
    1054:	f0 91 f9 01 	lds	r31, 0x01F9
    1058:	e2 17       	cp	r30, r18
    105a:	f3 07       	cpc	r31, r19
    105c:	a0 f4       	brcc	.+40     	; 0x1086 <malloc+0x124>
    105e:	2e 1b       	sub	r18, r30
    1060:	3f 0b       	sbc	r19, r31
    1062:	28 17       	cp	r18, r24
    1064:	39 07       	cpc	r19, r25
    1066:	78 f0       	brcs	.+30     	; 0x1086 <malloc+0x124>
    1068:	ac 01       	movw	r20, r24
    106a:	4e 5f       	subi	r20, 0xFE	; 254
    106c:	5f 4f       	sbci	r21, 0xFF	; 255
    106e:	24 17       	cp	r18, r20
    1070:	35 07       	cpc	r19, r21
    1072:	48 f0       	brcs	.+18     	; 0x1086 <malloc+0x124>
    1074:	4e 0f       	add	r20, r30
    1076:	5f 1f       	adc	r21, r31
    1078:	50 93 f9 01 	sts	0x01F9, r21
    107c:	40 93 f8 01 	sts	0x01F8, r20
    1080:	81 93       	st	Z+, r24
    1082:	91 93       	st	Z+, r25
    1084:	02 c0       	rjmp	.+4      	; 0x108a <malloc+0x128>
    1086:	e0 e0       	ldi	r30, 0x00	; 0
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	cf 01       	movw	r24, r30
    108c:	df 91       	pop	r29
    108e:	cf 91       	pop	r28
    1090:	08 95       	ret

00001092 <free>:
    1092:	cf 93       	push	r28
    1094:	df 93       	push	r29
    1096:	00 97       	sbiw	r24, 0x00	; 0
    1098:	09 f4       	brne	.+2      	; 0x109c <free+0xa>
    109a:	87 c0       	rjmp	.+270    	; 0x11aa <free+0x118>
    109c:	fc 01       	movw	r30, r24
    109e:	32 97       	sbiw	r30, 0x02	; 2
    10a0:	13 82       	std	Z+3, r1	; 0x03
    10a2:	12 82       	std	Z+2, r1	; 0x02
    10a4:	c0 91 fa 01 	lds	r28, 0x01FA
    10a8:	d0 91 fb 01 	lds	r29, 0x01FB
    10ac:	20 97       	sbiw	r28, 0x00	; 0
    10ae:	81 f4       	brne	.+32     	; 0x10d0 <free+0x3e>
    10b0:	20 81       	ld	r18, Z
    10b2:	31 81       	ldd	r19, Z+1	; 0x01
    10b4:	28 0f       	add	r18, r24
    10b6:	39 1f       	adc	r19, r25
    10b8:	80 91 f8 01 	lds	r24, 0x01F8
    10bc:	90 91 f9 01 	lds	r25, 0x01F9
    10c0:	82 17       	cp	r24, r18
    10c2:	93 07       	cpc	r25, r19
    10c4:	79 f5       	brne	.+94     	; 0x1124 <free+0x92>
    10c6:	f0 93 f9 01 	sts	0x01F9, r31
    10ca:	e0 93 f8 01 	sts	0x01F8, r30
    10ce:	6d c0       	rjmp	.+218    	; 0x11aa <free+0x118>
    10d0:	de 01       	movw	r26, r28
    10d2:	20 e0       	ldi	r18, 0x00	; 0
    10d4:	30 e0       	ldi	r19, 0x00	; 0
    10d6:	ae 17       	cp	r26, r30
    10d8:	bf 07       	cpc	r27, r31
    10da:	50 f4       	brcc	.+20     	; 0x10f0 <free+0x5e>
    10dc:	12 96       	adiw	r26, 0x02	; 2
    10de:	4d 91       	ld	r20, X+
    10e0:	5c 91       	ld	r21, X
    10e2:	13 97       	sbiw	r26, 0x03	; 3
    10e4:	9d 01       	movw	r18, r26
    10e6:	41 15       	cp	r20, r1
    10e8:	51 05       	cpc	r21, r1
    10ea:	09 f1       	breq	.+66     	; 0x112e <free+0x9c>
    10ec:	da 01       	movw	r26, r20
    10ee:	f3 cf       	rjmp	.-26     	; 0x10d6 <free+0x44>
    10f0:	b3 83       	std	Z+3, r27	; 0x03
    10f2:	a2 83       	std	Z+2, r26	; 0x02
    10f4:	40 81       	ld	r20, Z
    10f6:	51 81       	ldd	r21, Z+1	; 0x01
    10f8:	84 0f       	add	r24, r20
    10fa:	95 1f       	adc	r25, r21
    10fc:	8a 17       	cp	r24, r26
    10fe:	9b 07       	cpc	r25, r27
    1100:	71 f4       	brne	.+28     	; 0x111e <free+0x8c>
    1102:	8d 91       	ld	r24, X+
    1104:	9c 91       	ld	r25, X
    1106:	11 97       	sbiw	r26, 0x01	; 1
    1108:	84 0f       	add	r24, r20
    110a:	95 1f       	adc	r25, r21
    110c:	02 96       	adiw	r24, 0x02	; 2
    110e:	91 83       	std	Z+1, r25	; 0x01
    1110:	80 83       	st	Z, r24
    1112:	12 96       	adiw	r26, 0x02	; 2
    1114:	8d 91       	ld	r24, X+
    1116:	9c 91       	ld	r25, X
    1118:	13 97       	sbiw	r26, 0x03	; 3
    111a:	93 83       	std	Z+3, r25	; 0x03
    111c:	82 83       	std	Z+2, r24	; 0x02
    111e:	21 15       	cp	r18, r1
    1120:	31 05       	cpc	r19, r1
    1122:	29 f4       	brne	.+10     	; 0x112e <free+0x9c>
    1124:	f0 93 fb 01 	sts	0x01FB, r31
    1128:	e0 93 fa 01 	sts	0x01FA, r30
    112c:	3e c0       	rjmp	.+124    	; 0x11aa <free+0x118>
    112e:	d9 01       	movw	r26, r18
    1130:	13 96       	adiw	r26, 0x03	; 3
    1132:	fc 93       	st	X, r31
    1134:	ee 93       	st	-X, r30
    1136:	12 97       	sbiw	r26, 0x02	; 2
    1138:	4d 91       	ld	r20, X+
    113a:	5d 91       	ld	r21, X+
    113c:	a4 0f       	add	r26, r20
    113e:	b5 1f       	adc	r27, r21
    1140:	ea 17       	cp	r30, r26
    1142:	fb 07       	cpc	r31, r27
    1144:	79 f4       	brne	.+30     	; 0x1164 <free+0xd2>
    1146:	80 81       	ld	r24, Z
    1148:	91 81       	ldd	r25, Z+1	; 0x01
    114a:	84 0f       	add	r24, r20
    114c:	95 1f       	adc	r25, r21
    114e:	02 96       	adiw	r24, 0x02	; 2
    1150:	d9 01       	movw	r26, r18
    1152:	11 96       	adiw	r26, 0x01	; 1
    1154:	9c 93       	st	X, r25
    1156:	8e 93       	st	-X, r24
    1158:	82 81       	ldd	r24, Z+2	; 0x02
    115a:	93 81       	ldd	r25, Z+3	; 0x03
    115c:	13 96       	adiw	r26, 0x03	; 3
    115e:	9c 93       	st	X, r25
    1160:	8e 93       	st	-X, r24
    1162:	12 97       	sbiw	r26, 0x02	; 2
    1164:	e0 e0       	ldi	r30, 0x00	; 0
    1166:	f0 e0       	ldi	r31, 0x00	; 0
    1168:	8a 81       	ldd	r24, Y+2	; 0x02
    116a:	9b 81       	ldd	r25, Y+3	; 0x03
    116c:	00 97       	sbiw	r24, 0x00	; 0
    116e:	19 f0       	breq	.+6      	; 0x1176 <free+0xe4>
    1170:	fe 01       	movw	r30, r28
    1172:	ec 01       	movw	r28, r24
    1174:	f9 cf       	rjmp	.-14     	; 0x1168 <free+0xd6>
    1176:	ce 01       	movw	r24, r28
    1178:	02 96       	adiw	r24, 0x02	; 2
    117a:	28 81       	ld	r18, Y
    117c:	39 81       	ldd	r19, Y+1	; 0x01
    117e:	82 0f       	add	r24, r18
    1180:	93 1f       	adc	r25, r19
    1182:	20 91 f8 01 	lds	r18, 0x01F8
    1186:	30 91 f9 01 	lds	r19, 0x01F9
    118a:	28 17       	cp	r18, r24
    118c:	39 07       	cpc	r19, r25
    118e:	69 f4       	brne	.+26     	; 0x11aa <free+0x118>
    1190:	30 97       	sbiw	r30, 0x00	; 0
    1192:	29 f4       	brne	.+10     	; 0x119e <free+0x10c>
    1194:	10 92 fb 01 	sts	0x01FB, r1
    1198:	10 92 fa 01 	sts	0x01FA, r1
    119c:	02 c0       	rjmp	.+4      	; 0x11a2 <free+0x110>
    119e:	13 82       	std	Z+3, r1	; 0x03
    11a0:	12 82       	std	Z+2, r1	; 0x02
    11a2:	d0 93 f9 01 	sts	0x01F9, r29
    11a6:	c0 93 f8 01 	sts	0x01F8, r28
    11aa:	df 91       	pop	r29
    11ac:	cf 91       	pop	r28
    11ae:	08 95       	ret

000011b0 <strnlen_P>:
    11b0:	fc 01       	movw	r30, r24
    11b2:	05 90       	lpm	r0, Z+
    11b4:	61 50       	subi	r22, 0x01	; 1
    11b6:	70 40       	sbci	r23, 0x00	; 0
    11b8:	01 10       	cpse	r0, r1
    11ba:	d8 f7       	brcc	.-10     	; 0x11b2 <strnlen_P+0x2>
    11bc:	80 95       	com	r24
    11be:	90 95       	com	r25
    11c0:	8e 0f       	add	r24, r30
    11c2:	9f 1f       	adc	r25, r31
    11c4:	08 95       	ret

000011c6 <memset>:
    11c6:	dc 01       	movw	r26, r24
    11c8:	01 c0       	rjmp	.+2      	; 0x11cc <memset+0x6>
    11ca:	6d 93       	st	X+, r22
    11cc:	41 50       	subi	r20, 0x01	; 1
    11ce:	50 40       	sbci	r21, 0x00	; 0
    11d0:	e0 f7       	brcc	.-8      	; 0x11ca <memset+0x4>
    11d2:	08 95       	ret

000011d4 <strnlen>:
    11d4:	fc 01       	movw	r30, r24
    11d6:	61 50       	subi	r22, 0x01	; 1
    11d8:	70 40       	sbci	r23, 0x00	; 0
    11da:	01 90       	ld	r0, Z+
    11dc:	01 10       	cpse	r0, r1
    11de:	d8 f7       	brcc	.-10     	; 0x11d6 <strnlen+0x2>
    11e0:	80 95       	com	r24
    11e2:	90 95       	com	r25
    11e4:	8e 0f       	add	r24, r30
    11e6:	9f 1f       	adc	r25, r31
    11e8:	08 95       	ret

000011ea <fputc>:
    11ea:	0f 93       	push	r16
    11ec:	1f 93       	push	r17
    11ee:	cf 93       	push	r28
    11f0:	df 93       	push	r29
    11f2:	18 2f       	mov	r17, r24
    11f4:	09 2f       	mov	r16, r25
    11f6:	eb 01       	movw	r28, r22
    11f8:	8b 81       	ldd	r24, Y+3	; 0x03
    11fa:	81 fd       	sbrc	r24, 1
    11fc:	03 c0       	rjmp	.+6      	; 0x1204 <fputc+0x1a>
    11fe:	8f ef       	ldi	r24, 0xFF	; 255
    1200:	9f ef       	ldi	r25, 0xFF	; 255
    1202:	20 c0       	rjmp	.+64     	; 0x1244 <fputc+0x5a>
    1204:	82 ff       	sbrs	r24, 2
    1206:	10 c0       	rjmp	.+32     	; 0x1228 <fputc+0x3e>
    1208:	4e 81       	ldd	r20, Y+6	; 0x06
    120a:	5f 81       	ldd	r21, Y+7	; 0x07
    120c:	2c 81       	ldd	r18, Y+4	; 0x04
    120e:	3d 81       	ldd	r19, Y+5	; 0x05
    1210:	42 17       	cp	r20, r18
    1212:	53 07       	cpc	r21, r19
    1214:	7c f4       	brge	.+30     	; 0x1234 <fputc+0x4a>
    1216:	e8 81       	ld	r30, Y
    1218:	f9 81       	ldd	r31, Y+1	; 0x01
    121a:	9f 01       	movw	r18, r30
    121c:	2f 5f       	subi	r18, 0xFF	; 255
    121e:	3f 4f       	sbci	r19, 0xFF	; 255
    1220:	39 83       	std	Y+1, r19	; 0x01
    1222:	28 83       	st	Y, r18
    1224:	10 83       	st	Z, r17
    1226:	06 c0       	rjmp	.+12     	; 0x1234 <fputc+0x4a>
    1228:	e8 85       	ldd	r30, Y+8	; 0x08
    122a:	f9 85       	ldd	r31, Y+9	; 0x09
    122c:	81 2f       	mov	r24, r17
    122e:	09 95       	icall
    1230:	89 2b       	or	r24, r25
    1232:	29 f7       	brne	.-54     	; 0x11fe <fputc+0x14>
    1234:	2e 81       	ldd	r18, Y+6	; 0x06
    1236:	3f 81       	ldd	r19, Y+7	; 0x07
    1238:	2f 5f       	subi	r18, 0xFF	; 255
    123a:	3f 4f       	sbci	r19, 0xFF	; 255
    123c:	3f 83       	std	Y+7, r19	; 0x07
    123e:	2e 83       	std	Y+6, r18	; 0x06
    1240:	81 2f       	mov	r24, r17
    1242:	90 2f       	mov	r25, r16
    1244:	df 91       	pop	r29
    1246:	cf 91       	pop	r28
    1248:	1f 91       	pop	r17
    124a:	0f 91       	pop	r16
    124c:	08 95       	ret

0000124e <__ultoa_invert>:
    124e:	fa 01       	movw	r30, r20
    1250:	aa 27       	eor	r26, r26
    1252:	28 30       	cpi	r18, 0x08	; 8
    1254:	51 f1       	breq	.+84     	; 0x12aa <__ultoa_invert+0x5c>
    1256:	20 31       	cpi	r18, 0x10	; 16
    1258:	81 f1       	breq	.+96     	; 0x12ba <__ultoa_invert+0x6c>
    125a:	e8 94       	clt
    125c:	6f 93       	push	r22
    125e:	6e 7f       	andi	r22, 0xFE	; 254
    1260:	6e 5f       	subi	r22, 0xFE	; 254
    1262:	7f 4f       	sbci	r23, 0xFF	; 255
    1264:	8f 4f       	sbci	r24, 0xFF	; 255
    1266:	9f 4f       	sbci	r25, 0xFF	; 255
    1268:	af 4f       	sbci	r26, 0xFF	; 255
    126a:	b1 e0       	ldi	r27, 0x01	; 1
    126c:	3e d0       	rcall	.+124    	; 0x12ea <__ultoa_invert+0x9c>
    126e:	b4 e0       	ldi	r27, 0x04	; 4
    1270:	3c d0       	rcall	.+120    	; 0x12ea <__ultoa_invert+0x9c>
    1272:	67 0f       	add	r22, r23
    1274:	78 1f       	adc	r23, r24
    1276:	89 1f       	adc	r24, r25
    1278:	9a 1f       	adc	r25, r26
    127a:	a1 1d       	adc	r26, r1
    127c:	68 0f       	add	r22, r24
    127e:	79 1f       	adc	r23, r25
    1280:	8a 1f       	adc	r24, r26
    1282:	91 1d       	adc	r25, r1
    1284:	a1 1d       	adc	r26, r1
    1286:	6a 0f       	add	r22, r26
    1288:	71 1d       	adc	r23, r1
    128a:	81 1d       	adc	r24, r1
    128c:	91 1d       	adc	r25, r1
    128e:	a1 1d       	adc	r26, r1
    1290:	20 d0       	rcall	.+64     	; 0x12d2 <__ultoa_invert+0x84>
    1292:	09 f4       	brne	.+2      	; 0x1296 <__ultoa_invert+0x48>
    1294:	68 94       	set
    1296:	3f 91       	pop	r19
    1298:	2a e0       	ldi	r18, 0x0A	; 10
    129a:	26 9f       	mul	r18, r22
    129c:	11 24       	eor	r1, r1
    129e:	30 19       	sub	r19, r0
    12a0:	30 5d       	subi	r19, 0xD0	; 208
    12a2:	31 93       	st	Z+, r19
    12a4:	de f6       	brtc	.-74     	; 0x125c <__ultoa_invert+0xe>
    12a6:	cf 01       	movw	r24, r30
    12a8:	08 95       	ret
    12aa:	46 2f       	mov	r20, r22
    12ac:	47 70       	andi	r20, 0x07	; 7
    12ae:	40 5d       	subi	r20, 0xD0	; 208
    12b0:	41 93       	st	Z+, r20
    12b2:	b3 e0       	ldi	r27, 0x03	; 3
    12b4:	0f d0       	rcall	.+30     	; 0x12d4 <__ultoa_invert+0x86>
    12b6:	c9 f7       	brne	.-14     	; 0x12aa <__ultoa_invert+0x5c>
    12b8:	f6 cf       	rjmp	.-20     	; 0x12a6 <__ultoa_invert+0x58>
    12ba:	46 2f       	mov	r20, r22
    12bc:	4f 70       	andi	r20, 0x0F	; 15
    12be:	40 5d       	subi	r20, 0xD0	; 208
    12c0:	4a 33       	cpi	r20, 0x3A	; 58
    12c2:	18 f0       	brcs	.+6      	; 0x12ca <__ultoa_invert+0x7c>
    12c4:	49 5d       	subi	r20, 0xD9	; 217
    12c6:	31 fd       	sbrc	r19, 1
    12c8:	40 52       	subi	r20, 0x20	; 32
    12ca:	41 93       	st	Z+, r20
    12cc:	02 d0       	rcall	.+4      	; 0x12d2 <__ultoa_invert+0x84>
    12ce:	a9 f7       	brne	.-22     	; 0x12ba <__ultoa_invert+0x6c>
    12d0:	ea cf       	rjmp	.-44     	; 0x12a6 <__ultoa_invert+0x58>
    12d2:	b4 e0       	ldi	r27, 0x04	; 4
    12d4:	a6 95       	lsr	r26
    12d6:	97 95       	ror	r25
    12d8:	87 95       	ror	r24
    12da:	77 95       	ror	r23
    12dc:	67 95       	ror	r22
    12de:	ba 95       	dec	r27
    12e0:	c9 f7       	brne	.-14     	; 0x12d4 <__ultoa_invert+0x86>
    12e2:	00 97       	sbiw	r24, 0x00	; 0
    12e4:	61 05       	cpc	r22, r1
    12e6:	71 05       	cpc	r23, r1
    12e8:	08 95       	ret
    12ea:	9b 01       	movw	r18, r22
    12ec:	ac 01       	movw	r20, r24
    12ee:	0a 2e       	mov	r0, r26
    12f0:	06 94       	lsr	r0
    12f2:	57 95       	ror	r21
    12f4:	47 95       	ror	r20
    12f6:	37 95       	ror	r19
    12f8:	27 95       	ror	r18
    12fa:	ba 95       	dec	r27
    12fc:	c9 f7       	brne	.-14     	; 0x12f0 <__ultoa_invert+0xa2>
    12fe:	62 0f       	add	r22, r18
    1300:	73 1f       	adc	r23, r19
    1302:	84 1f       	adc	r24, r20
    1304:	95 1f       	adc	r25, r21
    1306:	a0 1d       	adc	r26, r0
    1308:	08 95       	ret

0000130a <__prologue_saves__>:
    130a:	2f 92       	push	r2
    130c:	3f 92       	push	r3
    130e:	4f 92       	push	r4
    1310:	5f 92       	push	r5
    1312:	6f 92       	push	r6
    1314:	7f 92       	push	r7
    1316:	8f 92       	push	r8
    1318:	9f 92       	push	r9
    131a:	af 92       	push	r10
    131c:	bf 92       	push	r11
    131e:	cf 92       	push	r12
    1320:	df 92       	push	r13
    1322:	ef 92       	push	r14
    1324:	ff 92       	push	r15
    1326:	0f 93       	push	r16
    1328:	1f 93       	push	r17
    132a:	cf 93       	push	r28
    132c:	df 93       	push	r29
    132e:	cd b7       	in	r28, 0x3d	; 61
    1330:	de b7       	in	r29, 0x3e	; 62
    1332:	ca 1b       	sub	r28, r26
    1334:	db 0b       	sbc	r29, r27
    1336:	0f b6       	in	r0, 0x3f	; 63
    1338:	f8 94       	cli
    133a:	de bf       	out	0x3e, r29	; 62
    133c:	0f be       	out	0x3f, r0	; 63
    133e:	cd bf       	out	0x3d, r28	; 61
    1340:	09 94       	ijmp

00001342 <__epilogue_restores__>:
    1342:	2a 88       	ldd	r2, Y+18	; 0x12
    1344:	39 88       	ldd	r3, Y+17	; 0x11
    1346:	48 88       	ldd	r4, Y+16	; 0x10
    1348:	5f 84       	ldd	r5, Y+15	; 0x0f
    134a:	6e 84       	ldd	r6, Y+14	; 0x0e
    134c:	7d 84       	ldd	r7, Y+13	; 0x0d
    134e:	8c 84       	ldd	r8, Y+12	; 0x0c
    1350:	9b 84       	ldd	r9, Y+11	; 0x0b
    1352:	aa 84       	ldd	r10, Y+10	; 0x0a
    1354:	b9 84       	ldd	r11, Y+9	; 0x09
    1356:	c8 84       	ldd	r12, Y+8	; 0x08
    1358:	df 80       	ldd	r13, Y+7	; 0x07
    135a:	ee 80       	ldd	r14, Y+6	; 0x06
    135c:	fd 80       	ldd	r15, Y+5	; 0x05
    135e:	0c 81       	ldd	r16, Y+4	; 0x04
    1360:	1b 81       	ldd	r17, Y+3	; 0x03
    1362:	aa 81       	ldd	r26, Y+2	; 0x02
    1364:	b9 81       	ldd	r27, Y+1	; 0x01
    1366:	ce 0f       	add	r28, r30
    1368:	d1 1d       	adc	r29, r1
    136a:	0f b6       	in	r0, 0x3f	; 63
    136c:	f8 94       	cli
    136e:	de bf       	out	0x3e, r29	; 62
    1370:	0f be       	out	0x3f, r0	; 63
    1372:	cd bf       	out	0x3d, r28	; 61
    1374:	ed 01       	movw	r28, r26
    1376:	08 95       	ret

00001378 <_exit>:
    1378:	f8 94       	cli

0000137a <__stop_program>:
    137a:	ff cf       	rjmp	.-2      	; 0x137a <__stop_program>
