
gr_13.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000164  00800100  00001588  0000161c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001588  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  00800264  00800264  00001780  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001780  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001a8  00000000  00000000  000017dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001679  00000000  00000000  00001984  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009f3  00000000  00000000  00002ffd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000009bf  00000000  00000000  000039f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003c8  00000000  00000000  000043b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000052b  00000000  00000000  00004778  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000008c5  00000000  00000000  00004ca3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000150  00000000  00000000  00005568  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b4 01 	jmp	0x368	; 0x368 <__ctors_end>
       4:	0c 94 68 02 	jmp	0x4d0	; 0x4d0 <__vector_1>
       8:	0c 94 8e 02 	jmp	0x51c	; 0x51c <__vector_2>
       c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      10:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      14:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      18:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      1c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      20:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      24:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      28:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      2c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      30:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      34:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      38:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      3c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      40:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      44:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      48:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      4c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      50:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      54:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      58:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      5c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      60:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      64:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      68:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      6c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>

00000070 <__trampolines_end>:
	...
      78:	00 06       	cpc	r0, r16
      7a:	5f 5f       	subi	r21, 0xFF	; 255
      7c:	06 00       	.word	0x0006	; ????
      7e:	00 00       	nop
      80:	00 07       	cpc	r16, r16
      82:	07 00       	.word	0x0007	; ????
      84:	07 07       	cpc	r16, r23
      86:	00 00       	nop
      88:	14 7f       	andi	r17, 0xF4	; 244
      8a:	7f 14       	cp	r7, r15
      8c:	7f 7f       	andi	r23, 0xFF	; 255
      8e:	14 00       	.word	0x0014	; ????
      90:	24 2e       	mov	r2, r20
      92:	6b 6b       	ori	r22, 0xBB	; 187
      94:	3a 12       	cpse	r3, r26
      96:	00 00       	nop
      98:	46 66       	ori	r20, 0x66	; 102
      9a:	30 18       	sub	r3, r0
      9c:	0c 66       	ori	r16, 0x6C	; 108
      9e:	62 00       	.word	0x0062	; ????
      a0:	30 7a       	andi	r19, 0xA0	; 160
      a2:	4f 5d       	subi	r20, 0xDF	; 223
      a4:	37 7a       	andi	r19, 0xA7	; 167
      a6:	48 00       	.word	0x0048	; ????
      a8:	04 07       	cpc	r16, r20
      aa:	03 00       	.word	0x0003	; ????
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	00 1c       	adc	r0, r0
      b2:	3e 63       	ori	r19, 0x3E	; 62
      b4:	41 00       	.word	0x0041	; ????
      b6:	00 00       	nop
      b8:	00 41       	sbci	r16, 0x10	; 16
      ba:	63 3e       	cpi	r22, 0xE3	; 227
      bc:	1c 00       	.word	0x001c	; ????
      be:	00 00       	nop
      c0:	08 2a       	or	r0, r24
      c2:	3e 1c       	adc	r3, r14
      c4:	1c 3e       	cpi	r17, 0xEC	; 236
      c6:	2a 08       	sbc	r2, r10
      c8:	08 08       	sbc	r0, r8
      ca:	3e 3e       	cpi	r19, 0xEE	; 238
      cc:	08 08       	sbc	r0, r8
      ce:	00 00       	nop
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	e0 60       	ori	r30, 0x00	; 0
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	08 08       	sbc	r0, r8
      da:	08 08       	sbc	r0, r8
      dc:	08 08       	sbc	r0, r8
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	60 60       	ori	r22, 0x00	; 0
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	60 30       	cpi	r22, 0x00	; 0
      ea:	18 0c       	add	r1, r8
      ec:	06 03       	mulsu	r16, r22
      ee:	01 00       	.word	0x0001	; ????
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	59 4d       	sbci	r21, 0xD9	; 217
      f4:	7f 3e       	cpi	r23, 0xEF	; 239
      f6:	00 00       	nop
      f8:	42 42       	sbci	r20, 0x22	; 34
      fa:	7f 7f       	andi	r23, 0xFF	; 255
      fc:	40 40       	sbci	r20, 0x00	; 0
      fe:	00 00       	nop
     100:	62 73       	andi	r22, 0x32	; 50
     102:	59 49       	sbci	r21, 0x99	; 153
     104:	6f 66       	ori	r22, 0x6F	; 111
     106:	00 00       	nop
     108:	22 63       	ori	r18, 0x32	; 50
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	7f 36       	cpi	r23, 0x6F	; 111
     10e:	00 00       	nop
     110:	18 1c       	adc	r1, r8
     112:	16 13       	cpse	r17, r22
     114:	7f 7f       	andi	r23, 0xFF	; 255
     116:	10 00       	.word	0x0010	; ????
     118:	27 67       	ori	r18, 0x77	; 119
     11a:	45 45       	sbci	r20, 0x55	; 85
     11c:	7d 39       	cpi	r23, 0x9D	; 157
     11e:	00 00       	nop
     120:	3c 7e       	andi	r19, 0xEC	; 236
     122:	4b 49       	sbci	r20, 0x9B	; 155
     124:	79 30       	cpi	r23, 0x09	; 9
     126:	00 00       	nop
     128:	03 63       	ori	r16, 0x33	; 51
     12a:	71 19       	sub	r23, r1
     12c:	0f 07       	cpc	r16, r31
     12e:	00 00       	nop
     130:	36 7f       	andi	r19, 0xF6	; 246
     132:	49 49       	sbci	r20, 0x99	; 153
     134:	7f 36       	cpi	r23, 0x6F	; 111
     136:	00 00       	nop
     138:	06 4f       	sbci	r16, 0xF6	; 246
     13a:	49 69       	ori	r20, 0x99	; 153
     13c:	3f 1e       	adc	r3, r31
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	6c 6c       	ori	r22, 0xCC	; 204
     144:	00 00       	nop
     146:	00 00       	nop
     148:	00 a0       	ldd	r0, Z+32	; 0x20
     14a:	ec 6c       	ori	r30, 0xCC	; 204
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	08 1c       	adc	r0, r8
     152:	36 63       	ori	r19, 0x36	; 54
     154:	41 00       	.word	0x0041	; ????
     156:	00 00       	nop
     158:	14 14       	cp	r1, r4
     15a:	14 14       	cp	r1, r4
     15c:	14 14       	cp	r1, r4
     15e:	00 00       	nop
     160:	00 41       	sbci	r16, 0x10	; 16
     162:	63 36       	cpi	r22, 0x63	; 99
     164:	1c 08       	sbc	r1, r12
     166:	00 00       	nop
     168:	02 03       	mulsu	r16, r18
     16a:	51 59       	subi	r21, 0x91	; 145
     16c:	0f 06       	cpc	r0, r31
     16e:	00 00       	nop
     170:	3e 7f       	andi	r19, 0xFE	; 254
     172:	41 5d       	subi	r20, 0xD1	; 209
     174:	5d 1f       	adc	r21, r29
     176:	1e 00       	.word	0x001e	; ????
     178:	7c 7e       	andi	r23, 0xEC	; 236
     17a:	13 13       	cpse	r17, r19
     17c:	7e 7c       	andi	r23, 0xCE	; 206
     17e:	00 00       	nop
     180:	41 7f       	andi	r20, 0xF1	; 241
     182:	7f 49       	sbci	r23, 0x9F	; 159
     184:	49 7f       	andi	r20, 0xF9	; 249
     186:	36 00       	.word	0x0036	; ????
     188:	1c 3e       	cpi	r17, 0xEC	; 236
     18a:	63 41       	sbci	r22, 0x13	; 19
     18c:	41 63       	ori	r20, 0x31	; 49
     18e:	22 00       	.word	0x0022	; ????
     190:	41 7f       	andi	r20, 0xF1	; 241
     192:	7f 41       	sbci	r23, 0x1F	; 31
     194:	63 7f       	andi	r22, 0xF3	; 243
     196:	1c 00       	.word	0x001c	; ????
     198:	41 7f       	andi	r20, 0xF1	; 241
     19a:	7f 49       	sbci	r23, 0x9F	; 159
     19c:	5d 41       	sbci	r21, 0x1D	; 29
     19e:	63 00       	.word	0x0063	; ????
     1a0:	41 7f       	andi	r20, 0xF1	; 241
     1a2:	7f 49       	sbci	r23, 0x9F	; 159
     1a4:	1d 01       	movw	r2, r26
     1a6:	03 00       	.word	0x0003	; ????
     1a8:	1c 3e       	cpi	r17, 0xEC	; 236
     1aa:	63 41       	sbci	r22, 0x13	; 19
     1ac:	51 73       	andi	r21, 0x31	; 49
     1ae:	72 00       	.word	0x0072	; ????
     1b0:	7f 7f       	andi	r23, 0xFF	; 255
     1b2:	08 08       	sbc	r0, r8
     1b4:	7f 7f       	andi	r23, 0xFF	; 255
     1b6:	00 00       	nop
     1b8:	00 41       	sbci	r16, 0x10	; 16
     1ba:	7f 7f       	andi	r23, 0xFF	; 255
     1bc:	41 00       	.word	0x0041	; ????
     1be:	00 00       	nop
     1c0:	30 70       	andi	r19, 0x00	; 0
     1c2:	40 41       	sbci	r20, 0x10	; 16
     1c4:	7f 3f       	cpi	r23, 0xFF	; 255
     1c6:	01 00       	.word	0x0001	; ????
     1c8:	41 7f       	andi	r20, 0xF1	; 241
     1ca:	7f 08       	sbc	r7, r15
     1cc:	1c 77       	andi	r17, 0x7C	; 124
     1ce:	63 00       	.word	0x0063	; ????
     1d0:	41 7f       	andi	r20, 0xF1	; 241
     1d2:	7f 41       	sbci	r23, 0x1F	; 31
     1d4:	40 60       	ori	r20, 0x00	; 0
     1d6:	70 00       	.word	0x0070	; ????
     1d8:	7f 7f       	andi	r23, 0xFF	; 255
     1da:	06 0c       	add	r0, r6
     1dc:	06 7f       	andi	r16, 0xF6	; 246
     1de:	7f 00       	.word	0x007f	; ????
     1e0:	7f 7f       	andi	r23, 0xFF	; 255
     1e2:	06 0c       	add	r0, r6
     1e4:	18 7f       	andi	r17, 0xF8	; 248
     1e6:	7f 00       	.word	0x007f	; ????
     1e8:	1c 3e       	cpi	r17, 0xEC	; 236
     1ea:	63 41       	sbci	r22, 0x13	; 19
     1ec:	63 3e       	cpi	r22, 0xE3	; 227
     1ee:	1c 00       	.word	0x001c	; ????
     1f0:	41 7f       	andi	r20, 0xF1	; 241
     1f2:	7f 49       	sbci	r23, 0x9F	; 159
     1f4:	09 0f       	add	r16, r25
     1f6:	06 00       	.word	0x0006	; ????
     1f8:	1e 3f       	cpi	r17, 0xFE	; 254
     1fa:	21 71       	andi	r18, 0x11	; 17
     1fc:	7f 5e       	subi	r23, 0xEF	; 239
     1fe:	00 00       	nop
     200:	41 7f       	andi	r20, 0xF1	; 241
     202:	7f 19       	sub	r23, r15
     204:	39 6f       	ori	r19, 0xF9	; 249
     206:	46 00       	.word	0x0046	; ????
     208:	26 67       	ori	r18, 0x76	; 118
     20a:	4d 59       	subi	r20, 0x9D	; 157
     20c:	7b 32       	cpi	r23, 0x2B	; 43
     20e:	00 00       	nop
     210:	03 41       	sbci	r16, 0x13	; 19
     212:	7f 7f       	andi	r23, 0xFF	; 255
     214:	41 03       	mulsu	r20, r17
     216:	00 00       	nop
     218:	7f 7f       	andi	r23, 0xFF	; 255
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	7f 7f       	andi	r23, 0xFF	; 255
     21e:	00 00       	nop
     220:	1f 3f       	cpi	r17, 0xFF	; 255
     222:	60 60       	ori	r22, 0x00	; 0
     224:	3f 1f       	adc	r19, r31
     226:	00 00       	nop
     228:	7f 7f       	andi	r23, 0xFF	; 255
     22a:	30 18       	sub	r3, r0
     22c:	30 7f       	andi	r19, 0xF0	; 240
     22e:	7f 00       	.word	0x007f	; ????
     230:	63 77       	andi	r22, 0x73	; 115
     232:	1c 08       	sbc	r1, r12
     234:	1c 77       	andi	r17, 0x7C	; 124
     236:	63 00       	.word	0x0063	; ????
     238:	07 4f       	sbci	r16, 0xF7	; 247
     23a:	78 78       	andi	r23, 0x88	; 136
     23c:	4f 07       	cpc	r20, r31
     23e:	00 00       	nop
     240:	67 73       	andi	r22, 0x37	; 55
     242:	59 4d       	sbci	r21, 0xD9	; 217
     244:	47 63       	ori	r20, 0x37	; 55
     246:	71 00       	.word	0x0071	; ????
     248:	00 7f       	andi	r16, 0xF0	; 240
     24a:	7f 41       	sbci	r23, 0x1F	; 31
     24c:	41 00       	.word	0x0041	; ????
     24e:	00 00       	nop
     250:	01 03       	mulsu	r16, r17
     252:	06 0c       	add	r0, r6
     254:	18 30       	cpi	r17, 0x08	; 8
     256:	60 00       	.word	0x0060	; ????
     258:	00 41       	sbci	r16, 0x10	; 16
     25a:	41 7f       	andi	r20, 0xF1	; 241
     25c:	7f 00       	.word	0x007f	; ????
     25e:	00 00       	nop
     260:	08 0c       	add	r0, r8
     262:	06 03       	mulsu	r16, r22
     264:	06 0c       	add	r0, r6
     266:	08 00       	.word	0x0008	; ????
     268:	80 80       	ld	r8, Z
     26a:	80 80       	ld	r8, Z
     26c:	80 80       	ld	r8, Z
     26e:	80 80       	ld	r8, Z
     270:	00 00       	nop
     272:	03 07       	cpc	r16, r19
     274:	04 00       	.word	0x0004	; ????
     276:	00 00       	nop
     278:	20 74       	andi	r18, 0x40	; 64
     27a:	54 54       	subi	r21, 0x44	; 68
     27c:	3c 78       	andi	r19, 0x8C	; 140
     27e:	40 00       	.word	0x0040	; ????
     280:	41 3f       	cpi	r20, 0xF1	; 241
     282:	7f 44       	sbci	r23, 0x4F	; 79
     284:	44 7c       	andi	r20, 0xC4	; 196
     286:	38 00       	.word	0x0038	; ????
     288:	38 7c       	andi	r19, 0xC8	; 200
     28a:	44 44       	sbci	r20, 0x44	; 68
     28c:	6c 28       	or	r6, r12
     28e:	00 00       	nop
     290:	30 78       	andi	r19, 0x80	; 128
     292:	48 49       	sbci	r20, 0x98	; 152
     294:	3f 7f       	andi	r19, 0xFF	; 255
     296:	40 00       	.word	0x0040	; ????
     298:	38 7c       	andi	r19, 0xC8	; 200
     29a:	54 54       	subi	r21, 0x44	; 68
     29c:	5c 18       	sub	r5, r12
     29e:	00 00       	nop
     2a0:	48 7e       	andi	r20, 0xE8	; 232
     2a2:	7f 49       	sbci	r23, 0x9F	; 159
     2a4:	03 02       	muls	r16, r19
     2a6:	00 00       	nop
     2a8:	98 bc       	out	0x28, r9	; 40
     2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2ac:	f8 7c       	andi	r31, 0xC8	; 200
     2ae:	04 00       	.word	0x0004	; ????
     2b0:	41 7f       	andi	r20, 0xF1	; 241
     2b2:	7f 08       	sbc	r7, r15
     2b4:	04 7c       	andi	r16, 0xC4	; 196
     2b6:	78 00       	.word	0x0078	; ????
     2b8:	00 44       	sbci	r16, 0x40	; 64
     2ba:	7d 7d       	andi	r23, 0xDD	; 221
     2bc:	40 00       	.word	0x0040	; ????
     2be:	00 00       	nop
     2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <SRAM_test+0x50>
     2c2:	84 fd       	sbrc	r24, 4
     2c4:	7d 00       	.word	0x007d	; ????
     2c6:	00 00       	nop
     2c8:	41 7f       	andi	r20, 0xF1	; 241
     2ca:	7f 10       	cpse	r7, r15
     2cc:	38 6c       	ori	r19, 0xC8	; 200
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	00 41       	sbci	r16, 0x10	; 16
     2d2:	7f 7f       	andi	r23, 0xFF	; 255
     2d4:	40 00       	.word	0x0040	; ????
     2d6:	00 00       	nop
     2d8:	7c 7c       	andi	r23, 0xCC	; 204
     2da:	0c 18       	sub	r0, r12
     2dc:	0c 7c       	andi	r16, 0xCC	; 204
     2de:	78 00       	.word	0x0078	; ????
     2e0:	7c 7c       	andi	r23, 0xCC	; 204
     2e2:	04 04       	cpc	r0, r4
     2e4:	7c 78       	andi	r23, 0x8C	; 140
     2e6:	00 00       	nop
     2e8:	38 7c       	andi	r19, 0xC8	; 200
     2ea:	44 44       	sbci	r20, 0x44	; 68
     2ec:	7c 38       	cpi	r23, 0x8C	; 140
     2ee:	00 00       	nop
     2f0:	84 fc       	sbrc	r8, 4
     2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
     2f4:	24 3c       	cpi	r18, 0xC4	; 196
     2f6:	18 00       	.word	0x0018	; ????
     2f8:	18 3c       	cpi	r17, 0xC8	; 200
     2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
     2fc:	f8 fc       	.word	0xfcf8	; ????
     2fe:	84 00       	.word	0x0084	; ????
     300:	44 7c       	andi	r20, 0xC4	; 196
     302:	78 44       	sbci	r23, 0x48	; 72
     304:	1c 18       	sub	r1, r12
     306:	00 00       	nop
     308:	48 5c       	subi	r20, 0xC8	; 200
     30a:	54 54       	subi	r21, 0x44	; 68
     30c:	74 24       	eor	r7, r4
     30e:	00 00       	nop
     310:	00 04       	cpc	r0, r0
     312:	3e 7f       	andi	r19, 0xFE	; 254
     314:	44 24       	eor	r4, r4
     316:	00 00       	nop
     318:	3c 7c       	andi	r19, 0xCC	; 204
     31a:	40 40       	sbci	r20, 0x00	; 0
     31c:	3c 7c       	andi	r19, 0xCC	; 204
     31e:	40 00       	.word	0x0040	; ????
     320:	1c 3c       	cpi	r17, 0xCC	; 204
     322:	60 60       	ori	r22, 0x00	; 0
     324:	3c 1c       	adc	r3, r12
     326:	00 00       	nop
     328:	3c 7c       	andi	r19, 0xCC	; 204
     32a:	60 30       	cpi	r22, 0x00	; 0
     32c:	60 7c       	andi	r22, 0xC0	; 192
     32e:	3c 00       	.word	0x003c	; ????
     330:	44 6c       	ori	r20, 0xC4	; 196
     332:	38 10       	cpse	r3, r8
     334:	38 6c       	ori	r19, 0xC8	; 200
     336:	44 00       	.word	0x0044	; ????
     338:	9c bc       	out	0x2c, r9	; 44
     33a:	a0 a0       	ldd	r10, Z+32	; 0x20
     33c:	fc 7c       	andi	r31, 0xCC	; 204
     33e:	00 00       	nop
     340:	4c 64       	ori	r20, 0x4C	; 76
     342:	74 5c       	subi	r23, 0xC4	; 196
     344:	4c 64       	ori	r20, 0x4C	; 76
     346:	00 00       	nop
     348:	08 08       	sbc	r0, r8
     34a:	3e 77       	andi	r19, 0x7E	; 126
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	00 00       	nop
     350:	00 00       	nop
     352:	00 77       	andi	r16, 0x70	; 112
     354:	77 00       	.word	0x0077	; ????
     356:	00 00       	nop
     358:	41 41       	sbci	r20, 0x11	; 17
     35a:	77 3e       	cpi	r23, 0xE7	; 231
     35c:	08 08       	sbc	r0, r8
     35e:	00 00       	nop
     360:	02 03       	mulsu	r16, r18
     362:	01 03       	mulsu	r16, r17
     364:	02 03       	mulsu	r16, r18
     366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
     368:	11 24       	eor	r1, r1
     36a:	1f be       	out	0x3f, r1	; 63
     36c:	cf ef       	ldi	r28, 0xFF	; 255
     36e:	d4 e0       	ldi	r29, 0x04	; 4
     370:	de bf       	out	0x3e, r29	; 62
     372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
     374:	12 e0       	ldi	r17, 0x02	; 2
     376:	a0 e0       	ldi	r26, 0x00	; 0
     378:	b1 e0       	ldi	r27, 0x01	; 1
     37a:	e8 e8       	ldi	r30, 0x88	; 136
     37c:	f5 e1       	ldi	r31, 0x15	; 21
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
     380:	05 90       	lpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	a4 36       	cpi	r26, 0x64	; 100
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
     38a:	22 e0       	ldi	r18, 0x02	; 2
     38c:	a4 e6       	ldi	r26, 0x64	; 100
     38e:	b2 e0       	ldi	r27, 0x02	; 2
     390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
     392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
     394:	a4 37       	cpi	r26, 0x74	; 116
     396:	b2 07       	cpc	r27, r18
     398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
     39a:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <main>
     39e:	0c 94 c2 0a 	jmp	0x1584	; 0x1584 <_exit>

000003a2 <__bad_interrupt>:
     3a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003a6 <ADC_read>:
#include <util/delay.h>

uint8_t ADC_read(ADC_channel ch)
{
	volatile char *adc = (char *) 0x1400;
	adc[1] = ch;
     3a6:	80 93 01 14 	sts	0x1401, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3aa:	81 e4       	ldi	r24, 0x41	; 65
     3ac:	8a 95       	dec	r24
     3ae:	f1 f7       	brne	.-4      	; 0x3ac <ADC_read+0x6>
     3b0:	00 c0       	rjmp	.+0      	; 0x3b2 <ADC_read+0xc>
	_delay_us(40);
	
	return adc[0];
     3b2:	80 91 00 14 	lds	r24, 0x1400
     3b6:	08 95       	ret

000003b8 <main>:
#include "adc.h"
#include "joystick.h"

int main(void)
{
	usart_setup();
     3b8:	0e 94 01 06 	call	0xc02	; 0xc02 <usart_setup>
	SRAM_init();
     3bc:	0e 94 75 05 	call	0xaea	; 0xaea <SRAM_init>
	OLED_init();
     3c0:	0e 94 d6 03 	call	0x7ac	; 0x7ac <OLED_init>
	MENU_draw_menu();
     3c4:	0e 94 c9 02 	call	0x592	; 0x592 <MENU_draw_menu>
	SRAM_test();
     3c8:	0e 94 79 05 	call	0xaf2	; 0xaf2 <SRAM_test>
	JOYSTICK_init();
     3cc:	0e 94 01 02 	call	0x402	; 0x402 <JOYSTICK_init>
	SLIDER_init();
     3d0:	0e 94 60 02 	call	0x4c0	; 0x4c0 <SLIDER_init>
	
	for(;;) {
		MENU_root();
     3d4:	0e 94 72 03 	call	0x6e4	; 0x6e4 <MENU_root>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3d8:	2f ef       	ldi	r18, 0xFF	; 255
     3da:	8f e7       	ldi	r24, 0x7F	; 127
     3dc:	91 e0       	ldi	r25, 0x01	; 1
     3de:	21 50       	subi	r18, 0x01	; 1
     3e0:	80 40       	sbci	r24, 0x00	; 0
     3e2:	90 40       	sbci	r25, 0x00	; 0
     3e4:	e1 f7       	brne	.-8      	; 0x3de <main+0x26>
     3e6:	00 c0       	rjmp	.+0      	; 0x3e8 <main+0x30>
     3e8:	00 c0       	rjmp	.+0      	; 0x3ea <main+0x32>
     3ea:	f4 cf       	rjmp	.-24     	; 0x3d4 <main+0x1c>

000003ec <JOYSTICK_calibrate>:
	
	JOYSTICK_calibrate();
}

void JOYSTICK_calibrate() {
	mid_x = ADC_read(JOY_X);
     3ec:	84 e0       	ldi	r24, 0x04	; 4
     3ee:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <ADC_read>
     3f2:	80 93 67 02 	sts	0x0267, r24
	mid_y = ADC_read(JOY_Y);
     3f6:	85 e0       	ldi	r24, 0x05	; 5
     3f8:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <ADC_read>
     3fc:	80 93 66 02 	sts	0x0266, r24
     400:	08 95       	ret

00000402 <JOYSTICK_init>:
#include "adc.h"
#include <avr/io.h>
#include <avr/interrupt.h>

void JOYSTICK_init() {
	PORTB |= (1 << PB0); //Enable pullup
     402:	c0 9a       	sbi	0x18, 0	; 24
	GICR |= (1 << INTF2);
     404:	8b b7       	in	r24, 0x3b	; 59
     406:	80 62       	ori	r24, 0x20	; 32
     408:	8b bf       	out	0x3b, r24	; 59
	sei();
     40a:	78 94       	sei
	
	JOYSTICK_calibrate();
     40c:	0e 94 f6 01 	call	0x3ec	; 0x3ec <JOYSTICK_calibrate>
     410:	08 95       	ret

00000412 <JOYSTICK_get_position>:
	mid_y = ADC_read(JOY_Y);
	
	// printf("midx: %d, midy: %d\n", mid_x, mid_y); // Typical 151, 151
}

int8_t JOYSTICK_get_position(JOYSTICK_control axis) {
     412:	cf 93       	push	r28
     414:	c8 2f       	mov	r28, r24
	
	uint8_t mid;
	
	uint8_t pos = ADC_read(axis);
     416:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <ADC_read>
	
	// printf("pos: %d\n", pos);
	
	if (axis) {
     41a:	cc 23       	and	r28, r28
     41c:	19 f0       	breq	.+6      	; 0x424 <JOYSTICK_get_position+0x12>
		mid = mid_x;
     41e:	20 91 67 02 	lds	r18, 0x0267
     422:	02 c0       	rjmp	.+4      	; 0x428 <JOYSTICK_get_position+0x16>
	} else {
		mid = mid_y;
     424:	20 91 66 02 	lds	r18, 0x0266
	}
	
	if (pos > mid) {
     428:	28 17       	cp	r18, r24
     42a:	98 f4       	brcc	.+38     	; 0x452 <JOYSTICK_get_position+0x40>
		return 100*(pos - mid)/(255 - mid);
     42c:	30 e0       	ldi	r19, 0x00	; 0
     42e:	48 2f       	mov	r20, r24
     430:	50 e0       	ldi	r21, 0x00	; 0
     432:	42 1b       	sub	r20, r18
     434:	53 0b       	sbc	r21, r19
     436:	64 e6       	ldi	r22, 0x64	; 100
     438:	64 9f       	mul	r22, r20
     43a:	c0 01       	movw	r24, r0
     43c:	65 9f       	mul	r22, r21
     43e:	90 0d       	add	r25, r0
     440:	11 24       	eor	r1, r1
     442:	6f ef       	ldi	r22, 0xFF	; 255
     444:	70 e0       	ldi	r23, 0x00	; 0
     446:	62 1b       	sub	r22, r18
     448:	73 0b       	sbc	r23, r19
     44a:	0e 94 15 06 	call	0xc2a	; 0xc2a <__divmodhi4>
     44e:	86 2f       	mov	r24, r22
     450:	13 c0       	rjmp	.+38     	; 0x478 <JOYSTICK_get_position+0x66>
	} 
	if (pos < mid) {
     452:	82 17       	cp	r24, r18
     454:	80 f4       	brcc	.+32     	; 0x476 <JOYSTICK_get_position+0x64>
		return 100*(pos - mid)/mid;
     456:	62 2f       	mov	r22, r18
     458:	70 e0       	ldi	r23, 0x00	; 0
     45a:	48 2f       	mov	r20, r24
     45c:	50 e0       	ldi	r21, 0x00	; 0
     45e:	46 1b       	sub	r20, r22
     460:	57 0b       	sbc	r21, r23
     462:	24 e6       	ldi	r18, 0x64	; 100
     464:	24 9f       	mul	r18, r20
     466:	c0 01       	movw	r24, r0
     468:	25 9f       	mul	r18, r21
     46a:	90 0d       	add	r25, r0
     46c:	11 24       	eor	r1, r1
     46e:	0e 94 15 06 	call	0xc2a	; 0xc2a <__divmodhi4>
     472:	86 2f       	mov	r24, r22
     474:	01 c0       	rjmp	.+2      	; 0x478 <JOYSTICK_get_position+0x66>
	}
	
	return 0;
     476:	80 e0       	ldi	r24, 0x00	; 0
}
     478:	cf 91       	pop	r28
     47a:	08 95       	ret

0000047c <JOYSTICK_get_direction>:

JOYSTICK_control JOYSTICK_get_direction() {
     47c:	cf 93       	push	r28
	* runs very slow! Maybe it's just the printf func?
	*/
	
	int8_t x_percent, y_percent;
	
	x_percent = JOYSTICK_get_position(JOY_X);
     47e:	84 e0       	ldi	r24, 0x04	; 4
     480:	0e 94 09 02 	call	0x412	; 0x412 <JOYSTICK_get_position>
     484:	c8 2f       	mov	r28, r24
	y_percent = JOYSTICK_get_position(JOY_Y);
     486:	85 e0       	ldi	r24, 0x05	; 5
     488:	0e 94 09 02 	call	0x412	; 0x412 <JOYSTICK_get_position>
	
	// printf("xpercent: %d, ypercent: %d\n", x_percent, y_percent);
	
	// Button
	if (!((1 << PB0) & PINB)) {
     48c:	b0 99       	sbic	0x16, 0	; 22
     48e:	05 c0       	rjmp	.+10     	; 0x49a <JOYSTICK_get_direction+0x1e>
		GIFR |= (1 << INTF2);
     490:	8a b7       	in	r24, 0x3a	; 58
     492:	80 62       	ori	r24, 0x20	; 32
     494:	8a bf       	out	0x3a, r24	; 58
		return BTN_DOWN;
     496:	85 e0       	ldi	r24, 0x05	; 5
     498:	11 c0       	rjmp	.+34     	; 0x4bc <JOYSTICK_get_direction+0x40>
	}
	if (x_percent < -50) {
     49a:	ce 3c       	cpi	r28, 0xCE	; 206
     49c:	44 f0       	brlt	.+16     	; 0x4ae <JOYSTICK_get_direction+0x32>
		return LEFT;
	}
	if (x_percent > 50) {
     49e:	c3 33       	cpi	r28, 0x33	; 51
     4a0:	44 f4       	brge	.+16     	; 0x4b2 <JOYSTICK_get_direction+0x36>
		return RIGHT;
	}
	if (y_percent < -50) {
     4a2:	8e 3c       	cpi	r24, 0xCE	; 206
     4a4:	44 f0       	brlt	.+16     	; 0x4b6 <JOYSTICK_get_direction+0x3a>
		return UP;
	}
	if (y_percent > 50) {
     4a6:	83 33       	cpi	r24, 0x33	; 51
     4a8:	44 f0       	brlt	.+16     	; 0x4ba <JOYSTICK_get_direction+0x3e>
		return DOWN;
     4aa:	83 e0       	ldi	r24, 0x03	; 3
     4ac:	07 c0       	rjmp	.+14     	; 0x4bc <JOYSTICK_get_direction+0x40>
	if (!((1 << PB0) & PINB)) {
		GIFR |= (1 << INTF2);
		return BTN_DOWN;
	}
	if (x_percent < -50) {
		return LEFT;
     4ae:	80 e0       	ldi	r24, 0x00	; 0
     4b0:	05 c0       	rjmp	.+10     	; 0x4bc <JOYSTICK_get_direction+0x40>
	}
	if (x_percent > 50) {
		return RIGHT;
     4b2:	81 e0       	ldi	r24, 0x01	; 1
     4b4:	03 c0       	rjmp	.+6      	; 0x4bc <JOYSTICK_get_direction+0x40>
	}
	if (y_percent < -50) {
		return UP;
     4b6:	82 e0       	ldi	r24, 0x02	; 2
     4b8:	01 c0       	rjmp	.+2      	; 0x4bc <JOYSTICK_get_direction+0x40>
	}
	if (y_percent > 50) {
		return DOWN;
	}	

	return NEUTRAL;
     4ba:	84 e0       	ldi	r24, 0x04	; 4
}
     4bc:	cf 91       	pop	r28
     4be:	08 95       	ret

000004c0 <SLIDER_init>:

void SLIDER_init() {
	// Enable interrupt request on rising edge for INTO & INT1
	// CAUTION: MCUCR is used to enable EXTERNAL SRAM as well
	MCUCR |= (1 << ISC00) | (1 << ISC01) | (1 << ISC10) | (1 << ISC11);
     4c0:	85 b7       	in	r24, 0x35	; 53
     4c2:	8f 60       	ori	r24, 0x0F	; 15
     4c4:	85 bf       	out	0x35, r24	; 53
	GICR |= (1 << INT0) | (1 << INT1);
     4c6:	8b b7       	in	r24, 0x3b	; 59
     4c8:	80 6c       	ori	r24, 0xC0	; 192
     4ca:	8b bf       	out	0x3b, r24	; 59
	sei();
     4cc:	78 94       	sei
     4ce:	08 95       	ret

000004d0 <__vector_1>:
	
	return position;
}

// Execute when Right button is pressed
ISR (INT0_vect) {
     4d0:	1f 92       	push	r1
     4d2:	0f 92       	push	r0
     4d4:	0f b6       	in	r0, 0x3f	; 63
     4d6:	0f 92       	push	r0
     4d8:	11 24       	eor	r1, r1
     4da:	2f 93       	push	r18
     4dc:	3f 93       	push	r19
     4de:	4f 93       	push	r20
     4e0:	5f 93       	push	r21
     4e2:	6f 93       	push	r22
     4e4:	7f 93       	push	r23
     4e6:	8f 93       	push	r24
     4e8:	9f 93       	push	r25
     4ea:	af 93       	push	r26
     4ec:	bf 93       	push	r27
     4ee:	ef 93       	push	r30
     4f0:	ff 93       	push	r31
	printf("btnR\n");
     4f2:	8b e0       	ldi	r24, 0x0B	; 11
     4f4:	91 e0       	ldi	r25, 0x01	; 1
     4f6:	0e 94 9c 06 	call	0xd38	; 0xd38 <puts>
}
     4fa:	ff 91       	pop	r31
     4fc:	ef 91       	pop	r30
     4fe:	bf 91       	pop	r27
     500:	af 91       	pop	r26
     502:	9f 91       	pop	r25
     504:	8f 91       	pop	r24
     506:	7f 91       	pop	r23
     508:	6f 91       	pop	r22
     50a:	5f 91       	pop	r21
     50c:	4f 91       	pop	r20
     50e:	3f 91       	pop	r19
     510:	2f 91       	pop	r18
     512:	0f 90       	pop	r0
     514:	0f be       	out	0x3f, r0	; 63
     516:	0f 90       	pop	r0
     518:	1f 90       	pop	r1
     51a:	18 95       	reti

0000051c <__vector_2>:

// Execute when Left button is pressed
ISR (INT1_vect) {
     51c:	1f 92       	push	r1
     51e:	0f 92       	push	r0
     520:	0f b6       	in	r0, 0x3f	; 63
     522:	0f 92       	push	r0
     524:	11 24       	eor	r1, r1
     526:	2f 93       	push	r18
     528:	3f 93       	push	r19
     52a:	4f 93       	push	r20
     52c:	5f 93       	push	r21
     52e:	6f 93       	push	r22
     530:	7f 93       	push	r23
     532:	8f 93       	push	r24
     534:	9f 93       	push	r25
     536:	af 93       	push	r26
     538:	bf 93       	push	r27
     53a:	ef 93       	push	r30
     53c:	ff 93       	push	r31
	printf("btnL\n");
     53e:	80 e1       	ldi	r24, 0x10	; 16
     540:	91 e0       	ldi	r25, 0x01	; 1
     542:	0e 94 9c 06 	call	0xd38	; 0xd38 <puts>
     546:	ff 91       	pop	r31
     548:	ef 91       	pop	r30
     54a:	bf 91       	pop	r27
     54c:	af 91       	pop	r26
     54e:	9f 91       	pop	r25
     550:	8f 91       	pop	r24
     552:	7f 91       	pop	r23
     554:	6f 91       	pop	r22
     556:	5f 91       	pop	r21
     558:	4f 91       	pop	r20
     55a:	3f 91       	pop	r19
     55c:	2f 91       	pop	r18
     55e:	0f 90       	pop	r0
     560:	0f be       	out	0x3f, r0	; 63
     562:	0f 90       	pop	r0
     564:	1f 90       	pop	r1
     566:	18 95       	reti

00000568 <MENU_select>:
	}
}

void MENU_select(MENU_options option) {
	
	switch(option) {
     568:	81 30       	cpi	r24, 0x01	; 1
     56a:	49 f0       	breq	.+18     	; 0x57e <MENU_select+0x16>
     56c:	18 f0       	brcs	.+6      	; 0x574 <MENU_select+0xc>
     56e:	82 30       	cpi	r24, 0x02	; 2
     570:	59 f0       	breq	.+22     	; 0x588 <MENU_select+0x20>
     572:	08 95       	ret
		case PLAY:
		OLED_scroll_right(PLAY+3,PLAY+3);
     574:	63 e0       	ldi	r22, 0x03	; 3
     576:	83 e0       	ldi	r24, 0x03	; 3
     578:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <OLED_scroll_right>
		break;
     57c:	08 95       	ret
		case OPTIONS:
		OLED_scroll_right(OPTIONS+3,OPTIONS+3);
     57e:	64 e0       	ldi	r22, 0x04	; 4
     580:	84 e0       	ldi	r24, 0x04	; 4
     582:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <OLED_scroll_right>
		break;
     586:	08 95       	ret
		case INFO:
		OLED_scroll_right(INFO+3,INFO+3);
     588:	65 e0       	ldi	r22, 0x05	; 5
     58a:	85 e0       	ldi	r24, 0x05	; 5
     58c:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <OLED_scroll_right>
     590:	08 95       	ret

00000592 <MENU_draw_menu>:

void MENU_draw_menu() {
	
	uint8_t align = 36;
	
	OLED_clear();
     592:	0e 94 89 04 	call	0x912	; 0x912 <OLED_clear>
	
	OLED_set_pages(1,1);
     596:	61 e0       	ldi	r22, 0x01	; 1
     598:	81 e0       	ldi	r24, 0x01	; 1
     59a:	0e 94 be 04 	call	0x97c	; 0x97c <OLED_set_pages>
	OLED_set_columns(64-16,127);
     59e:	6f e7       	ldi	r22, 0x7F	; 127
     5a0:	80 e3       	ldi	r24, 0x30	; 48
     5a2:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <OLED_set_columns>
	OLED_write_string("MENU");
     5a6:	85 e1       	ldi	r24, 0x15	; 21
     5a8:	91 e0       	ldi	r25, 0x01	; 1
     5aa:	0e 94 66 05 	call	0xacc	; 0xacc <OLED_write_string>
	
	OLED_set_pages(3,3);
     5ae:	63 e0       	ldi	r22, 0x03	; 3
     5b0:	83 e0       	ldi	r24, 0x03	; 3
     5b2:	0e 94 be 04 	call	0x97c	; 0x97c <OLED_set_pages>
	OLED_set_columns(align,127);
     5b6:	6f e7       	ldi	r22, 0x7F	; 127
     5b8:	84 e2       	ldi	r24, 0x24	; 36
     5ba:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <OLED_set_columns>
	OLED_write_string("PLAY");
     5be:	8a e1       	ldi	r24, 0x1A	; 26
     5c0:	91 e0       	ldi	r25, 0x01	; 1
     5c2:	0e 94 66 05 	call	0xacc	; 0xacc <OLED_write_string>
	OLED_scroll_right(3,3);
     5c6:	63 e0       	ldi	r22, 0x03	; 3
     5c8:	83 e0       	ldi	r24, 0x03	; 3
     5ca:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <OLED_scroll_right>
	
	OLED_set_pages(4,4);
     5ce:	64 e0       	ldi	r22, 0x04	; 4
     5d0:	84 e0       	ldi	r24, 0x04	; 4
     5d2:	0e 94 be 04 	call	0x97c	; 0x97c <OLED_set_pages>
	OLED_set_columns(align,127);
     5d6:	6f e7       	ldi	r22, 0x7F	; 127
     5d8:	84 e2       	ldi	r24, 0x24	; 36
     5da:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <OLED_set_columns>
	OLED_write_string("OPTIONS");
     5de:	8f e1       	ldi	r24, 0x1F	; 31
     5e0:	91 e0       	ldi	r25, 0x01	; 1
     5e2:	0e 94 66 05 	call	0xacc	; 0xacc <OLED_write_string>
	
	OLED_set_pages(5,5);
     5e6:	65 e0       	ldi	r22, 0x05	; 5
     5e8:	85 e0       	ldi	r24, 0x05	; 5
     5ea:	0e 94 be 04 	call	0x97c	; 0x97c <OLED_set_pages>
	OLED_set_columns(align,127);
     5ee:	6f e7       	ldi	r22, 0x7F	; 127
     5f0:	84 e2       	ldi	r24, 0x24	; 36
     5f2:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <OLED_set_columns>
	OLED_write_string("INFO");
     5f6:	87 e2       	ldi	r24, 0x27	; 39
     5f8:	91 e0       	ldi	r25, 0x01	; 1
     5fa:	0e 94 66 05 	call	0xacc	; 0xacc <OLED_write_string>
     5fe:	08 95       	ret

00000600 <MENU_draw_play>:
	
}

void MENU_draw_play() {
	
	OLED_clear();
     600:	0e 94 89 04 	call	0x912	; 0x912 <OLED_clear>
	
	OLED_set_pages(3,3);
     604:	63 e0       	ldi	r22, 0x03	; 3
     606:	83 e0       	ldi	r24, 0x03	; 3
     608:	0e 94 be 04 	call	0x97c	; 0x97c <OLED_set_pages>
	OLED_set_columns(64-40,127);
     60c:	6f e7       	ldi	r22, 0x7F	; 127
     60e:	88 e1       	ldi	r24, 0x18	; 24
     610:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <OLED_set_columns>
	OLED_write_string("PLAYING...");
     614:	8c e2       	ldi	r24, 0x2C	; 44
     616:	91 e0       	ldi	r25, 0x01	; 1
     618:	0e 94 66 05 	call	0xacc	; 0xacc <OLED_write_string>
     61c:	08 95       	ret

0000061e <MENU_draw_options>:
}

void MENU_draw_options() {
	
	OLED_clear();
     61e:	0e 94 89 04 	call	0x912	; 0x912 <OLED_clear>
	
	OLED_set_pages(3,3);
     622:	63 e0       	ldi	r22, 0x03	; 3
     624:	83 e0       	ldi	r24, 0x03	; 3
     626:	0e 94 be 04 	call	0x97c	; 0x97c <OLED_set_pages>
	OLED_set_columns(64-48,127);
     62a:	6f e7       	ldi	r22, 0x7F	; 127
     62c:	80 e1       	ldi	r24, 0x10	; 16
     62e:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <OLED_set_columns>
	OLED_write_string("There are no");
     632:	87 e3       	ldi	r24, 0x37	; 55
     634:	91 e0       	ldi	r25, 0x01	; 1
     636:	0e 94 66 05 	call	0xacc	; 0xacc <OLED_write_string>
	OLED_set_pages(4,4);
     63a:	64 e0       	ldi	r22, 0x04	; 4
     63c:	84 e0       	ldi	r24, 0x04	; 4
     63e:	0e 94 be 04 	call	0x97c	; 0x97c <OLED_set_pages>
	OLED_set_columns(64-56,127);
     642:	6f e7       	ldi	r22, 0x7F	; 127
     644:	88 e0       	ldi	r24, 0x08	; 8
     646:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <OLED_set_columns>
	OLED_write_string("options at the");
     64a:	84 e4       	ldi	r24, 0x44	; 68
     64c:	91 e0       	ldi	r25, 0x01	; 1
     64e:	0e 94 66 05 	call	0xacc	; 0xacc <OLED_write_string>
	OLED_set_pages(5,5);
     652:	65 e0       	ldi	r22, 0x05	; 5
     654:	85 e0       	ldi	r24, 0x05	; 5
     656:	0e 94 be 04 	call	0x97c	; 0x97c <OLED_set_pages>
	OLED_set_columns(64-24,127);
     65a:	6f e7       	ldi	r22, 0x7F	; 127
     65c:	88 e2       	ldi	r24, 0x28	; 40
     65e:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <OLED_set_columns>
	OLED_write_string("moment");
     662:	83 e5       	ldi	r24, 0x53	; 83
     664:	91 e0       	ldi	r25, 0x01	; 1
     666:	0e 94 66 05 	call	0xacc	; 0xacc <OLED_write_string>
     66a:	08 95       	ret

0000066c <MENU_draw_info>:

void MENU_draw_info() {
	
	uint8_t align = 36;
	
	OLED_clear();
     66c:	0e 94 89 04 	call	0x912	; 0x912 <OLED_clear>
	
	OLED_set_pages(2,2);
     670:	62 e0       	ldi	r22, 0x02	; 2
     672:	82 e0       	ldi	r24, 0x02	; 2
     674:	0e 94 be 04 	call	0x97c	; 0x97c <OLED_set_pages>
	OLED_set_columns(align,127);
     678:	6f e7       	ldi	r22, 0x7F	; 127
     67a:	84 e2       	ldi	r24, 0x24	; 36
     67c:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <OLED_set_columns>
	OLED_write_string("Made by:");
     680:	8a e5       	ldi	r24, 0x5A	; 90
     682:	91 e0       	ldi	r25, 0x01	; 1
     684:	0e 94 66 05 	call	0xacc	; 0xacc <OLED_write_string>
	OLED_set_pages(4,4);
     688:	64 e0       	ldi	r22, 0x04	; 4
     68a:	84 e0       	ldi	r24, 0x04	; 4
     68c:	0e 94 be 04 	call	0x97c	; 0x97c <OLED_set_pages>
	OLED_set_columns(64-64,127);
     690:	6f e7       	ldi	r22, 0x7F	; 127
     692:	80 e0       	ldi	r24, 0x00	; 0
     694:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <OLED_set_columns>
	OLED_write_string("Christoffer RE &");
     698:	83 e6       	ldi	r24, 0x63	; 99
     69a:	91 e0       	ldi	r25, 0x01	; 1
     69c:	0e 94 66 05 	call	0xacc	; 0xacc <OLED_write_string>
	OLED_set_pages(5,5);
     6a0:	65 e0       	ldi	r22, 0x05	; 5
     6a2:	85 e0       	ldi	r24, 0x05	; 5
     6a4:	0e 94 be 04 	call	0x97c	; 0x97c <OLED_set_pages>
	OLED_set_columns(64-32,127);
     6a8:	6f e7       	ldi	r22, 0x7F	; 127
     6aa:	80 e2       	ldi	r24, 0x20	; 32
     6ac:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <OLED_set_columns>
	OLED_write_string("Erlend H");
     6b0:	84 e7       	ldi	r24, 0x74	; 116
     6b2:	91 e0       	ldi	r25, 0x01	; 1
     6b4:	0e 94 66 05 	call	0xacc	; 0xacc <OLED_write_string>
     6b8:	08 95       	ret

000006ba <MENU_draw>:
}

void MENU_draw() {
	
	switch (state) {
     6ba:	80 91 06 01 	lds	r24, 0x0106
     6be:	81 30       	cpi	r24, 0x01	; 1
     6c0:	59 f0       	breq	.+22     	; 0x6d8 <MENU_draw+0x1e>
     6c2:	38 f0       	brcs	.+14     	; 0x6d2 <MENU_draw+0x18>
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	59 f0       	breq	.+22     	; 0x6de <MENU_draw+0x24>
     6c8:	83 30       	cpi	r24, 0x03	; 3
     6ca:	59 f4       	brne	.+22     	; 0x6e2 <MENU_draw+0x28>
		case MENU:
			MENU_draw_menu();
     6cc:	0e 94 c9 02 	call	0x592	; 0x592 <MENU_draw_menu>
			break;
     6d0:	08 95       	ret
		case PLAY:
			MENU_draw_play();
     6d2:	0e 94 00 03 	call	0x600	; 0x600 <MENU_draw_play>
			break;
     6d6:	08 95       	ret
		case OPTIONS:
			MENU_draw_options();
     6d8:	0e 94 0f 03 	call	0x61e	; 0x61e <MENU_draw_options>
			break;
     6dc:	08 95       	ret
		case INFO:
			MENU_draw_info();
     6de:	0e 94 36 03 	call	0x66c	; 0x66c <MENU_draw_info>
     6e2:	08 95       	ret

000006e4 <MENU_root>:
#include <stdlib.h>
#include <util/delay.h>

MENU_options state = MENU;

void MENU_root() {
     6e4:	cf 93       	push	r28
     6e6:	2f ef       	ldi	r18, 0xFF	; 255
     6e8:	8f e7       	ldi	r24, 0x7F	; 127
     6ea:	91 e0       	ldi	r25, 0x01	; 1
     6ec:	21 50       	subi	r18, 0x01	; 1
     6ee:	80 40       	sbci	r24, 0x00	; 0
     6f0:	90 40       	sbci	r25, 0x00	; 0
     6f2:	e1 f7       	brne	.-8      	; 0x6ec <MENU_root+0x8>
     6f4:	00 c0       	rjmp	.+0      	; 0x6f6 <MENU_root+0x12>
     6f6:	00 c0       	rjmp	.+0      	; 0x6f8 <MENU_root+0x14>
	_delay_ms(100);
	
	static MENU_options option = PLAY;	
	static MENU_options previous_option = PLAY;	
	
	JOYSTICK_control direction = JOYSTICK_get_direction();
     6f8:	0e 94 3e 02 	call	0x47c	; 0x47c <JOYSTICK_get_direction>
     6fc:	c8 2f       	mov	r28, r24
	
	if (direction == UP) {
     6fe:	82 30       	cpi	r24, 0x02	; 2
     700:	f9 f4       	brne	.+62     	; 0x740 <MENU_root+0x5c>
		previous_option = option;
     702:	20 91 65 02 	lds	r18, 0x0265
     706:	20 93 64 02 	sts	0x0264, r18
		option = (option + 1) % (N_OPTIONS);
     70a:	30 e0       	ldi	r19, 0x00	; 0
     70c:	c9 01       	movw	r24, r18
     70e:	01 96       	adiw	r24, 0x01	; 1
     710:	63 e0       	ldi	r22, 0x03	; 3
     712:	70 e0       	ldi	r23, 0x00	; 0
     714:	0e 94 15 06 	call	0xc2a	; 0xc2a <__divmodhi4>
     718:	80 93 65 02 	sts	0x0265, r24
		MENU_select(option);
     71c:	0e 94 b4 02 	call	0x568	; 0x568 <MENU_select>
		OLED_scroll_left(previous_option+3, previous_option+3);
     720:	80 91 64 02 	lds	r24, 0x0264
     724:	8d 5f       	subi	r24, 0xFD	; 253
     726:	68 2f       	mov	r22, r24
     728:	0e 94 24 05 	call	0xa48	; 0xa48 <OLED_scroll_left>
     72c:	2f ef       	ldi	r18, 0xFF	; 255
     72e:	8f e7       	ldi	r24, 0x7F	; 127
     730:	97 e0       	ldi	r25, 0x07	; 7
     732:	21 50       	subi	r18, 0x01	; 1
     734:	80 40       	sbci	r24, 0x00	; 0
     736:	90 40       	sbci	r25, 0x00	; 0
     738:	e1 f7       	brne	.-8      	; 0x732 <MENU_root+0x4e>
     73a:	00 c0       	rjmp	.+0      	; 0x73c <MENU_root+0x58>
     73c:	00 00       	nop
     73e:	29 c0       	rjmp	.+82     	; 0x792 <MENU_root+0xae>
		_delay_ms(500);
	}
	if (direction == DOWN) {
     740:	83 30       	cpi	r24, 0x03	; 3
     742:	f1 f4       	brne	.+60     	; 0x780 <MENU_root+0x9c>
		previous_option = option;
     744:	80 91 65 02 	lds	r24, 0x0265
     748:	80 93 64 02 	sts	0x0264, r24
		option = ((option - 1) + N_OPTIONS) % N_OPTIONS;
     74c:	90 e0       	ldi	r25, 0x00	; 0
     74e:	02 96       	adiw	r24, 0x02	; 2
     750:	63 e0       	ldi	r22, 0x03	; 3
     752:	70 e0       	ldi	r23, 0x00	; 0
     754:	0e 94 15 06 	call	0xc2a	; 0xc2a <__divmodhi4>
     758:	80 93 65 02 	sts	0x0265, r24
		MENU_select(option);
     75c:	0e 94 b4 02 	call	0x568	; 0x568 <MENU_select>
		OLED_scroll_left(previous_option+3, previous_option+3);
     760:	80 91 64 02 	lds	r24, 0x0264
     764:	8d 5f       	subi	r24, 0xFD	; 253
     766:	68 2f       	mov	r22, r24
     768:	0e 94 24 05 	call	0xa48	; 0xa48 <OLED_scroll_left>
     76c:	2f ef       	ldi	r18, 0xFF	; 255
     76e:	8f e7       	ldi	r24, 0x7F	; 127
     770:	97 e0       	ldi	r25, 0x07	; 7
     772:	21 50       	subi	r18, 0x01	; 1
     774:	80 40       	sbci	r24, 0x00	; 0
     776:	90 40       	sbci	r25, 0x00	; 0
     778:	e1 f7       	brne	.-8      	; 0x772 <MENU_root+0x8e>
     77a:	00 c0       	rjmp	.+0      	; 0x77c <MENU_root+0x98>
     77c:	00 00       	nop
     77e:	14 c0       	rjmp	.+40     	; 0x7a8 <MENU_root+0xc4>
		_delay_ms(500);
	}
	if (direction == RIGHT) {
     780:	81 30       	cpi	r24, 0x01	; 1
     782:	39 f4       	brne	.+14     	; 0x792 <MENU_root+0xae>
		state = option;
     784:	80 91 65 02 	lds	r24, 0x0265
     788:	80 93 06 01 	sts	0x0106, r24
		MENU_draw();
     78c:	0e 94 5d 03 	call	0x6ba	; 0x6ba <MENU_draw>
     790:	0b c0       	rjmp	.+22     	; 0x7a8 <MENU_root+0xc4>
	}
	if (direction == BTN_DOWN) {
     792:	c5 30       	cpi	r28, 0x05	; 5
     794:	49 f4       	brne	.+18     	; 0x7a8 <MENU_root+0xc4>
		state = MENU;
     796:	83 e0       	ldi	r24, 0x03	; 3
     798:	80 93 06 01 	sts	0x0106, r24
		option = PLAY;
     79c:	10 92 65 02 	sts	0x0265, r1
		previous_option = PLAY;
     7a0:	10 92 64 02 	sts	0x0264, r1
		MENU_draw();
     7a4:	0e 94 5d 03 	call	0x6ba	; 0x6ba <MENU_draw>
	}
}
     7a8:	cf 91       	pop	r28
     7aa:	08 95       	ret

000007ac <OLED_init>:

volatile char *command = (char *) 0x1000;
volatile char *data = (char *) 0x1200;

void OLED_init() {
	*command = 0xae; // display off
     7ac:	e0 91 09 01 	lds	r30, 0x0109
     7b0:	f0 91 0a 01 	lds	r31, 0x010A
     7b4:	8e ea       	ldi	r24, 0xAE	; 174
     7b6:	80 83       	st	Z, r24
	*command = 0xa1; //segment remap
     7b8:	e0 91 09 01 	lds	r30, 0x0109
     7bc:	f0 91 0a 01 	lds	r31, 0x010A
     7c0:	81 ea       	ldi	r24, 0xA1	; 161
     7c2:	80 83       	st	Z, r24
	*command = 0xda; //common pads hardware: alternative
     7c4:	e0 91 09 01 	lds	r30, 0x0109
     7c8:	f0 91 0a 01 	lds	r31, 0x010A
     7cc:	8a ed       	ldi	r24, 0xDA	; 218
     7ce:	80 83       	st	Z, r24
	*command = 0x12;
     7d0:	e0 91 09 01 	lds	r30, 0x0109
     7d4:	f0 91 0a 01 	lds	r31, 0x010A
     7d8:	82 e1       	ldi	r24, 0x12	; 18
     7da:	80 83       	st	Z, r24
	*command = 0xc8; //commonoutput scan direction:com63~com0
     7dc:	e0 91 09 01 	lds	r30, 0x0109
     7e0:	f0 91 0a 01 	lds	r31, 0x010A
     7e4:	88 ec       	ldi	r24, 0xC8	; 200
     7e6:	80 83       	st	Z, r24
	*command = 0xa8; //multiplex ration mode:63
     7e8:	e0 91 09 01 	lds	r30, 0x0109
     7ec:	f0 91 0a 01 	lds	r31, 0x010A
     7f0:	88 ea       	ldi	r24, 0xA8	; 168
     7f2:	80 83       	st	Z, r24
	*command = 0x3f;
     7f4:	e0 91 09 01 	lds	r30, 0x0109
     7f8:	f0 91 0a 01 	lds	r31, 0x010A
     7fc:	8f e3       	ldi	r24, 0x3F	; 63
     7fe:	80 83       	st	Z, r24
	*command = 0xd5; //display divide ratio/osc. freq. mode
     800:	e0 91 09 01 	lds	r30, 0x0109
     804:	f0 91 0a 01 	lds	r31, 0x010A
     808:	85 ed       	ldi	r24, 0xD5	; 213
     80a:	80 83       	st	Z, r24
	*command = 0x80;
     80c:	e0 91 09 01 	lds	r30, 0x0109
     810:	f0 91 0a 01 	lds	r31, 0x010A
     814:	80 e8       	ldi	r24, 0x80	; 128
     816:	80 83       	st	Z, r24
	*command = 0x81; //contrast control
     818:	e0 91 09 01 	lds	r30, 0x0109
     81c:	f0 91 0a 01 	lds	r31, 0x010A
     820:	81 e8       	ldi	r24, 0x81	; 129
     822:	80 83       	st	Z, r24
	*command = 0x50;
     824:	e0 91 09 01 	lds	r30, 0x0109
     828:	f0 91 0a 01 	lds	r31, 0x010A
     82c:	80 e5       	ldi	r24, 0x50	; 80
     82e:	80 83       	st	Z, r24
	*command = 0xd9; //set pre-charge period
     830:	e0 91 09 01 	lds	r30, 0x0109
     834:	f0 91 0a 01 	lds	r31, 0x010A
     838:	89 ed       	ldi	r24, 0xD9	; 217
     83a:	80 83       	st	Z, r24
	*command = 0x21;
     83c:	e0 91 09 01 	lds	r30, 0x0109
     840:	f0 91 0a 01 	lds	r31, 0x010A
     844:	81 e2       	ldi	r24, 0x21	; 33
     846:	80 83       	st	Z, r24
	*command = 0x20; //Set Memory Addressing Mode
     848:	e0 91 09 01 	lds	r30, 0x0109
     84c:	f0 91 0a 01 	lds	r31, 0x010A
     850:	80 e2       	ldi	r24, 0x20	; 32
     852:	80 83       	st	Z, r24
	*command = 0x02;
     854:	e0 91 09 01 	lds	r30, 0x0109
     858:	f0 91 0a 01 	lds	r31, 0x010A
     85c:	82 e0       	ldi	r24, 0x02	; 2
     85e:	80 83       	st	Z, r24
	*command = 0xdb; //VCOM deselect level mode
     860:	e0 91 09 01 	lds	r30, 0x0109
     864:	f0 91 0a 01 	lds	r31, 0x010A
     868:	8b ed       	ldi	r24, 0xDB	; 219
     86a:	80 83       	st	Z, r24
	*command = 0x30;
     86c:	e0 91 09 01 	lds	r30, 0x0109
     870:	f0 91 0a 01 	lds	r31, 0x010A
     874:	80 e3       	ldi	r24, 0x30	; 48
     876:	80 83       	st	Z, r24
	*command = 0xad; //master configuration
     878:	e0 91 09 01 	lds	r30, 0x0109
     87c:	f0 91 0a 01 	lds	r31, 0x010A
     880:	8d ea       	ldi	r24, 0xAD	; 173
     882:	80 83       	st	Z, r24
	*command = 0x00;
     884:	e0 91 09 01 	lds	r30, 0x0109
     888:	f0 91 0a 01 	lds	r31, 0x010A
     88c:	10 82       	st	Z, r1
	*command = 0xa4; //out follows RAM content
     88e:	e0 91 09 01 	lds	r30, 0x0109
     892:	f0 91 0a 01 	lds	r31, 0x010A
     896:	84 ea       	ldi	r24, 0xA4	; 164
     898:	80 83       	st	Z, r24
	*command = 0xa6; //set normal display
     89a:	e0 91 09 01 	lds	r30, 0x0109
     89e:	f0 91 0a 01 	lds	r31, 0x010A
     8a2:	86 ea       	ldi	r24, 0xA6	; 166
     8a4:	80 83       	st	Z, r24
	*command = 0xaf; // display on
     8a6:	e0 91 09 01 	lds	r30, 0x0109
     8aa:	f0 91 0a 01 	lds	r31, 0x010A
     8ae:	8f ea       	ldi	r24, 0xAF	; 175
     8b0:	80 83       	st	Z, r24
     8b2:	08 95       	ret

000008b4 <OLED_start>:
}

void OLED_start() {
	
	//Set memory addressing mode (page)
	*command = 0x20;
     8b4:	e0 91 09 01 	lds	r30, 0x0109
     8b8:	f0 91 0a 01 	lds	r31, 0x010A
     8bc:	80 e2       	ldi	r24, 0x20	; 32
     8be:	80 83       	st	Z, r24
	*command = 0x02;
     8c0:	e0 91 09 01 	lds	r30, 0x0109
     8c4:	f0 91 0a 01 	lds	r31, 0x010A
     8c8:	82 e0       	ldi	r24, 0x02	; 2
     8ca:	80 83       	st	Z, r24
	//*command = 0x0b);
	
	//Set column address
	*command = 0x21;
     8cc:	e0 91 09 01 	lds	r30, 0x0109
     8d0:	f0 91 0a 01 	lds	r31, 0x010A
     8d4:	81 e2       	ldi	r24, 0x21	; 33
     8d6:	80 83       	st	Z, r24
	*command = 0x00;
     8d8:	e0 91 09 01 	lds	r30, 0x0109
     8dc:	f0 91 0a 01 	lds	r31, 0x010A
     8e0:	10 82       	st	Z, r1
	*command = 0x7f;
     8e2:	e0 91 09 01 	lds	r30, 0x0109
     8e6:	f0 91 0a 01 	lds	r31, 0x010A
     8ea:	8f e7       	ldi	r24, 0x7F	; 127
     8ec:	80 83       	st	Z, r24
	
	//Set page address
	*command = 0x22;
     8ee:	e0 91 09 01 	lds	r30, 0x0109
     8f2:	f0 91 0a 01 	lds	r31, 0x010A
     8f6:	82 e2       	ldi	r24, 0x22	; 34
     8f8:	80 83       	st	Z, r24
	*command = 0x00;
     8fa:	e0 91 09 01 	lds	r30, 0x0109
     8fe:	f0 91 0a 01 	lds	r31, 0x010A
     902:	10 82       	st	Z, r1
	*command = 0x07;
     904:	e0 91 09 01 	lds	r30, 0x0109
     908:	f0 91 0a 01 	lds	r31, 0x010A
     90c:	87 e0       	ldi	r24, 0x07	; 7
     90e:	80 83       	st	Z, r24
     910:	08 95       	ret

00000912 <OLED_clear>:
	
}

void OLED_clear() {
     912:	cf 93       	push	r28
     914:	df 93       	push	r29
	
	*command = 0x40; // Set display start line 0 (to 63)
     916:	e0 91 09 01 	lds	r30, 0x0109
     91a:	f0 91 0a 01 	lds	r31, 0x010A
     91e:	80 e4       	ldi	r24, 0x40	; 64
     920:	80 83       	st	Z, r24
	
	char start; // Set page start address of target display location
	
	for (uint8_t i = 0; i < 8; i++) {
     922:	c0 e0       	ldi	r28, 0x00	; 0
		OLED_start();
		start = 0xB0 | i;
		*command = start;
		for (uint8_t j = 0; j < 128; j++) {
     924:	d0 e0       	ldi	r29, 0x00	; 0
	*command = 0x40; // Set display start line 0 (to 63)
	
	char start; // Set page start address of target display location
	
	for (uint8_t i = 0; i < 8; i++) {
		OLED_start();
     926:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <OLED_start>
		start = 0xB0 | i;
		*command = start;
     92a:	e0 91 09 01 	lds	r30, 0x0109
     92e:	f0 91 0a 01 	lds	r31, 0x010A
     932:	8c 2f       	mov	r24, r28
     934:	80 6b       	ori	r24, 0xB0	; 176
     936:	80 83       	st	Z, r24
		for (uint8_t j = 0; j < 128; j++) {
     938:	8d 2f       	mov	r24, r29
			*data = 0x00;
     93a:	e0 91 07 01 	lds	r30, 0x0107
     93e:	f0 91 08 01 	lds	r31, 0x0108
     942:	10 82       	st	Z, r1
	
	for (uint8_t i = 0; i < 8; i++) {
		OLED_start();
		start = 0xB0 | i;
		*command = start;
		for (uint8_t j = 0; j < 128; j++) {
     944:	8f 5f       	subi	r24, 0xFF	; 255
     946:	80 38       	cpi	r24, 0x80	; 128
     948:	c1 f7       	brne	.-16     	; 0x93a <OLED_clear+0x28>
	
	*command = 0x40; // Set display start line 0 (to 63)
	
	char start; // Set page start address of target display location
	
	for (uint8_t i = 0; i < 8; i++) {
     94a:	cf 5f       	subi	r28, 0xFF	; 255
     94c:	c8 30       	cpi	r28, 0x08	; 8
     94e:	59 f7       	brne	.-42     	; 0x926 <OLED_clear+0x14>
		*command = start;
		for (uint8_t j = 0; j < 128; j++) {
			*data = 0x00;
		}
	}
}
     950:	df 91       	pop	r29
     952:	cf 91       	pop	r28
     954:	08 95       	ret

00000956 <OLED_write_char>:


void OLED_write_char(uint8_t character) {
     956:	28 e0       	ldi	r18, 0x08	; 8
     958:	82 9f       	mul	r24, r18
     95a:	c0 01       	movw	r24, r0
     95c:	11 24       	eor	r1, r1
     95e:	fc 01       	movw	r30, r24
     960:	e0 59       	subi	r30, 0x90	; 144
     962:	f0 40       	sbci	r31, 0x00	; 0
	
	uint8_t i = 0;
	for (i = 0; i < 8; i++) {
     964:	80 e0       	ldi	r24, 0x00	; 0
		*data = pgm_read_byte(&font8[character-32][i]);
     966:	a0 91 07 01 	lds	r26, 0x0107
     96a:	b0 91 08 01 	lds	r27, 0x0108
     96e:	94 91       	lpm	r25, Z
     970:	9c 93       	st	X, r25


void OLED_write_char(uint8_t character) {
	
	uint8_t i = 0;
	for (i = 0; i < 8; i++) {
     972:	8f 5f       	subi	r24, 0xFF	; 255
     974:	31 96       	adiw	r30, 0x01	; 1
     976:	88 30       	cpi	r24, 0x08	; 8
     978:	b1 f7       	brne	.-20     	; 0x966 <OLED_write_char+0x10>
		*data = pgm_read_byte(&font8[character-32][i]);
	}
	
}
     97a:	08 95       	ret

0000097c <OLED_set_pages>:

void OLED_set_pages(uint8_t y0, uint8_t y1) {
	*command = 0x22;
     97c:	e0 91 09 01 	lds	r30, 0x0109
     980:	f0 91 0a 01 	lds	r31, 0x010A
     984:	92 e2       	ldi	r25, 0x22	; 34
     986:	90 83       	st	Z, r25
	*command = 0xB0 | y0;
     988:	e0 91 09 01 	lds	r30, 0x0109
     98c:	f0 91 0a 01 	lds	r31, 0x010A
     990:	80 6b       	ori	r24, 0xB0	; 176
     992:	80 83       	st	Z, r24
	*command = 0xB0 | y1;
     994:	e0 91 09 01 	lds	r30, 0x0109
     998:	f0 91 0a 01 	lds	r31, 0x010A
     99c:	60 6b       	ori	r22, 0xB0	; 176
     99e:	60 83       	st	Z, r22
     9a0:	08 95       	ret

000009a2 <OLED_set_columns>:
}

void OLED_set_columns(uint8_t x0, uint8_t x1) {
	*command = 0x21;
     9a2:	e0 91 09 01 	lds	r30, 0x0109
     9a6:	f0 91 0a 01 	lds	r31, 0x010A
     9aa:	91 e2       	ldi	r25, 0x21	; 33
     9ac:	90 83       	st	Z, r25
	*command = x0;
     9ae:	e0 91 09 01 	lds	r30, 0x0109
     9b2:	f0 91 0a 01 	lds	r31, 0x010A
     9b6:	80 83       	st	Z, r24
	*command = x1;
     9b8:	e0 91 09 01 	lds	r30, 0x0109
     9bc:	f0 91 0a 01 	lds	r31, 0x010A
     9c0:	60 83       	st	Z, r22
     9c2:	08 95       	ret

000009c4 <OLED_scroll_right>:
}

void OLED_scroll_right(uint8_t page_start,uint8_t page_stop) {
	*command = 0x2E; //Deactivate scroll
     9c4:	e0 91 09 01 	lds	r30, 0x0109
     9c8:	f0 91 0a 01 	lds	r31, 0x010A
     9cc:	9e e2       	ldi	r25, 0x2E	; 46
     9ce:	90 83       	st	Z, r25
	
	*command = 0x26; //Vertical scroll setup
     9d0:	e0 91 09 01 	lds	r30, 0x0109
     9d4:	f0 91 0a 01 	lds	r31, 0x010A
     9d8:	96 e2       	ldi	r25, 0x26	; 38
     9da:	90 83       	st	Z, r25
	*command = 0x00; //Dummy byte A
     9dc:	e0 91 09 01 	lds	r30, 0x0109
     9e0:	f0 91 0a 01 	lds	r31, 0x010A
     9e4:	10 82       	st	Z, r1
	*command = page_start; //Start: PAGE0
     9e6:	e0 91 09 01 	lds	r30, 0x0109
     9ea:	f0 91 0a 01 	lds	r31, 0x010A
     9ee:	80 83       	st	Z, r24
	*command = 0b100; //Speed
     9f0:	e0 91 09 01 	lds	r30, 0x0109
     9f4:	f0 91 0a 01 	lds	r31, 0x010A
     9f8:	84 e0       	ldi	r24, 0x04	; 4
     9fa:	80 83       	st	Z, r24
	*command = page_stop; //End: PAGE7
     9fc:	e0 91 09 01 	lds	r30, 0x0109
     a00:	f0 91 0a 01 	lds	r31, 0x010A
     a04:	60 83       	st	Z, r22
	*command = 0x00;
     a06:	e0 91 09 01 	lds	r30, 0x0109
     a0a:	f0 91 0a 01 	lds	r31, 0x010A
     a0e:	10 82       	st	Z, r1
	*command = 0xFF;
     a10:	e0 91 09 01 	lds	r30, 0x0109
     a14:	f0 91 0a 01 	lds	r31, 0x010A
     a18:	8f ef       	ldi	r24, 0xFF	; 255
     a1a:	80 83       	st	Z, r24
	
	*command = 0x2F; //Start scroll
     a1c:	e0 91 09 01 	lds	r30, 0x0109
     a20:	f0 91 0a 01 	lds	r31, 0x010A
     a24:	8f e2       	ldi	r24, 0x2F	; 47
     a26:	80 83       	st	Z, r24
     a28:	2f ef       	ldi	r18, 0xFF	; 255
     a2a:	8f e7       	ldi	r24, 0x7F	; 127
     a2c:	91 e0       	ldi	r25, 0x01	; 1
     a2e:	21 50       	subi	r18, 0x01	; 1
     a30:	80 40       	sbci	r24, 0x00	; 0
     a32:	90 40       	sbci	r25, 0x00	; 0
     a34:	e1 f7       	brne	.-8      	; 0xa2e <OLED_scroll_right+0x6a>
     a36:	00 c0       	rjmp	.+0      	; 0xa38 <OLED_scroll_right+0x74>
     a38:	00 c0       	rjmp	.+0      	; 0xa3a <OLED_scroll_right+0x76>
	_delay_ms(100);
	*command = 0x2E; //Deactivate scroll
     a3a:	e0 91 09 01 	lds	r30, 0x0109
     a3e:	f0 91 0a 01 	lds	r31, 0x010A
     a42:	8e e2       	ldi	r24, 0x2E	; 46
     a44:	80 83       	st	Z, r24
     a46:	08 95       	ret

00000a48 <OLED_scroll_left>:
}

void OLED_scroll_left(uint8_t page_start,uint8_t page_stop) {
	*command = 0x2E; //Deactivate scroll
     a48:	e0 91 09 01 	lds	r30, 0x0109
     a4c:	f0 91 0a 01 	lds	r31, 0x010A
     a50:	9e e2       	ldi	r25, 0x2E	; 46
     a52:	90 83       	st	Z, r25
	
	*command = 0x27; //Vertical scroll setup
     a54:	e0 91 09 01 	lds	r30, 0x0109
     a58:	f0 91 0a 01 	lds	r31, 0x010A
     a5c:	97 e2       	ldi	r25, 0x27	; 39
     a5e:	90 83       	st	Z, r25
	*command = 0x00; //Dummy byte A
     a60:	e0 91 09 01 	lds	r30, 0x0109
     a64:	f0 91 0a 01 	lds	r31, 0x010A
     a68:	10 82       	st	Z, r1
	*command = page_start; //Start: PAGE0
     a6a:	e0 91 09 01 	lds	r30, 0x0109
     a6e:	f0 91 0a 01 	lds	r31, 0x010A
     a72:	80 83       	st	Z, r24
	*command = 0b100; //Speed
     a74:	e0 91 09 01 	lds	r30, 0x0109
     a78:	f0 91 0a 01 	lds	r31, 0x010A
     a7c:	84 e0       	ldi	r24, 0x04	; 4
     a7e:	80 83       	st	Z, r24
	*command = page_stop; //End: PAGE7
     a80:	e0 91 09 01 	lds	r30, 0x0109
     a84:	f0 91 0a 01 	lds	r31, 0x010A
     a88:	60 83       	st	Z, r22
	*command = 0x00;
     a8a:	e0 91 09 01 	lds	r30, 0x0109
     a8e:	f0 91 0a 01 	lds	r31, 0x010A
     a92:	10 82       	st	Z, r1
	*command = 0xFF;
     a94:	e0 91 09 01 	lds	r30, 0x0109
     a98:	f0 91 0a 01 	lds	r31, 0x010A
     a9c:	8f ef       	ldi	r24, 0xFF	; 255
     a9e:	80 83       	st	Z, r24
	
	*command = 0x2F; //Start scroll
     aa0:	e0 91 09 01 	lds	r30, 0x0109
     aa4:	f0 91 0a 01 	lds	r31, 0x010A
     aa8:	8f e2       	ldi	r24, 0x2F	; 47
     aaa:	80 83       	st	Z, r24
     aac:	2f ef       	ldi	r18, 0xFF	; 255
     aae:	8f e7       	ldi	r24, 0x7F	; 127
     ab0:	91 e0       	ldi	r25, 0x01	; 1
     ab2:	21 50       	subi	r18, 0x01	; 1
     ab4:	80 40       	sbci	r24, 0x00	; 0
     ab6:	90 40       	sbci	r25, 0x00	; 0
     ab8:	e1 f7       	brne	.-8      	; 0xab2 <OLED_scroll_left+0x6a>
     aba:	00 c0       	rjmp	.+0      	; 0xabc <OLED_scroll_left+0x74>
     abc:	00 c0       	rjmp	.+0      	; 0xabe <OLED_scroll_left+0x76>
	_delay_ms(100);
	*command = 0x2E; //Deactivate scroll
     abe:	e0 91 09 01 	lds	r30, 0x0109
     ac2:	f0 91 0a 01 	lds	r31, 0x010A
     ac6:	8e e2       	ldi	r24, 0x2E	; 46
     ac8:	80 83       	st	Z, r24
     aca:	08 95       	ret

00000acc <OLED_write_string>:
}

void OLED_write_string(char *str) {
     acc:	cf 93       	push	r28
     ace:	df 93       	push	r29
     ad0:	ec 01       	movw	r28, r24
	while(*str) {
     ad2:	88 81       	ld	r24, Y
     ad4:	88 23       	and	r24, r24
     ad6:	31 f0       	breq	.+12     	; 0xae4 <OLED_write_string+0x18>
     ad8:	21 96       	adiw	r28, 0x01	; 1
		OLED_write_char(*str++);
     ada:	0e 94 ab 04 	call	0x956	; 0x956 <OLED_write_char>
	_delay_ms(100);
	*command = 0x2E; //Deactivate scroll
}

void OLED_write_string(char *str) {
	while(*str) {
     ade:	89 91       	ld	r24, Y+
     ae0:	81 11       	cpse	r24, r1
     ae2:	fb cf       	rjmp	.-10     	; 0xada <OLED_write_string+0xe>
		OLED_write_char(*str++);
	}
     ae4:	df 91       	pop	r29
     ae6:	cf 91       	pop	r28
     ae8:	08 95       	ret

00000aea <SRAM_init>:
#include <stdio.h>
#include <stdint.h>

void SRAM_init()
{
	MCUCR |= (1<<SRE);
     aea:	85 b7       	in	r24, 0x35	; 53
     aec:	80 68       	ori	r24, 0x80	; 128
     aee:	85 bf       	out	0x35, r24	; 53
     af0:	08 95       	ret

00000af2 <SRAM_test>:
	volatile char *ext_ram = (char *) 0x1400;
	ext_ram[0] = 100;
}

void SRAM_test(void)
{
     af2:	cf 92       	push	r12
     af4:	df 92       	push	r13
     af6:	ef 92       	push	r14
     af8:	ff 92       	push	r15
     afa:	0f 93       	push	r16
     afc:	1f 93       	push	r17
     afe:	cf 93       	push	r28
     b00:	df 93       	push	r29
	uint16_t i, werrors, rerrors;
	werrors = 0;
	rerrors = 0;
	unsigned char testvalue;

	printf("Starting SRAM test...\r\n");
     b02:	8d e7       	ldi	r24, 0x7D	; 125
     b04:	91 e0       	ldi	r25, 0x01	; 1
     b06:	0e 94 9c 06 	call	0xd38	; 0xd38 <puts>
{
	// Start address for the SRAM
	volatile char *ext_ram = (char *) 0x1800;

	uint16_t i, werrors, rerrors;
	werrors = 0;
     b0a:	00 e0       	ldi	r16, 0x00	; 0
     b0c:	10 e0       	ldi	r17, 0x00	; 0
	rerrors = 0;
	unsigned char testvalue;

	printf("Starting SRAM test...\r\n");

	for (i = 0; i < 0x800; i++) {
     b0e:	c0 e0       	ldi	r28, 0x00	; 0
     b10:	d0 e0       	ldi	r29, 0x00	; 0
		testvalue = ~(i % 256);
		ext_ram[i] = testvalue;
		if (ext_ram[i] != testvalue) {
			printf("SRAM error (write phase): ext_ram[%d] = %02X (should be %02X)\r\n", i, ext_ram[i], testvalue);
     b12:	0f 2e       	mov	r0, r31
     b14:	f4 e9       	ldi	r31, 0x94	; 148
     b16:	ef 2e       	mov	r14, r31
     b18:	f1 e0       	ldi	r31, 0x01	; 1
     b1a:	ff 2e       	mov	r15, r31
     b1c:	f0 2d       	mov	r31, r0
     b1e:	8c 2f       	mov	r24, r28
     b20:	80 95       	com	r24
     b22:	fe 01       	movw	r30, r28
     b24:	f8 5e       	subi	r31, 0xE8	; 232

	printf("Starting SRAM test...\r\n");

	for (i = 0; i < 0x800; i++) {
		testvalue = ~(i % 256);
		ext_ram[i] = testvalue;
     b26:	80 83       	st	Z, r24
		if (ext_ram[i] != testvalue) {
     b28:	90 81       	ld	r25, Z
     b2a:	98 17       	cp	r25, r24
     b2c:	a9 f0       	breq	.+42     	; 0xb58 <SRAM_test+0x66>
			printf("SRAM error (write phase): ext_ram[%d] = %02X (should be %02X)\r\n", i, ext_ram[i], testvalue);
     b2e:	90 81       	ld	r25, Z
     b30:	1f 92       	push	r1
     b32:	8f 93       	push	r24
     b34:	1f 92       	push	r1
     b36:	9f 93       	push	r25
     b38:	df 93       	push	r29
     b3a:	cf 93       	push	r28
     b3c:	ff 92       	push	r15
     b3e:	ef 92       	push	r14
     b40:	0e 94 88 06 	call	0xd10	; 0xd10 <printf>
			werrors++;
     b44:	0f 5f       	subi	r16, 0xFF	; 255
     b46:	1f 4f       	sbci	r17, 0xFF	; 255
     b48:	8d b7       	in	r24, 0x3d	; 61
     b4a:	9e b7       	in	r25, 0x3e	; 62
     b4c:	08 96       	adiw	r24, 0x08	; 8
     b4e:	0f b6       	in	r0, 0x3f	; 63
     b50:	f8 94       	cli
     b52:	9e bf       	out	0x3e, r25	; 62
     b54:	0f be       	out	0x3f, r0	; 63
     b56:	8d bf       	out	0x3d, r24	; 61
	rerrors = 0;
	unsigned char testvalue;

	printf("Starting SRAM test...\r\n");

	for (i = 0; i < 0x800; i++) {
     b58:	21 96       	adiw	r28, 0x01	; 1
     b5a:	c1 15       	cp	r28, r1
     b5c:	98 e0       	ldi	r25, 0x08	; 8
     b5e:	d9 07       	cpc	r29, r25
     b60:	f1 f6       	brne	.-68     	; 0xb1e <SRAM_test+0x2c>
     b62:	e1 2c       	mov	r14, r1
     b64:	f1 2c       	mov	r15, r1
     b66:	c0 e0       	ldi	r28, 0x00	; 0
     b68:	d0 e0       	ldi	r29, 0x00	; 0
	}

	for (i = 0; i < 0x800; i++) {
		testvalue = ~(i % 256);
		if (ext_ram[i] != testvalue) {
			printf("SRAM error (read phase): ext_ram[%d] = %02X (should be %02X)\r\n", i, ext_ram[i], testvalue);
     b6a:	0f 2e       	mov	r0, r31
     b6c:	f4 ed       	ldi	r31, 0xD4	; 212
     b6e:	cf 2e       	mov	r12, r31
     b70:	f1 e0       	ldi	r31, 0x01	; 1
     b72:	df 2e       	mov	r13, r31
     b74:	f0 2d       	mov	r31, r0
     b76:	8c 2f       	mov	r24, r28
     b78:	80 95       	com	r24
     b7a:	fe 01       	movw	r30, r28
     b7c:	f8 5e       	subi	r31, 0xE8	; 232
		}
	}

	for (i = 0; i < 0x800; i++) {
		testvalue = ~(i % 256);
		if (ext_ram[i] != testvalue) {
     b7e:	90 81       	ld	r25, Z
     b80:	89 17       	cp	r24, r25
     b82:	b1 f0       	breq	.+44     	; 0xbb0 <SRAM_test+0xbe>
			printf("SRAM error (read phase): ext_ram[%d] = %02X (should be %02X)\r\n", i, ext_ram[i], testvalue);
     b84:	90 81       	ld	r25, Z
     b86:	1f 92       	push	r1
     b88:	8f 93       	push	r24
     b8a:	1f 92       	push	r1
     b8c:	9f 93       	push	r25
     b8e:	df 93       	push	r29
     b90:	cf 93       	push	r28
     b92:	df 92       	push	r13
     b94:	cf 92       	push	r12
     b96:	0e 94 88 06 	call	0xd10	; 0xd10 <printf>
			rerrors++;
     b9a:	8f ef       	ldi	r24, 0xFF	; 255
     b9c:	e8 1a       	sub	r14, r24
     b9e:	f8 0a       	sbc	r15, r24
     ba0:	8d b7       	in	r24, 0x3d	; 61
     ba2:	9e b7       	in	r25, 0x3e	; 62
     ba4:	08 96       	adiw	r24, 0x08	; 8
     ba6:	0f b6       	in	r0, 0x3f	; 63
     ba8:	f8 94       	cli
     baa:	9e bf       	out	0x3e, r25	; 62
     bac:	0f be       	out	0x3f, r0	; 63
     bae:	8d bf       	out	0x3d, r24	; 61
			printf("SRAM error (write phase): ext_ram[%d] = %02X (should be %02X)\r\n", i, ext_ram[i], testvalue);
			werrors++;
		}
	}

	for (i = 0; i < 0x800; i++) {
     bb0:	21 96       	adiw	r28, 0x01	; 1
     bb2:	c1 15       	cp	r28, r1
     bb4:	98 e0       	ldi	r25, 0x08	; 8
     bb6:	d9 07       	cpc	r29, r25
     bb8:	f1 f6       	brne	.-68     	; 0xb76 <SRAM_test+0x84>
			printf("SRAM error (read phase): ext_ram[%d] = %02X (should be %02X)\r\n", i, ext_ram[i], testvalue);
			rerrors++;
		}
	}

	printf("SRAM test completed with %d errors in write phase and %d errors in read phase\r\n", werrors, rerrors);
     bba:	ff 92       	push	r15
     bbc:	ef 92       	push	r14
     bbe:	1f 93       	push	r17
     bc0:	0f 93       	push	r16
     bc2:	83 e1       	ldi	r24, 0x13	; 19
     bc4:	92 e0       	ldi	r25, 0x02	; 2
     bc6:	9f 93       	push	r25
     bc8:	8f 93       	push	r24
     bca:	0e 94 88 06 	call	0xd10	; 0xd10 <printf>
     bce:	0f 90       	pop	r0
     bd0:	0f 90       	pop	r0
     bd2:	0f 90       	pop	r0
     bd4:	0f 90       	pop	r0
     bd6:	0f 90       	pop	r0
     bd8:	0f 90       	pop	r0
}
     bda:	df 91       	pop	r29
     bdc:	cf 91       	pop	r28
     bde:	1f 91       	pop	r17
     be0:	0f 91       	pop	r16
     be2:	ff 90       	pop	r15
     be4:	ef 90       	pop	r14
     be6:	df 90       	pop	r13
     be8:	cf 90       	pop	r12
     bea:	08 95       	ret

00000bec <usart_putchar>:
	uart = fdevopen(&usart_putchar, &usart_getchar);
}

int usart_putchar(char c, FILE *f) 
{
	while (!(UCSR0A & (1 << UDRE0)));
     bec:	5d 9b       	sbis	0x0b, 5	; 11
     bee:	fe cf       	rjmp	.-4      	; 0xbec <usart_putchar>
	UDR0 = c;
     bf0:	8c b9       	out	0x0c, r24	; 12
	return 0;
}
     bf2:	80 e0       	ldi	r24, 0x00	; 0
     bf4:	90 e0       	ldi	r25, 0x00	; 0
     bf6:	08 95       	ret

00000bf8 <usart_getchar>:

int usart_getchar(FILE *f) 
{
	while (!(UCSR0A & (1 << RXC0)));
     bf8:	5f 9b       	sbis	0x0b, 7	; 11
     bfa:	fe cf       	rjmp	.-4      	; 0xbf8 <usart_getchar>
	return UDR0;
     bfc:	8c b1       	in	r24, 0x0c	; 12
}
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	08 95       	ret

00000c02 <usart_setup>:
#include <avr/io.h>

void usart_setup() 
{
	//Enable receive and transmit
	UCSR0B |= (1 << RXEN0) | (1 << TXEN0);
     c02:	8a b1       	in	r24, 0x0a	; 10
     c04:	88 61       	ori	r24, 0x18	; 24
     c06:	8a b9       	out	0x0a, r24	; 10
	UCSR0C |= (1 << UCSZ01) | (1 << UCSZ00); //8bit. no-parity, 1 stop bit
     c08:	80 b5       	in	r24, 0x20	; 32
     c0a:	86 60       	ori	r24, 0x06	; 6
     c0c:	80 bd       	out	0x20, r24	; 32
	
	UBRR0H = 0;
     c0e:	10 bc       	out	0x20, r1	; 32
	UBRR0L = 31;
     c10:	8f e1       	ldi	r24, 0x1F	; 31
     c12:	89 b9       	out	0x09, r24	; 9
	
	uart = fdevopen(&usart_putchar, &usart_getchar);
     c14:	6c ef       	ldi	r22, 0xFC	; 252
     c16:	75 e0       	ldi	r23, 0x05	; 5
     c18:	86 ef       	ldi	r24, 0xF6	; 246
     c1a:	95 e0       	ldi	r25, 0x05	; 5
     c1c:	0e 94 3d 06 	call	0xc7a	; 0xc7a <fdevopen>
     c20:	90 93 69 02 	sts	0x0269, r25
     c24:	80 93 68 02 	sts	0x0268, r24
     c28:	08 95       	ret

00000c2a <__divmodhi4>:
     c2a:	97 fb       	bst	r25, 7
     c2c:	07 2e       	mov	r0, r23
     c2e:	16 f4       	brtc	.+4      	; 0xc34 <__divmodhi4+0xa>
     c30:	00 94       	com	r0
     c32:	07 d0       	rcall	.+14     	; 0xc42 <__divmodhi4_neg1>
     c34:	77 fd       	sbrc	r23, 7
     c36:	09 d0       	rcall	.+18     	; 0xc4a <__divmodhi4_neg2>
     c38:	0e 94 29 06 	call	0xc52	; 0xc52 <__udivmodhi4>
     c3c:	07 fc       	sbrc	r0, 7
     c3e:	05 d0       	rcall	.+10     	; 0xc4a <__divmodhi4_neg2>
     c40:	3e f4       	brtc	.+14     	; 0xc50 <__divmodhi4_exit>

00000c42 <__divmodhi4_neg1>:
     c42:	90 95       	com	r25
     c44:	81 95       	neg	r24
     c46:	9f 4f       	sbci	r25, 0xFF	; 255
     c48:	08 95       	ret

00000c4a <__divmodhi4_neg2>:
     c4a:	70 95       	com	r23
     c4c:	61 95       	neg	r22
     c4e:	7f 4f       	sbci	r23, 0xFF	; 255

00000c50 <__divmodhi4_exit>:
     c50:	08 95       	ret

00000c52 <__udivmodhi4>:
     c52:	aa 1b       	sub	r26, r26
     c54:	bb 1b       	sub	r27, r27
     c56:	51 e1       	ldi	r21, 0x11	; 17
     c58:	07 c0       	rjmp	.+14     	; 0xc68 <__udivmodhi4_ep>

00000c5a <__udivmodhi4_loop>:
     c5a:	aa 1f       	adc	r26, r26
     c5c:	bb 1f       	adc	r27, r27
     c5e:	a6 17       	cp	r26, r22
     c60:	b7 07       	cpc	r27, r23
     c62:	10 f0       	brcs	.+4      	; 0xc68 <__udivmodhi4_ep>
     c64:	a6 1b       	sub	r26, r22
     c66:	b7 0b       	sbc	r27, r23

00000c68 <__udivmodhi4_ep>:
     c68:	88 1f       	adc	r24, r24
     c6a:	99 1f       	adc	r25, r25
     c6c:	5a 95       	dec	r21
     c6e:	a9 f7       	brne	.-22     	; 0xc5a <__udivmodhi4_loop>
     c70:	80 95       	com	r24
     c72:	90 95       	com	r25
     c74:	bc 01       	movw	r22, r24
     c76:	cd 01       	movw	r24, r26
     c78:	08 95       	ret

00000c7a <fdevopen>:
     c7a:	0f 93       	push	r16
     c7c:	1f 93       	push	r17
     c7e:	cf 93       	push	r28
     c80:	df 93       	push	r29
     c82:	ec 01       	movw	r28, r24
     c84:	8b 01       	movw	r16, r22
     c86:	00 97       	sbiw	r24, 0x00	; 0
     c88:	31 f4       	brne	.+12     	; 0xc96 <fdevopen+0x1c>
     c8a:	61 15       	cp	r22, r1
     c8c:	71 05       	cpc	r23, r1
     c8e:	19 f4       	brne	.+6      	; 0xc96 <fdevopen+0x1c>
     c90:	80 e0       	ldi	r24, 0x00	; 0
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	38 c0       	rjmp	.+112    	; 0xd06 <fdevopen+0x8c>
     c96:	6e e0       	ldi	r22, 0x0E	; 14
     c98:	70 e0       	ldi	r23, 0x00	; 0
     c9a:	81 e0       	ldi	r24, 0x01	; 1
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	0e 94 9b 08 	call	0x1136	; 0x1136 <calloc>
     ca2:	fc 01       	movw	r30, r24
     ca4:	00 97       	sbiw	r24, 0x00	; 0
     ca6:	a1 f3       	breq	.-24     	; 0xc90 <fdevopen+0x16>
     ca8:	80 e8       	ldi	r24, 0x80	; 128
     caa:	83 83       	std	Z+3, r24	; 0x03
     cac:	01 15       	cp	r16, r1
     cae:	11 05       	cpc	r17, r1
     cb0:	71 f0       	breq	.+28     	; 0xcce <fdevopen+0x54>
     cb2:	13 87       	std	Z+11, r17	; 0x0b
     cb4:	02 87       	std	Z+10, r16	; 0x0a
     cb6:	81 e8       	ldi	r24, 0x81	; 129
     cb8:	83 83       	std	Z+3, r24	; 0x03
     cba:	80 91 6a 02 	lds	r24, 0x026A
     cbe:	90 91 6b 02 	lds	r25, 0x026B
     cc2:	89 2b       	or	r24, r25
     cc4:	21 f4       	brne	.+8      	; 0xcce <fdevopen+0x54>
     cc6:	f0 93 6b 02 	sts	0x026B, r31
     cca:	e0 93 6a 02 	sts	0x026A, r30
     cce:	20 97       	sbiw	r28, 0x00	; 0
     cd0:	c9 f0       	breq	.+50     	; 0xd04 <fdevopen+0x8a>
     cd2:	d1 87       	std	Z+9, r29	; 0x09
     cd4:	c0 87       	std	Z+8, r28	; 0x08
     cd6:	83 81       	ldd	r24, Z+3	; 0x03
     cd8:	82 60       	ori	r24, 0x02	; 2
     cda:	83 83       	std	Z+3, r24	; 0x03
     cdc:	80 91 6c 02 	lds	r24, 0x026C
     ce0:	90 91 6d 02 	lds	r25, 0x026D
     ce4:	89 2b       	or	r24, r25
     ce6:	71 f4       	brne	.+28     	; 0xd04 <fdevopen+0x8a>
     ce8:	f0 93 6d 02 	sts	0x026D, r31
     cec:	e0 93 6c 02 	sts	0x026C, r30
     cf0:	80 91 6e 02 	lds	r24, 0x026E
     cf4:	90 91 6f 02 	lds	r25, 0x026F
     cf8:	89 2b       	or	r24, r25
     cfa:	21 f4       	brne	.+8      	; 0xd04 <fdevopen+0x8a>
     cfc:	f0 93 6f 02 	sts	0x026F, r31
     d00:	e0 93 6e 02 	sts	0x026E, r30
     d04:	cf 01       	movw	r24, r30
     d06:	df 91       	pop	r29
     d08:	cf 91       	pop	r28
     d0a:	1f 91       	pop	r17
     d0c:	0f 91       	pop	r16
     d0e:	08 95       	ret

00000d10 <printf>:
     d10:	a0 e0       	ldi	r26, 0x00	; 0
     d12:	b0 e0       	ldi	r27, 0x00	; 0
     d14:	ee e8       	ldi	r30, 0x8E	; 142
     d16:	f6 e0       	ldi	r31, 0x06	; 6
     d18:	0c 94 9b 0a 	jmp	0x1536	; 0x1536 <__prologue_saves__+0x20>
     d1c:	fe 01       	movw	r30, r28
     d1e:	35 96       	adiw	r30, 0x05	; 5
     d20:	61 91       	ld	r22, Z+
     d22:	71 91       	ld	r23, Z+
     d24:	af 01       	movw	r20, r30
     d26:	80 91 6c 02 	lds	r24, 0x026C
     d2a:	90 91 6d 02 	lds	r25, 0x026D
     d2e:	0e 94 c9 06 	call	0xd92	; 0xd92 <vfprintf>
     d32:	e2 e0       	ldi	r30, 0x02	; 2
     d34:	0c 94 b7 0a 	jmp	0x156e	; 0x156e <__epilogue_restores__+0x20>

00000d38 <puts>:
     d38:	0f 93       	push	r16
     d3a:	1f 93       	push	r17
     d3c:	cf 93       	push	r28
     d3e:	df 93       	push	r29
     d40:	e0 91 6c 02 	lds	r30, 0x026C
     d44:	f0 91 6d 02 	lds	r31, 0x026D
     d48:	23 81       	ldd	r18, Z+3	; 0x03
     d4a:	21 ff       	sbrs	r18, 1
     d4c:	1b c0       	rjmp	.+54     	; 0xd84 <puts+0x4c>
     d4e:	ec 01       	movw	r28, r24
     d50:	00 e0       	ldi	r16, 0x00	; 0
     d52:	10 e0       	ldi	r17, 0x00	; 0
     d54:	89 91       	ld	r24, Y+
     d56:	60 91 6c 02 	lds	r22, 0x026C
     d5a:	70 91 6d 02 	lds	r23, 0x026D
     d5e:	db 01       	movw	r26, r22
     d60:	18 96       	adiw	r26, 0x08	; 8
     d62:	ed 91       	ld	r30, X+
     d64:	fc 91       	ld	r31, X
     d66:	19 97       	sbiw	r26, 0x09	; 9
     d68:	88 23       	and	r24, r24
     d6a:	31 f0       	breq	.+12     	; 0xd78 <puts+0x40>
     d6c:	09 95       	icall
     d6e:	89 2b       	or	r24, r25
     d70:	89 f3       	breq	.-30     	; 0xd54 <puts+0x1c>
     d72:	0f ef       	ldi	r16, 0xFF	; 255
     d74:	1f ef       	ldi	r17, 0xFF	; 255
     d76:	ee cf       	rjmp	.-36     	; 0xd54 <puts+0x1c>
     d78:	8a e0       	ldi	r24, 0x0A	; 10
     d7a:	09 95       	icall
     d7c:	89 2b       	or	r24, r25
     d7e:	11 f4       	brne	.+4      	; 0xd84 <puts+0x4c>
     d80:	c8 01       	movw	r24, r16
     d82:	02 c0       	rjmp	.+4      	; 0xd88 <puts+0x50>
     d84:	8f ef       	ldi	r24, 0xFF	; 255
     d86:	9f ef       	ldi	r25, 0xFF	; 255
     d88:	df 91       	pop	r29
     d8a:	cf 91       	pop	r28
     d8c:	1f 91       	pop	r17
     d8e:	0f 91       	pop	r16
     d90:	08 95       	ret

00000d92 <vfprintf>:
     d92:	ac e0       	ldi	r26, 0x0C	; 12
     d94:	b0 e0       	ldi	r27, 0x00	; 0
     d96:	ef ec       	ldi	r30, 0xCF	; 207
     d98:	f6 e0       	ldi	r31, 0x06	; 6
     d9a:	0c 94 8b 0a 	jmp	0x1516	; 0x1516 <__prologue_saves__>
     d9e:	7c 01       	movw	r14, r24
     da0:	6b 01       	movw	r12, r22
     da2:	8a 01       	movw	r16, r20
     da4:	fc 01       	movw	r30, r24
     da6:	17 82       	std	Z+7, r1	; 0x07
     da8:	16 82       	std	Z+6, r1	; 0x06
     daa:	83 81       	ldd	r24, Z+3	; 0x03
     dac:	81 ff       	sbrs	r24, 1
     dae:	bd c1       	rjmp	.+890    	; 0x112a <vfprintf+0x398>
     db0:	ce 01       	movw	r24, r28
     db2:	01 96       	adiw	r24, 0x01	; 1
     db4:	4c 01       	movw	r8, r24
     db6:	f7 01       	movw	r30, r14
     db8:	93 81       	ldd	r25, Z+3	; 0x03
     dba:	f6 01       	movw	r30, r12
     dbc:	93 fd       	sbrc	r25, 3
     dbe:	85 91       	lpm	r24, Z+
     dc0:	93 ff       	sbrs	r25, 3
     dc2:	81 91       	ld	r24, Z+
     dc4:	6f 01       	movw	r12, r30
     dc6:	88 23       	and	r24, r24
     dc8:	09 f4       	brne	.+2      	; 0xdcc <vfprintf+0x3a>
     dca:	ab c1       	rjmp	.+854    	; 0x1122 <vfprintf+0x390>
     dcc:	85 32       	cpi	r24, 0x25	; 37
     dce:	39 f4       	brne	.+14     	; 0xdde <vfprintf+0x4c>
     dd0:	93 fd       	sbrc	r25, 3
     dd2:	85 91       	lpm	r24, Z+
     dd4:	93 ff       	sbrs	r25, 3
     dd6:	81 91       	ld	r24, Z+
     dd8:	6f 01       	movw	r12, r30
     dda:	85 32       	cpi	r24, 0x25	; 37
     ddc:	29 f4       	brne	.+10     	; 0xde8 <vfprintf+0x56>
     dde:	b7 01       	movw	r22, r14
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <fputc>
     de6:	e7 cf       	rjmp	.-50     	; 0xdb6 <vfprintf+0x24>
     de8:	51 2c       	mov	r5, r1
     dea:	31 2c       	mov	r3, r1
     dec:	20 e0       	ldi	r18, 0x00	; 0
     dee:	20 32       	cpi	r18, 0x20	; 32
     df0:	a0 f4       	brcc	.+40     	; 0xe1a <vfprintf+0x88>
     df2:	8b 32       	cpi	r24, 0x2B	; 43
     df4:	69 f0       	breq	.+26     	; 0xe10 <vfprintf+0x7e>
     df6:	30 f4       	brcc	.+12     	; 0xe04 <vfprintf+0x72>
     df8:	80 32       	cpi	r24, 0x20	; 32
     dfa:	59 f0       	breq	.+22     	; 0xe12 <vfprintf+0x80>
     dfc:	83 32       	cpi	r24, 0x23	; 35
     dfe:	69 f4       	brne	.+26     	; 0xe1a <vfprintf+0x88>
     e00:	20 61       	ori	r18, 0x10	; 16
     e02:	2c c0       	rjmp	.+88     	; 0xe5c <vfprintf+0xca>
     e04:	8d 32       	cpi	r24, 0x2D	; 45
     e06:	39 f0       	breq	.+14     	; 0xe16 <vfprintf+0x84>
     e08:	80 33       	cpi	r24, 0x30	; 48
     e0a:	39 f4       	brne	.+14     	; 0xe1a <vfprintf+0x88>
     e0c:	21 60       	ori	r18, 0x01	; 1
     e0e:	26 c0       	rjmp	.+76     	; 0xe5c <vfprintf+0xca>
     e10:	22 60       	ori	r18, 0x02	; 2
     e12:	24 60       	ori	r18, 0x04	; 4
     e14:	23 c0       	rjmp	.+70     	; 0xe5c <vfprintf+0xca>
     e16:	28 60       	ori	r18, 0x08	; 8
     e18:	21 c0       	rjmp	.+66     	; 0xe5c <vfprintf+0xca>
     e1a:	27 fd       	sbrc	r18, 7
     e1c:	27 c0       	rjmp	.+78     	; 0xe6c <vfprintf+0xda>
     e1e:	30 ed       	ldi	r19, 0xD0	; 208
     e20:	38 0f       	add	r19, r24
     e22:	3a 30       	cpi	r19, 0x0A	; 10
     e24:	78 f4       	brcc	.+30     	; 0xe44 <vfprintf+0xb2>
     e26:	26 ff       	sbrs	r18, 6
     e28:	06 c0       	rjmp	.+12     	; 0xe36 <vfprintf+0xa4>
     e2a:	fa e0       	ldi	r31, 0x0A	; 10
     e2c:	5f 9e       	mul	r5, r31
     e2e:	30 0d       	add	r19, r0
     e30:	11 24       	eor	r1, r1
     e32:	53 2e       	mov	r5, r19
     e34:	13 c0       	rjmp	.+38     	; 0xe5c <vfprintf+0xca>
     e36:	8a e0       	ldi	r24, 0x0A	; 10
     e38:	38 9e       	mul	r3, r24
     e3a:	30 0d       	add	r19, r0
     e3c:	11 24       	eor	r1, r1
     e3e:	33 2e       	mov	r3, r19
     e40:	20 62       	ori	r18, 0x20	; 32
     e42:	0c c0       	rjmp	.+24     	; 0xe5c <vfprintf+0xca>
     e44:	8e 32       	cpi	r24, 0x2E	; 46
     e46:	21 f4       	brne	.+8      	; 0xe50 <vfprintf+0xbe>
     e48:	26 fd       	sbrc	r18, 6
     e4a:	6b c1       	rjmp	.+726    	; 0x1122 <vfprintf+0x390>
     e4c:	20 64       	ori	r18, 0x40	; 64
     e4e:	06 c0       	rjmp	.+12     	; 0xe5c <vfprintf+0xca>
     e50:	8c 36       	cpi	r24, 0x6C	; 108
     e52:	11 f4       	brne	.+4      	; 0xe58 <vfprintf+0xc6>
     e54:	20 68       	ori	r18, 0x80	; 128
     e56:	02 c0       	rjmp	.+4      	; 0xe5c <vfprintf+0xca>
     e58:	88 36       	cpi	r24, 0x68	; 104
     e5a:	41 f4       	brne	.+16     	; 0xe6c <vfprintf+0xda>
     e5c:	f6 01       	movw	r30, r12
     e5e:	93 fd       	sbrc	r25, 3
     e60:	85 91       	lpm	r24, Z+
     e62:	93 ff       	sbrs	r25, 3
     e64:	81 91       	ld	r24, Z+
     e66:	6f 01       	movw	r12, r30
     e68:	81 11       	cpse	r24, r1
     e6a:	c1 cf       	rjmp	.-126    	; 0xdee <vfprintf+0x5c>
     e6c:	98 2f       	mov	r25, r24
     e6e:	9f 7d       	andi	r25, 0xDF	; 223
     e70:	95 54       	subi	r25, 0x45	; 69
     e72:	93 30       	cpi	r25, 0x03	; 3
     e74:	28 f4       	brcc	.+10     	; 0xe80 <vfprintf+0xee>
     e76:	0c 5f       	subi	r16, 0xFC	; 252
     e78:	1f 4f       	sbci	r17, 0xFF	; 255
     e7a:	ff e3       	ldi	r31, 0x3F	; 63
     e7c:	f9 83       	std	Y+1, r31	; 0x01
     e7e:	0d c0       	rjmp	.+26     	; 0xe9a <vfprintf+0x108>
     e80:	83 36       	cpi	r24, 0x63	; 99
     e82:	31 f0       	breq	.+12     	; 0xe90 <vfprintf+0xfe>
     e84:	83 37       	cpi	r24, 0x73	; 115
     e86:	71 f0       	breq	.+28     	; 0xea4 <vfprintf+0x112>
     e88:	83 35       	cpi	r24, 0x53	; 83
     e8a:	09 f0       	breq	.+2      	; 0xe8e <vfprintf+0xfc>
     e8c:	5b c0       	rjmp	.+182    	; 0xf44 <vfprintf+0x1b2>
     e8e:	22 c0       	rjmp	.+68     	; 0xed4 <vfprintf+0x142>
     e90:	f8 01       	movw	r30, r16
     e92:	80 81       	ld	r24, Z
     e94:	89 83       	std	Y+1, r24	; 0x01
     e96:	0e 5f       	subi	r16, 0xFE	; 254
     e98:	1f 4f       	sbci	r17, 0xFF	; 255
     e9a:	44 24       	eor	r4, r4
     e9c:	43 94       	inc	r4
     e9e:	51 2c       	mov	r5, r1
     ea0:	54 01       	movw	r10, r8
     ea2:	15 c0       	rjmp	.+42     	; 0xece <vfprintf+0x13c>
     ea4:	38 01       	movw	r6, r16
     ea6:	f2 e0       	ldi	r31, 0x02	; 2
     ea8:	6f 0e       	add	r6, r31
     eaa:	71 1c       	adc	r7, r1
     eac:	f8 01       	movw	r30, r16
     eae:	a0 80       	ld	r10, Z
     eb0:	b1 80       	ldd	r11, Z+1	; 0x01
     eb2:	26 ff       	sbrs	r18, 6
     eb4:	03 c0       	rjmp	.+6      	; 0xebc <vfprintf+0x12a>
     eb6:	65 2d       	mov	r22, r5
     eb8:	70 e0       	ldi	r23, 0x00	; 0
     eba:	02 c0       	rjmp	.+4      	; 0xec0 <vfprintf+0x12e>
     ebc:	6f ef       	ldi	r22, 0xFF	; 255
     ebe:	7f ef       	ldi	r23, 0xFF	; 255
     ec0:	c5 01       	movw	r24, r10
     ec2:	2c 87       	std	Y+12, r18	; 0x0c
     ec4:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <strnlen>
     ec8:	2c 01       	movw	r4, r24
     eca:	83 01       	movw	r16, r6
     ecc:	2c 85       	ldd	r18, Y+12	; 0x0c
     ece:	2f 77       	andi	r18, 0x7F	; 127
     ed0:	22 2e       	mov	r2, r18
     ed2:	17 c0       	rjmp	.+46     	; 0xf02 <vfprintf+0x170>
     ed4:	38 01       	movw	r6, r16
     ed6:	f2 e0       	ldi	r31, 0x02	; 2
     ed8:	6f 0e       	add	r6, r31
     eda:	71 1c       	adc	r7, r1
     edc:	f8 01       	movw	r30, r16
     ede:	a0 80       	ld	r10, Z
     ee0:	b1 80       	ldd	r11, Z+1	; 0x01
     ee2:	26 ff       	sbrs	r18, 6
     ee4:	03 c0       	rjmp	.+6      	; 0xeec <vfprintf+0x15a>
     ee6:	65 2d       	mov	r22, r5
     ee8:	70 e0       	ldi	r23, 0x00	; 0
     eea:	02 c0       	rjmp	.+4      	; 0xef0 <vfprintf+0x15e>
     eec:	6f ef       	ldi	r22, 0xFF	; 255
     eee:	7f ef       	ldi	r23, 0xFF	; 255
     ef0:	c5 01       	movw	r24, r10
     ef2:	2c 87       	std	Y+12, r18	; 0x0c
     ef4:	0e 94 de 09 	call	0x13bc	; 0x13bc <strnlen_P>
     ef8:	2c 01       	movw	r4, r24
     efa:	2c 85       	ldd	r18, Y+12	; 0x0c
     efc:	20 68       	ori	r18, 0x80	; 128
     efe:	22 2e       	mov	r2, r18
     f00:	83 01       	movw	r16, r6
     f02:	23 fc       	sbrc	r2, 3
     f04:	1b c0       	rjmp	.+54     	; 0xf3c <vfprintf+0x1aa>
     f06:	83 2d       	mov	r24, r3
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	48 16       	cp	r4, r24
     f0c:	59 06       	cpc	r5, r25
     f0e:	b0 f4       	brcc	.+44     	; 0xf3c <vfprintf+0x1aa>
     f10:	b7 01       	movw	r22, r14
     f12:	80 e2       	ldi	r24, 0x20	; 32
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <fputc>
     f1a:	3a 94       	dec	r3
     f1c:	f4 cf       	rjmp	.-24     	; 0xf06 <vfprintf+0x174>
     f1e:	f5 01       	movw	r30, r10
     f20:	27 fc       	sbrc	r2, 7
     f22:	85 91       	lpm	r24, Z+
     f24:	27 fe       	sbrs	r2, 7
     f26:	81 91       	ld	r24, Z+
     f28:	5f 01       	movw	r10, r30
     f2a:	b7 01       	movw	r22, r14
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <fputc>
     f32:	31 10       	cpse	r3, r1
     f34:	3a 94       	dec	r3
     f36:	f1 e0       	ldi	r31, 0x01	; 1
     f38:	4f 1a       	sub	r4, r31
     f3a:	51 08       	sbc	r5, r1
     f3c:	41 14       	cp	r4, r1
     f3e:	51 04       	cpc	r5, r1
     f40:	71 f7       	brne	.-36     	; 0xf1e <vfprintf+0x18c>
     f42:	e5 c0       	rjmp	.+458    	; 0x110e <vfprintf+0x37c>
     f44:	84 36       	cpi	r24, 0x64	; 100
     f46:	11 f0       	breq	.+4      	; 0xf4c <vfprintf+0x1ba>
     f48:	89 36       	cpi	r24, 0x69	; 105
     f4a:	39 f5       	brne	.+78     	; 0xf9a <vfprintf+0x208>
     f4c:	f8 01       	movw	r30, r16
     f4e:	27 ff       	sbrs	r18, 7
     f50:	07 c0       	rjmp	.+14     	; 0xf60 <vfprintf+0x1ce>
     f52:	60 81       	ld	r22, Z
     f54:	71 81       	ldd	r23, Z+1	; 0x01
     f56:	82 81       	ldd	r24, Z+2	; 0x02
     f58:	93 81       	ldd	r25, Z+3	; 0x03
     f5a:	0c 5f       	subi	r16, 0xFC	; 252
     f5c:	1f 4f       	sbci	r17, 0xFF	; 255
     f5e:	08 c0       	rjmp	.+16     	; 0xf70 <vfprintf+0x1de>
     f60:	60 81       	ld	r22, Z
     f62:	71 81       	ldd	r23, Z+1	; 0x01
     f64:	88 27       	eor	r24, r24
     f66:	77 fd       	sbrc	r23, 7
     f68:	80 95       	com	r24
     f6a:	98 2f       	mov	r25, r24
     f6c:	0e 5f       	subi	r16, 0xFE	; 254
     f6e:	1f 4f       	sbci	r17, 0xFF	; 255
     f70:	2f 76       	andi	r18, 0x6F	; 111
     f72:	b2 2e       	mov	r11, r18
     f74:	97 ff       	sbrs	r25, 7
     f76:	09 c0       	rjmp	.+18     	; 0xf8a <vfprintf+0x1f8>
     f78:	90 95       	com	r25
     f7a:	80 95       	com	r24
     f7c:	70 95       	com	r23
     f7e:	61 95       	neg	r22
     f80:	7f 4f       	sbci	r23, 0xFF	; 255
     f82:	8f 4f       	sbci	r24, 0xFF	; 255
     f84:	9f 4f       	sbci	r25, 0xFF	; 255
     f86:	20 68       	ori	r18, 0x80	; 128
     f88:	b2 2e       	mov	r11, r18
     f8a:	2a e0       	ldi	r18, 0x0A	; 10
     f8c:	30 e0       	ldi	r19, 0x00	; 0
     f8e:	a4 01       	movw	r20, r8
     f90:	0e 94 2d 0a 	call	0x145a	; 0x145a <__ultoa_invert>
     f94:	a8 2e       	mov	r10, r24
     f96:	a8 18       	sub	r10, r8
     f98:	44 c0       	rjmp	.+136    	; 0x1022 <vfprintf+0x290>
     f9a:	85 37       	cpi	r24, 0x75	; 117
     f9c:	29 f4       	brne	.+10     	; 0xfa8 <vfprintf+0x216>
     f9e:	2f 7e       	andi	r18, 0xEF	; 239
     fa0:	b2 2e       	mov	r11, r18
     fa2:	2a e0       	ldi	r18, 0x0A	; 10
     fa4:	30 e0       	ldi	r19, 0x00	; 0
     fa6:	25 c0       	rjmp	.+74     	; 0xff2 <vfprintf+0x260>
     fa8:	f2 2f       	mov	r31, r18
     faa:	f9 7f       	andi	r31, 0xF9	; 249
     fac:	bf 2e       	mov	r11, r31
     fae:	8f 36       	cpi	r24, 0x6F	; 111
     fb0:	c1 f0       	breq	.+48     	; 0xfe2 <vfprintf+0x250>
     fb2:	18 f4       	brcc	.+6      	; 0xfba <vfprintf+0x228>
     fb4:	88 35       	cpi	r24, 0x58	; 88
     fb6:	79 f0       	breq	.+30     	; 0xfd6 <vfprintf+0x244>
     fb8:	b4 c0       	rjmp	.+360    	; 0x1122 <vfprintf+0x390>
     fba:	80 37       	cpi	r24, 0x70	; 112
     fbc:	19 f0       	breq	.+6      	; 0xfc4 <vfprintf+0x232>
     fbe:	88 37       	cpi	r24, 0x78	; 120
     fc0:	21 f0       	breq	.+8      	; 0xfca <vfprintf+0x238>
     fc2:	af c0       	rjmp	.+350    	; 0x1122 <vfprintf+0x390>
     fc4:	2f 2f       	mov	r18, r31
     fc6:	20 61       	ori	r18, 0x10	; 16
     fc8:	b2 2e       	mov	r11, r18
     fca:	b4 fe       	sbrs	r11, 4
     fcc:	0d c0       	rjmp	.+26     	; 0xfe8 <vfprintf+0x256>
     fce:	8b 2d       	mov	r24, r11
     fd0:	84 60       	ori	r24, 0x04	; 4
     fd2:	b8 2e       	mov	r11, r24
     fd4:	09 c0       	rjmp	.+18     	; 0xfe8 <vfprintf+0x256>
     fd6:	24 ff       	sbrs	r18, 4
     fd8:	0a c0       	rjmp	.+20     	; 0xfee <vfprintf+0x25c>
     fda:	9f 2f       	mov	r25, r31
     fdc:	96 60       	ori	r25, 0x06	; 6
     fde:	b9 2e       	mov	r11, r25
     fe0:	06 c0       	rjmp	.+12     	; 0xfee <vfprintf+0x25c>
     fe2:	28 e0       	ldi	r18, 0x08	; 8
     fe4:	30 e0       	ldi	r19, 0x00	; 0
     fe6:	05 c0       	rjmp	.+10     	; 0xff2 <vfprintf+0x260>
     fe8:	20 e1       	ldi	r18, 0x10	; 16
     fea:	30 e0       	ldi	r19, 0x00	; 0
     fec:	02 c0       	rjmp	.+4      	; 0xff2 <vfprintf+0x260>
     fee:	20 e1       	ldi	r18, 0x10	; 16
     ff0:	32 e0       	ldi	r19, 0x02	; 2
     ff2:	f8 01       	movw	r30, r16
     ff4:	b7 fe       	sbrs	r11, 7
     ff6:	07 c0       	rjmp	.+14     	; 0x1006 <vfprintf+0x274>
     ff8:	60 81       	ld	r22, Z
     ffa:	71 81       	ldd	r23, Z+1	; 0x01
     ffc:	82 81       	ldd	r24, Z+2	; 0x02
     ffe:	93 81       	ldd	r25, Z+3	; 0x03
    1000:	0c 5f       	subi	r16, 0xFC	; 252
    1002:	1f 4f       	sbci	r17, 0xFF	; 255
    1004:	06 c0       	rjmp	.+12     	; 0x1012 <vfprintf+0x280>
    1006:	60 81       	ld	r22, Z
    1008:	71 81       	ldd	r23, Z+1	; 0x01
    100a:	80 e0       	ldi	r24, 0x00	; 0
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	0e 5f       	subi	r16, 0xFE	; 254
    1010:	1f 4f       	sbci	r17, 0xFF	; 255
    1012:	a4 01       	movw	r20, r8
    1014:	0e 94 2d 0a 	call	0x145a	; 0x145a <__ultoa_invert>
    1018:	a8 2e       	mov	r10, r24
    101a:	a8 18       	sub	r10, r8
    101c:	fb 2d       	mov	r31, r11
    101e:	ff 77       	andi	r31, 0x7F	; 127
    1020:	bf 2e       	mov	r11, r31
    1022:	b6 fe       	sbrs	r11, 6
    1024:	0b c0       	rjmp	.+22     	; 0x103c <vfprintf+0x2aa>
    1026:	2b 2d       	mov	r18, r11
    1028:	2e 7f       	andi	r18, 0xFE	; 254
    102a:	a5 14       	cp	r10, r5
    102c:	50 f4       	brcc	.+20     	; 0x1042 <vfprintf+0x2b0>
    102e:	b4 fe       	sbrs	r11, 4
    1030:	0a c0       	rjmp	.+20     	; 0x1046 <vfprintf+0x2b4>
    1032:	b2 fc       	sbrc	r11, 2
    1034:	08 c0       	rjmp	.+16     	; 0x1046 <vfprintf+0x2b4>
    1036:	2b 2d       	mov	r18, r11
    1038:	2e 7e       	andi	r18, 0xEE	; 238
    103a:	05 c0       	rjmp	.+10     	; 0x1046 <vfprintf+0x2b4>
    103c:	7a 2c       	mov	r7, r10
    103e:	2b 2d       	mov	r18, r11
    1040:	03 c0       	rjmp	.+6      	; 0x1048 <vfprintf+0x2b6>
    1042:	7a 2c       	mov	r7, r10
    1044:	01 c0       	rjmp	.+2      	; 0x1048 <vfprintf+0x2b6>
    1046:	75 2c       	mov	r7, r5
    1048:	24 ff       	sbrs	r18, 4
    104a:	0d c0       	rjmp	.+26     	; 0x1066 <vfprintf+0x2d4>
    104c:	fe 01       	movw	r30, r28
    104e:	ea 0d       	add	r30, r10
    1050:	f1 1d       	adc	r31, r1
    1052:	80 81       	ld	r24, Z
    1054:	80 33       	cpi	r24, 0x30	; 48
    1056:	11 f4       	brne	.+4      	; 0x105c <vfprintf+0x2ca>
    1058:	29 7e       	andi	r18, 0xE9	; 233
    105a:	09 c0       	rjmp	.+18     	; 0x106e <vfprintf+0x2dc>
    105c:	22 ff       	sbrs	r18, 2
    105e:	06 c0       	rjmp	.+12     	; 0x106c <vfprintf+0x2da>
    1060:	73 94       	inc	r7
    1062:	73 94       	inc	r7
    1064:	04 c0       	rjmp	.+8      	; 0x106e <vfprintf+0x2dc>
    1066:	82 2f       	mov	r24, r18
    1068:	86 78       	andi	r24, 0x86	; 134
    106a:	09 f0       	breq	.+2      	; 0x106e <vfprintf+0x2dc>
    106c:	73 94       	inc	r7
    106e:	23 fd       	sbrc	r18, 3
    1070:	13 c0       	rjmp	.+38     	; 0x1098 <vfprintf+0x306>
    1072:	20 ff       	sbrs	r18, 0
    1074:	06 c0       	rjmp	.+12     	; 0x1082 <vfprintf+0x2f0>
    1076:	5a 2c       	mov	r5, r10
    1078:	73 14       	cp	r7, r3
    107a:	18 f4       	brcc	.+6      	; 0x1082 <vfprintf+0x2f0>
    107c:	53 0c       	add	r5, r3
    107e:	57 18       	sub	r5, r7
    1080:	73 2c       	mov	r7, r3
    1082:	73 14       	cp	r7, r3
    1084:	68 f4       	brcc	.+26     	; 0x10a0 <vfprintf+0x30e>
    1086:	b7 01       	movw	r22, r14
    1088:	80 e2       	ldi	r24, 0x20	; 32
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	2c 87       	std	Y+12, r18	; 0x0c
    108e:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <fputc>
    1092:	73 94       	inc	r7
    1094:	2c 85       	ldd	r18, Y+12	; 0x0c
    1096:	f5 cf       	rjmp	.-22     	; 0x1082 <vfprintf+0x2f0>
    1098:	73 14       	cp	r7, r3
    109a:	10 f4       	brcc	.+4      	; 0x10a0 <vfprintf+0x30e>
    109c:	37 18       	sub	r3, r7
    109e:	01 c0       	rjmp	.+2      	; 0x10a2 <vfprintf+0x310>
    10a0:	31 2c       	mov	r3, r1
    10a2:	24 ff       	sbrs	r18, 4
    10a4:	12 c0       	rjmp	.+36     	; 0x10ca <vfprintf+0x338>
    10a6:	b7 01       	movw	r22, r14
    10a8:	80 e3       	ldi	r24, 0x30	; 48
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	2c 87       	std	Y+12, r18	; 0x0c
    10ae:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <fputc>
    10b2:	2c 85       	ldd	r18, Y+12	; 0x0c
    10b4:	22 ff       	sbrs	r18, 2
    10b6:	17 c0       	rjmp	.+46     	; 0x10e6 <vfprintf+0x354>
    10b8:	21 ff       	sbrs	r18, 1
    10ba:	03 c0       	rjmp	.+6      	; 0x10c2 <vfprintf+0x330>
    10bc:	88 e5       	ldi	r24, 0x58	; 88
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	02 c0       	rjmp	.+4      	; 0x10c6 <vfprintf+0x334>
    10c2:	88 e7       	ldi	r24, 0x78	; 120
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	b7 01       	movw	r22, r14
    10c8:	0c c0       	rjmp	.+24     	; 0x10e2 <vfprintf+0x350>
    10ca:	82 2f       	mov	r24, r18
    10cc:	86 78       	andi	r24, 0x86	; 134
    10ce:	59 f0       	breq	.+22     	; 0x10e6 <vfprintf+0x354>
    10d0:	21 fd       	sbrc	r18, 1
    10d2:	02 c0       	rjmp	.+4      	; 0x10d8 <vfprintf+0x346>
    10d4:	80 e2       	ldi	r24, 0x20	; 32
    10d6:	01 c0       	rjmp	.+2      	; 0x10da <vfprintf+0x348>
    10d8:	8b e2       	ldi	r24, 0x2B	; 43
    10da:	27 fd       	sbrc	r18, 7
    10dc:	8d e2       	ldi	r24, 0x2D	; 45
    10de:	b7 01       	movw	r22, r14
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <fputc>
    10e6:	a5 14       	cp	r10, r5
    10e8:	38 f4       	brcc	.+14     	; 0x10f8 <vfprintf+0x366>
    10ea:	b7 01       	movw	r22, r14
    10ec:	80 e3       	ldi	r24, 0x30	; 48
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <fputc>
    10f4:	5a 94       	dec	r5
    10f6:	f7 cf       	rjmp	.-18     	; 0x10e6 <vfprintf+0x354>
    10f8:	aa 94       	dec	r10
    10fa:	f4 01       	movw	r30, r8
    10fc:	ea 0d       	add	r30, r10
    10fe:	f1 1d       	adc	r31, r1
    1100:	80 81       	ld	r24, Z
    1102:	b7 01       	movw	r22, r14
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <fputc>
    110a:	a1 10       	cpse	r10, r1
    110c:	f5 cf       	rjmp	.-22     	; 0x10f8 <vfprintf+0x366>
    110e:	33 20       	and	r3, r3
    1110:	09 f4       	brne	.+2      	; 0x1114 <vfprintf+0x382>
    1112:	51 ce       	rjmp	.-862    	; 0xdb6 <vfprintf+0x24>
    1114:	b7 01       	movw	r22, r14
    1116:	80 e2       	ldi	r24, 0x20	; 32
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <fputc>
    111e:	3a 94       	dec	r3
    1120:	f6 cf       	rjmp	.-20     	; 0x110e <vfprintf+0x37c>
    1122:	f7 01       	movw	r30, r14
    1124:	86 81       	ldd	r24, Z+6	; 0x06
    1126:	97 81       	ldd	r25, Z+7	; 0x07
    1128:	02 c0       	rjmp	.+4      	; 0x112e <vfprintf+0x39c>
    112a:	8f ef       	ldi	r24, 0xFF	; 255
    112c:	9f ef       	ldi	r25, 0xFF	; 255
    112e:	2c 96       	adiw	r28, 0x0c	; 12
    1130:	e2 e1       	ldi	r30, 0x12	; 18
    1132:	0c 94 a7 0a 	jmp	0x154e	; 0x154e <__epilogue_restores__>

00001136 <calloc>:
    1136:	0f 93       	push	r16
    1138:	1f 93       	push	r17
    113a:	cf 93       	push	r28
    113c:	df 93       	push	r29
    113e:	86 9f       	mul	r24, r22
    1140:	80 01       	movw	r16, r0
    1142:	87 9f       	mul	r24, r23
    1144:	10 0d       	add	r17, r0
    1146:	96 9f       	mul	r25, r22
    1148:	10 0d       	add	r17, r0
    114a:	11 24       	eor	r1, r1
    114c:	c8 01       	movw	r24, r16
    114e:	0e 94 b7 08 	call	0x116e	; 0x116e <malloc>
    1152:	ec 01       	movw	r28, r24
    1154:	00 97       	sbiw	r24, 0x00	; 0
    1156:	29 f0       	breq	.+10     	; 0x1162 <calloc+0x2c>
    1158:	a8 01       	movw	r20, r16
    115a:	60 e0       	ldi	r22, 0x00	; 0
    115c:	70 e0       	ldi	r23, 0x00	; 0
    115e:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <memset>
    1162:	ce 01       	movw	r24, r28
    1164:	df 91       	pop	r29
    1166:	cf 91       	pop	r28
    1168:	1f 91       	pop	r17
    116a:	0f 91       	pop	r16
    116c:	08 95       	ret

0000116e <malloc>:
    116e:	cf 93       	push	r28
    1170:	df 93       	push	r29
    1172:	82 30       	cpi	r24, 0x02	; 2
    1174:	91 05       	cpc	r25, r1
    1176:	10 f4       	brcc	.+4      	; 0x117c <malloc+0xe>
    1178:	82 e0       	ldi	r24, 0x02	; 2
    117a:	90 e0       	ldi	r25, 0x00	; 0
    117c:	e0 91 72 02 	lds	r30, 0x0272
    1180:	f0 91 73 02 	lds	r31, 0x0273
    1184:	20 e0       	ldi	r18, 0x00	; 0
    1186:	30 e0       	ldi	r19, 0x00	; 0
    1188:	a0 e0       	ldi	r26, 0x00	; 0
    118a:	b0 e0       	ldi	r27, 0x00	; 0
    118c:	30 97       	sbiw	r30, 0x00	; 0
    118e:	39 f1       	breq	.+78     	; 0x11de <malloc+0x70>
    1190:	40 81       	ld	r20, Z
    1192:	51 81       	ldd	r21, Z+1	; 0x01
    1194:	48 17       	cp	r20, r24
    1196:	59 07       	cpc	r21, r25
    1198:	b8 f0       	brcs	.+46     	; 0x11c8 <malloc+0x5a>
    119a:	48 17       	cp	r20, r24
    119c:	59 07       	cpc	r21, r25
    119e:	71 f4       	brne	.+28     	; 0x11bc <malloc+0x4e>
    11a0:	82 81       	ldd	r24, Z+2	; 0x02
    11a2:	93 81       	ldd	r25, Z+3	; 0x03
    11a4:	10 97       	sbiw	r26, 0x00	; 0
    11a6:	29 f0       	breq	.+10     	; 0x11b2 <malloc+0x44>
    11a8:	13 96       	adiw	r26, 0x03	; 3
    11aa:	9c 93       	st	X, r25
    11ac:	8e 93       	st	-X, r24
    11ae:	12 97       	sbiw	r26, 0x02	; 2
    11b0:	2c c0       	rjmp	.+88     	; 0x120a <malloc+0x9c>
    11b2:	90 93 73 02 	sts	0x0273, r25
    11b6:	80 93 72 02 	sts	0x0272, r24
    11ba:	27 c0       	rjmp	.+78     	; 0x120a <malloc+0x9c>
    11bc:	21 15       	cp	r18, r1
    11be:	31 05       	cpc	r19, r1
    11c0:	31 f0       	breq	.+12     	; 0x11ce <malloc+0x60>
    11c2:	42 17       	cp	r20, r18
    11c4:	53 07       	cpc	r21, r19
    11c6:	18 f0       	brcs	.+6      	; 0x11ce <malloc+0x60>
    11c8:	a9 01       	movw	r20, r18
    11ca:	db 01       	movw	r26, r22
    11cc:	01 c0       	rjmp	.+2      	; 0x11d0 <malloc+0x62>
    11ce:	ef 01       	movw	r28, r30
    11d0:	9a 01       	movw	r18, r20
    11d2:	bd 01       	movw	r22, r26
    11d4:	df 01       	movw	r26, r30
    11d6:	02 80       	ldd	r0, Z+2	; 0x02
    11d8:	f3 81       	ldd	r31, Z+3	; 0x03
    11da:	e0 2d       	mov	r30, r0
    11dc:	d7 cf       	rjmp	.-82     	; 0x118c <malloc+0x1e>
    11de:	21 15       	cp	r18, r1
    11e0:	31 05       	cpc	r19, r1
    11e2:	f9 f0       	breq	.+62     	; 0x1222 <malloc+0xb4>
    11e4:	28 1b       	sub	r18, r24
    11e6:	39 0b       	sbc	r19, r25
    11e8:	24 30       	cpi	r18, 0x04	; 4
    11ea:	31 05       	cpc	r19, r1
    11ec:	80 f4       	brcc	.+32     	; 0x120e <malloc+0xa0>
    11ee:	8a 81       	ldd	r24, Y+2	; 0x02
    11f0:	9b 81       	ldd	r25, Y+3	; 0x03
    11f2:	61 15       	cp	r22, r1
    11f4:	71 05       	cpc	r23, r1
    11f6:	21 f0       	breq	.+8      	; 0x1200 <malloc+0x92>
    11f8:	fb 01       	movw	r30, r22
    11fa:	93 83       	std	Z+3, r25	; 0x03
    11fc:	82 83       	std	Z+2, r24	; 0x02
    11fe:	04 c0       	rjmp	.+8      	; 0x1208 <malloc+0x9a>
    1200:	90 93 73 02 	sts	0x0273, r25
    1204:	80 93 72 02 	sts	0x0272, r24
    1208:	fe 01       	movw	r30, r28
    120a:	32 96       	adiw	r30, 0x02	; 2
    120c:	44 c0       	rjmp	.+136    	; 0x1296 <malloc+0x128>
    120e:	fe 01       	movw	r30, r28
    1210:	e2 0f       	add	r30, r18
    1212:	f3 1f       	adc	r31, r19
    1214:	81 93       	st	Z+, r24
    1216:	91 93       	st	Z+, r25
    1218:	22 50       	subi	r18, 0x02	; 2
    121a:	31 09       	sbc	r19, r1
    121c:	39 83       	std	Y+1, r19	; 0x01
    121e:	28 83       	st	Y, r18
    1220:	3a c0       	rjmp	.+116    	; 0x1296 <malloc+0x128>
    1222:	20 91 70 02 	lds	r18, 0x0270
    1226:	30 91 71 02 	lds	r19, 0x0271
    122a:	23 2b       	or	r18, r19
    122c:	41 f4       	brne	.+16     	; 0x123e <malloc+0xd0>
    122e:	20 91 02 01 	lds	r18, 0x0102
    1232:	30 91 03 01 	lds	r19, 0x0103
    1236:	30 93 71 02 	sts	0x0271, r19
    123a:	20 93 70 02 	sts	0x0270, r18
    123e:	20 91 00 01 	lds	r18, 0x0100
    1242:	30 91 01 01 	lds	r19, 0x0101
    1246:	21 15       	cp	r18, r1
    1248:	31 05       	cpc	r19, r1
    124a:	41 f4       	brne	.+16     	; 0x125c <malloc+0xee>
    124c:	2d b7       	in	r18, 0x3d	; 61
    124e:	3e b7       	in	r19, 0x3e	; 62
    1250:	40 91 04 01 	lds	r20, 0x0104
    1254:	50 91 05 01 	lds	r21, 0x0105
    1258:	24 1b       	sub	r18, r20
    125a:	35 0b       	sbc	r19, r21
    125c:	e0 91 70 02 	lds	r30, 0x0270
    1260:	f0 91 71 02 	lds	r31, 0x0271
    1264:	e2 17       	cp	r30, r18
    1266:	f3 07       	cpc	r31, r19
    1268:	a0 f4       	brcc	.+40     	; 0x1292 <malloc+0x124>
    126a:	2e 1b       	sub	r18, r30
    126c:	3f 0b       	sbc	r19, r31
    126e:	28 17       	cp	r18, r24
    1270:	39 07       	cpc	r19, r25
    1272:	78 f0       	brcs	.+30     	; 0x1292 <malloc+0x124>
    1274:	ac 01       	movw	r20, r24
    1276:	4e 5f       	subi	r20, 0xFE	; 254
    1278:	5f 4f       	sbci	r21, 0xFF	; 255
    127a:	24 17       	cp	r18, r20
    127c:	35 07       	cpc	r19, r21
    127e:	48 f0       	brcs	.+18     	; 0x1292 <malloc+0x124>
    1280:	4e 0f       	add	r20, r30
    1282:	5f 1f       	adc	r21, r31
    1284:	50 93 71 02 	sts	0x0271, r21
    1288:	40 93 70 02 	sts	0x0270, r20
    128c:	81 93       	st	Z+, r24
    128e:	91 93       	st	Z+, r25
    1290:	02 c0       	rjmp	.+4      	; 0x1296 <malloc+0x128>
    1292:	e0 e0       	ldi	r30, 0x00	; 0
    1294:	f0 e0       	ldi	r31, 0x00	; 0
    1296:	cf 01       	movw	r24, r30
    1298:	df 91       	pop	r29
    129a:	cf 91       	pop	r28
    129c:	08 95       	ret

0000129e <free>:
    129e:	cf 93       	push	r28
    12a0:	df 93       	push	r29
    12a2:	00 97       	sbiw	r24, 0x00	; 0
    12a4:	09 f4       	brne	.+2      	; 0x12a8 <free+0xa>
    12a6:	87 c0       	rjmp	.+270    	; 0x13b6 <free+0x118>
    12a8:	fc 01       	movw	r30, r24
    12aa:	32 97       	sbiw	r30, 0x02	; 2
    12ac:	13 82       	std	Z+3, r1	; 0x03
    12ae:	12 82       	std	Z+2, r1	; 0x02
    12b0:	c0 91 72 02 	lds	r28, 0x0272
    12b4:	d0 91 73 02 	lds	r29, 0x0273
    12b8:	20 97       	sbiw	r28, 0x00	; 0
    12ba:	81 f4       	brne	.+32     	; 0x12dc <free+0x3e>
    12bc:	20 81       	ld	r18, Z
    12be:	31 81       	ldd	r19, Z+1	; 0x01
    12c0:	28 0f       	add	r18, r24
    12c2:	39 1f       	adc	r19, r25
    12c4:	80 91 70 02 	lds	r24, 0x0270
    12c8:	90 91 71 02 	lds	r25, 0x0271
    12cc:	82 17       	cp	r24, r18
    12ce:	93 07       	cpc	r25, r19
    12d0:	79 f5       	brne	.+94     	; 0x1330 <free+0x92>
    12d2:	f0 93 71 02 	sts	0x0271, r31
    12d6:	e0 93 70 02 	sts	0x0270, r30
    12da:	6d c0       	rjmp	.+218    	; 0x13b6 <free+0x118>
    12dc:	de 01       	movw	r26, r28
    12de:	20 e0       	ldi	r18, 0x00	; 0
    12e0:	30 e0       	ldi	r19, 0x00	; 0
    12e2:	ae 17       	cp	r26, r30
    12e4:	bf 07       	cpc	r27, r31
    12e6:	50 f4       	brcc	.+20     	; 0x12fc <free+0x5e>
    12e8:	12 96       	adiw	r26, 0x02	; 2
    12ea:	4d 91       	ld	r20, X+
    12ec:	5c 91       	ld	r21, X
    12ee:	13 97       	sbiw	r26, 0x03	; 3
    12f0:	9d 01       	movw	r18, r26
    12f2:	41 15       	cp	r20, r1
    12f4:	51 05       	cpc	r21, r1
    12f6:	09 f1       	breq	.+66     	; 0x133a <free+0x9c>
    12f8:	da 01       	movw	r26, r20
    12fa:	f3 cf       	rjmp	.-26     	; 0x12e2 <free+0x44>
    12fc:	b3 83       	std	Z+3, r27	; 0x03
    12fe:	a2 83       	std	Z+2, r26	; 0x02
    1300:	40 81       	ld	r20, Z
    1302:	51 81       	ldd	r21, Z+1	; 0x01
    1304:	84 0f       	add	r24, r20
    1306:	95 1f       	adc	r25, r21
    1308:	8a 17       	cp	r24, r26
    130a:	9b 07       	cpc	r25, r27
    130c:	71 f4       	brne	.+28     	; 0x132a <free+0x8c>
    130e:	8d 91       	ld	r24, X+
    1310:	9c 91       	ld	r25, X
    1312:	11 97       	sbiw	r26, 0x01	; 1
    1314:	84 0f       	add	r24, r20
    1316:	95 1f       	adc	r25, r21
    1318:	02 96       	adiw	r24, 0x02	; 2
    131a:	91 83       	std	Z+1, r25	; 0x01
    131c:	80 83       	st	Z, r24
    131e:	12 96       	adiw	r26, 0x02	; 2
    1320:	8d 91       	ld	r24, X+
    1322:	9c 91       	ld	r25, X
    1324:	13 97       	sbiw	r26, 0x03	; 3
    1326:	93 83       	std	Z+3, r25	; 0x03
    1328:	82 83       	std	Z+2, r24	; 0x02
    132a:	21 15       	cp	r18, r1
    132c:	31 05       	cpc	r19, r1
    132e:	29 f4       	brne	.+10     	; 0x133a <free+0x9c>
    1330:	f0 93 73 02 	sts	0x0273, r31
    1334:	e0 93 72 02 	sts	0x0272, r30
    1338:	3e c0       	rjmp	.+124    	; 0x13b6 <free+0x118>
    133a:	d9 01       	movw	r26, r18
    133c:	13 96       	adiw	r26, 0x03	; 3
    133e:	fc 93       	st	X, r31
    1340:	ee 93       	st	-X, r30
    1342:	12 97       	sbiw	r26, 0x02	; 2
    1344:	4d 91       	ld	r20, X+
    1346:	5d 91       	ld	r21, X+
    1348:	a4 0f       	add	r26, r20
    134a:	b5 1f       	adc	r27, r21
    134c:	ea 17       	cp	r30, r26
    134e:	fb 07       	cpc	r31, r27
    1350:	79 f4       	brne	.+30     	; 0x1370 <free+0xd2>
    1352:	80 81       	ld	r24, Z
    1354:	91 81       	ldd	r25, Z+1	; 0x01
    1356:	84 0f       	add	r24, r20
    1358:	95 1f       	adc	r25, r21
    135a:	02 96       	adiw	r24, 0x02	; 2
    135c:	d9 01       	movw	r26, r18
    135e:	11 96       	adiw	r26, 0x01	; 1
    1360:	9c 93       	st	X, r25
    1362:	8e 93       	st	-X, r24
    1364:	82 81       	ldd	r24, Z+2	; 0x02
    1366:	93 81       	ldd	r25, Z+3	; 0x03
    1368:	13 96       	adiw	r26, 0x03	; 3
    136a:	9c 93       	st	X, r25
    136c:	8e 93       	st	-X, r24
    136e:	12 97       	sbiw	r26, 0x02	; 2
    1370:	e0 e0       	ldi	r30, 0x00	; 0
    1372:	f0 e0       	ldi	r31, 0x00	; 0
    1374:	8a 81       	ldd	r24, Y+2	; 0x02
    1376:	9b 81       	ldd	r25, Y+3	; 0x03
    1378:	00 97       	sbiw	r24, 0x00	; 0
    137a:	19 f0       	breq	.+6      	; 0x1382 <free+0xe4>
    137c:	fe 01       	movw	r30, r28
    137e:	ec 01       	movw	r28, r24
    1380:	f9 cf       	rjmp	.-14     	; 0x1374 <free+0xd6>
    1382:	ce 01       	movw	r24, r28
    1384:	02 96       	adiw	r24, 0x02	; 2
    1386:	28 81       	ld	r18, Y
    1388:	39 81       	ldd	r19, Y+1	; 0x01
    138a:	82 0f       	add	r24, r18
    138c:	93 1f       	adc	r25, r19
    138e:	20 91 70 02 	lds	r18, 0x0270
    1392:	30 91 71 02 	lds	r19, 0x0271
    1396:	28 17       	cp	r18, r24
    1398:	39 07       	cpc	r19, r25
    139a:	69 f4       	brne	.+26     	; 0x13b6 <free+0x118>
    139c:	30 97       	sbiw	r30, 0x00	; 0
    139e:	29 f4       	brne	.+10     	; 0x13aa <free+0x10c>
    13a0:	10 92 73 02 	sts	0x0273, r1
    13a4:	10 92 72 02 	sts	0x0272, r1
    13a8:	02 c0       	rjmp	.+4      	; 0x13ae <free+0x110>
    13aa:	13 82       	std	Z+3, r1	; 0x03
    13ac:	12 82       	std	Z+2, r1	; 0x02
    13ae:	d0 93 71 02 	sts	0x0271, r29
    13b2:	c0 93 70 02 	sts	0x0270, r28
    13b6:	df 91       	pop	r29
    13b8:	cf 91       	pop	r28
    13ba:	08 95       	ret

000013bc <strnlen_P>:
    13bc:	fc 01       	movw	r30, r24
    13be:	05 90       	lpm	r0, Z+
    13c0:	61 50       	subi	r22, 0x01	; 1
    13c2:	70 40       	sbci	r23, 0x00	; 0
    13c4:	01 10       	cpse	r0, r1
    13c6:	d8 f7       	brcc	.-10     	; 0x13be <strnlen_P+0x2>
    13c8:	80 95       	com	r24
    13ca:	90 95       	com	r25
    13cc:	8e 0f       	add	r24, r30
    13ce:	9f 1f       	adc	r25, r31
    13d0:	08 95       	ret

000013d2 <memset>:
    13d2:	dc 01       	movw	r26, r24
    13d4:	01 c0       	rjmp	.+2      	; 0x13d8 <memset+0x6>
    13d6:	6d 93       	st	X+, r22
    13d8:	41 50       	subi	r20, 0x01	; 1
    13da:	50 40       	sbci	r21, 0x00	; 0
    13dc:	e0 f7       	brcc	.-8      	; 0x13d6 <memset+0x4>
    13de:	08 95       	ret

000013e0 <strnlen>:
    13e0:	fc 01       	movw	r30, r24
    13e2:	61 50       	subi	r22, 0x01	; 1
    13e4:	70 40       	sbci	r23, 0x00	; 0
    13e6:	01 90       	ld	r0, Z+
    13e8:	01 10       	cpse	r0, r1
    13ea:	d8 f7       	brcc	.-10     	; 0x13e2 <strnlen+0x2>
    13ec:	80 95       	com	r24
    13ee:	90 95       	com	r25
    13f0:	8e 0f       	add	r24, r30
    13f2:	9f 1f       	adc	r25, r31
    13f4:	08 95       	ret

000013f6 <fputc>:
    13f6:	0f 93       	push	r16
    13f8:	1f 93       	push	r17
    13fa:	cf 93       	push	r28
    13fc:	df 93       	push	r29
    13fe:	18 2f       	mov	r17, r24
    1400:	09 2f       	mov	r16, r25
    1402:	eb 01       	movw	r28, r22
    1404:	8b 81       	ldd	r24, Y+3	; 0x03
    1406:	81 fd       	sbrc	r24, 1
    1408:	03 c0       	rjmp	.+6      	; 0x1410 <fputc+0x1a>
    140a:	8f ef       	ldi	r24, 0xFF	; 255
    140c:	9f ef       	ldi	r25, 0xFF	; 255
    140e:	20 c0       	rjmp	.+64     	; 0x1450 <fputc+0x5a>
    1410:	82 ff       	sbrs	r24, 2
    1412:	10 c0       	rjmp	.+32     	; 0x1434 <fputc+0x3e>
    1414:	4e 81       	ldd	r20, Y+6	; 0x06
    1416:	5f 81       	ldd	r21, Y+7	; 0x07
    1418:	2c 81       	ldd	r18, Y+4	; 0x04
    141a:	3d 81       	ldd	r19, Y+5	; 0x05
    141c:	42 17       	cp	r20, r18
    141e:	53 07       	cpc	r21, r19
    1420:	7c f4       	brge	.+30     	; 0x1440 <fputc+0x4a>
    1422:	e8 81       	ld	r30, Y
    1424:	f9 81       	ldd	r31, Y+1	; 0x01
    1426:	9f 01       	movw	r18, r30
    1428:	2f 5f       	subi	r18, 0xFF	; 255
    142a:	3f 4f       	sbci	r19, 0xFF	; 255
    142c:	39 83       	std	Y+1, r19	; 0x01
    142e:	28 83       	st	Y, r18
    1430:	10 83       	st	Z, r17
    1432:	06 c0       	rjmp	.+12     	; 0x1440 <fputc+0x4a>
    1434:	e8 85       	ldd	r30, Y+8	; 0x08
    1436:	f9 85       	ldd	r31, Y+9	; 0x09
    1438:	81 2f       	mov	r24, r17
    143a:	09 95       	icall
    143c:	89 2b       	or	r24, r25
    143e:	29 f7       	brne	.-54     	; 0x140a <fputc+0x14>
    1440:	2e 81       	ldd	r18, Y+6	; 0x06
    1442:	3f 81       	ldd	r19, Y+7	; 0x07
    1444:	2f 5f       	subi	r18, 0xFF	; 255
    1446:	3f 4f       	sbci	r19, 0xFF	; 255
    1448:	3f 83       	std	Y+7, r19	; 0x07
    144a:	2e 83       	std	Y+6, r18	; 0x06
    144c:	81 2f       	mov	r24, r17
    144e:	90 2f       	mov	r25, r16
    1450:	df 91       	pop	r29
    1452:	cf 91       	pop	r28
    1454:	1f 91       	pop	r17
    1456:	0f 91       	pop	r16
    1458:	08 95       	ret

0000145a <__ultoa_invert>:
    145a:	fa 01       	movw	r30, r20
    145c:	aa 27       	eor	r26, r26
    145e:	28 30       	cpi	r18, 0x08	; 8
    1460:	51 f1       	breq	.+84     	; 0x14b6 <__ultoa_invert+0x5c>
    1462:	20 31       	cpi	r18, 0x10	; 16
    1464:	81 f1       	breq	.+96     	; 0x14c6 <__ultoa_invert+0x6c>
    1466:	e8 94       	clt
    1468:	6f 93       	push	r22
    146a:	6e 7f       	andi	r22, 0xFE	; 254
    146c:	6e 5f       	subi	r22, 0xFE	; 254
    146e:	7f 4f       	sbci	r23, 0xFF	; 255
    1470:	8f 4f       	sbci	r24, 0xFF	; 255
    1472:	9f 4f       	sbci	r25, 0xFF	; 255
    1474:	af 4f       	sbci	r26, 0xFF	; 255
    1476:	b1 e0       	ldi	r27, 0x01	; 1
    1478:	3e d0       	rcall	.+124    	; 0x14f6 <__ultoa_invert+0x9c>
    147a:	b4 e0       	ldi	r27, 0x04	; 4
    147c:	3c d0       	rcall	.+120    	; 0x14f6 <__ultoa_invert+0x9c>
    147e:	67 0f       	add	r22, r23
    1480:	78 1f       	adc	r23, r24
    1482:	89 1f       	adc	r24, r25
    1484:	9a 1f       	adc	r25, r26
    1486:	a1 1d       	adc	r26, r1
    1488:	68 0f       	add	r22, r24
    148a:	79 1f       	adc	r23, r25
    148c:	8a 1f       	adc	r24, r26
    148e:	91 1d       	adc	r25, r1
    1490:	a1 1d       	adc	r26, r1
    1492:	6a 0f       	add	r22, r26
    1494:	71 1d       	adc	r23, r1
    1496:	81 1d       	adc	r24, r1
    1498:	91 1d       	adc	r25, r1
    149a:	a1 1d       	adc	r26, r1
    149c:	20 d0       	rcall	.+64     	; 0x14de <__ultoa_invert+0x84>
    149e:	09 f4       	brne	.+2      	; 0x14a2 <__ultoa_invert+0x48>
    14a0:	68 94       	set
    14a2:	3f 91       	pop	r19
    14a4:	2a e0       	ldi	r18, 0x0A	; 10
    14a6:	26 9f       	mul	r18, r22
    14a8:	11 24       	eor	r1, r1
    14aa:	30 19       	sub	r19, r0
    14ac:	30 5d       	subi	r19, 0xD0	; 208
    14ae:	31 93       	st	Z+, r19
    14b0:	de f6       	brtc	.-74     	; 0x1468 <__ultoa_invert+0xe>
    14b2:	cf 01       	movw	r24, r30
    14b4:	08 95       	ret
    14b6:	46 2f       	mov	r20, r22
    14b8:	47 70       	andi	r20, 0x07	; 7
    14ba:	40 5d       	subi	r20, 0xD0	; 208
    14bc:	41 93       	st	Z+, r20
    14be:	b3 e0       	ldi	r27, 0x03	; 3
    14c0:	0f d0       	rcall	.+30     	; 0x14e0 <__ultoa_invert+0x86>
    14c2:	c9 f7       	brne	.-14     	; 0x14b6 <__ultoa_invert+0x5c>
    14c4:	f6 cf       	rjmp	.-20     	; 0x14b2 <__ultoa_invert+0x58>
    14c6:	46 2f       	mov	r20, r22
    14c8:	4f 70       	andi	r20, 0x0F	; 15
    14ca:	40 5d       	subi	r20, 0xD0	; 208
    14cc:	4a 33       	cpi	r20, 0x3A	; 58
    14ce:	18 f0       	brcs	.+6      	; 0x14d6 <__ultoa_invert+0x7c>
    14d0:	49 5d       	subi	r20, 0xD9	; 217
    14d2:	31 fd       	sbrc	r19, 1
    14d4:	40 52       	subi	r20, 0x20	; 32
    14d6:	41 93       	st	Z+, r20
    14d8:	02 d0       	rcall	.+4      	; 0x14de <__ultoa_invert+0x84>
    14da:	a9 f7       	brne	.-22     	; 0x14c6 <__ultoa_invert+0x6c>
    14dc:	ea cf       	rjmp	.-44     	; 0x14b2 <__ultoa_invert+0x58>
    14de:	b4 e0       	ldi	r27, 0x04	; 4
    14e0:	a6 95       	lsr	r26
    14e2:	97 95       	ror	r25
    14e4:	87 95       	ror	r24
    14e6:	77 95       	ror	r23
    14e8:	67 95       	ror	r22
    14ea:	ba 95       	dec	r27
    14ec:	c9 f7       	brne	.-14     	; 0x14e0 <__ultoa_invert+0x86>
    14ee:	00 97       	sbiw	r24, 0x00	; 0
    14f0:	61 05       	cpc	r22, r1
    14f2:	71 05       	cpc	r23, r1
    14f4:	08 95       	ret
    14f6:	9b 01       	movw	r18, r22
    14f8:	ac 01       	movw	r20, r24
    14fa:	0a 2e       	mov	r0, r26
    14fc:	06 94       	lsr	r0
    14fe:	57 95       	ror	r21
    1500:	47 95       	ror	r20
    1502:	37 95       	ror	r19
    1504:	27 95       	ror	r18
    1506:	ba 95       	dec	r27
    1508:	c9 f7       	brne	.-14     	; 0x14fc <__ultoa_invert+0xa2>
    150a:	62 0f       	add	r22, r18
    150c:	73 1f       	adc	r23, r19
    150e:	84 1f       	adc	r24, r20
    1510:	95 1f       	adc	r25, r21
    1512:	a0 1d       	adc	r26, r0
    1514:	08 95       	ret

00001516 <__prologue_saves__>:
    1516:	2f 92       	push	r2
    1518:	3f 92       	push	r3
    151a:	4f 92       	push	r4
    151c:	5f 92       	push	r5
    151e:	6f 92       	push	r6
    1520:	7f 92       	push	r7
    1522:	8f 92       	push	r8
    1524:	9f 92       	push	r9
    1526:	af 92       	push	r10
    1528:	bf 92       	push	r11
    152a:	cf 92       	push	r12
    152c:	df 92       	push	r13
    152e:	ef 92       	push	r14
    1530:	ff 92       	push	r15
    1532:	0f 93       	push	r16
    1534:	1f 93       	push	r17
    1536:	cf 93       	push	r28
    1538:	df 93       	push	r29
    153a:	cd b7       	in	r28, 0x3d	; 61
    153c:	de b7       	in	r29, 0x3e	; 62
    153e:	ca 1b       	sub	r28, r26
    1540:	db 0b       	sbc	r29, r27
    1542:	0f b6       	in	r0, 0x3f	; 63
    1544:	f8 94       	cli
    1546:	de bf       	out	0x3e, r29	; 62
    1548:	0f be       	out	0x3f, r0	; 63
    154a:	cd bf       	out	0x3d, r28	; 61
    154c:	09 94       	ijmp

0000154e <__epilogue_restores__>:
    154e:	2a 88       	ldd	r2, Y+18	; 0x12
    1550:	39 88       	ldd	r3, Y+17	; 0x11
    1552:	48 88       	ldd	r4, Y+16	; 0x10
    1554:	5f 84       	ldd	r5, Y+15	; 0x0f
    1556:	6e 84       	ldd	r6, Y+14	; 0x0e
    1558:	7d 84       	ldd	r7, Y+13	; 0x0d
    155a:	8c 84       	ldd	r8, Y+12	; 0x0c
    155c:	9b 84       	ldd	r9, Y+11	; 0x0b
    155e:	aa 84       	ldd	r10, Y+10	; 0x0a
    1560:	b9 84       	ldd	r11, Y+9	; 0x09
    1562:	c8 84       	ldd	r12, Y+8	; 0x08
    1564:	df 80       	ldd	r13, Y+7	; 0x07
    1566:	ee 80       	ldd	r14, Y+6	; 0x06
    1568:	fd 80       	ldd	r15, Y+5	; 0x05
    156a:	0c 81       	ldd	r16, Y+4	; 0x04
    156c:	1b 81       	ldd	r17, Y+3	; 0x03
    156e:	aa 81       	ldd	r26, Y+2	; 0x02
    1570:	b9 81       	ldd	r27, Y+1	; 0x01
    1572:	ce 0f       	add	r28, r30
    1574:	d1 1d       	adc	r29, r1
    1576:	0f b6       	in	r0, 0x3f	; 63
    1578:	f8 94       	cli
    157a:	de bf       	out	0x3e, r29	; 62
    157c:	0f be       	out	0x3f, r0	; 63
    157e:	cd bf       	out	0x3d, r28	; 61
    1580:	ed 01       	movw	r28, r26
    1582:	08 95       	ret

00001584 <_exit>:
    1584:	f8 94       	cli

00001586 <__stop_program>:
    1586:	ff cf       	rjmp	.-2      	; 0x1586 <__stop_program>
